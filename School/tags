!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
AR	base/Makefile	/^AR            = ar$/;"	m
AR	common/Makefile	/^AR            = ar$/;"	m
AR	protol/Makefile	/^AR            = ar$/;"	m
AUTO_LIFE_HOOK_H	base/autoLifeHook.h	2;"	d
AutoLifeHook	base/autoLifeHook.h	/^		AutoLifeHook()$/;"	f	class:AutoLifeHook
AutoLifeHook	base/autoLifeHook.h	/^class AutoLifeHook : public boost::enable_shared_from_this<AutoLifeHook>,public boost::noncopyable$/;"	c
BASE_CHECK_CONNECT_THREAD_H	base/baseCheckConnectThread.h	2;"	d
BASE_CHECK_CONNECT_THREAD_H	orgainCode/baseCheckConnectThread.h	2;"	d
BASE_CHECK_WAIT_THREAD_H	base/baseCheckWaitThread.h	2;"	d
BASE_CHECK_WAIT_THREAD_H	orgainCode/baseCheckWaitThread.h	2;"	d
BASE_CLASS_H	base/baseClass.h	2;"	d
BASE_CMD_BUFFER_H	base/baseCmdBuffer.h	2;"	d
BASE_CONSTRUCT_H	base/baseConstruct.h	2;"	d
BASE_DEF_H	common/baseDef.h	2;"	d
BASE_ENTRY_H	base/baseEntry.h	2;"	d
BASE_FUN_H	base/baseFunc.h	2;"	d
BASE_LOCK_H	base/baseLock.h	2;"	d
BASE_LOGGER_H	base/baseLog.h	2;"	d
BASE_MSG_CONTAINER_H	base/baseMsgContainer.h	2;"	d
BASE_NET_SERVICE_H	base/baseNetService.h	2;"	d
BASE_OKAY_THREAD_H	base/baseOkayThread.h	2;"	d
BASE_PROPERTY_H	base/baseProperty.h	2;"	d
BASE_PROPERTY_H	orgainCode/baseProperty.h	2;"	d
BASE_PTHREAD_H	base/basePthread.h	2;"	d
BASE_RECYCLE_THREAD_H	base/baseRecycleThread.h	2;"	d
BASE_SERVICE_H	base/baseService.h	2;"	d
BASE_SOCKET_H	base/baseSocket.h	2;"	d
BASE_SQL_HANDLE_H	base/baseSqlHandle.h	2;"	d
BASE_SQL_POOL_H	base/baseSqlPool.h	2;"	d
BASE_SQL_RECORD_H	base/baseSqlRecord.h	2;"	d
BASE_SQL_TABLE_H	base/baseSqlTable.h	2;"	d
BASE_SQL_UINT_H	base/baseSqlFiled.h	2;"	d
BASE_SQL_URL_H	base/baseSqlUrl.h	2;"	d
BASE_SQL_VAL_TYPE_H	base/baseSqlValType.h	2;"	d
BASE_SUB_SERVICE_H	base/baseSubService.h	2;"	d
BASE_SUPER_CLIENT_H	base/baseSuperClient.h	2;"	d
BASE_SUPER_CLIENT_H	orgainCode/baseSuperClient.h	2;"	d
BASE_SYNC_THREAD_H	base/baseSyncThread.h	2;"	d
BASE_TASK_CONTAINER_H	base/baseTaskContainer.h	2;"	d
BASE_TASK_MANAGER_H	base/baseTaskManager.h	2;"	d
BASE_TASK_MANAGER_H	orgainCode/baseTaskManager.h	2;"	d
BASE_TASK_QUEUE_MANAGER_H	base/baseTaskQueueManager.h	2;"	d
BASE_TASK_QUEUE_MANAGER_H	orgainCode/baseTaskQueueManager.h	2;"	d
BASE_TASK_THREAD_H	base/baseTaskThread.h	2;"	d
BASE_TCP_CLIENT_BUFFER_H	base/baseTcpClientBuffer.h	2;"	d
BASE_TCP_CLIENT_H	base/baseTcpClient.h	2;"	d
BASE_TCP_CLIENT_TASK_H	base/baseTcpClientTask.h	2;"	d
BASE_TCP_CLIENT_TASK_H	orgainCode/baseTcpClientTask.h	2;"	d
BASE_TCP_CLIENT_TASK_POOL_H	base/baseTcpClientTaskPool.h	2;"	d
BASE_TCP_CLIENT_TASK_THREAD_H	base/baseTcpClientThread.h	2;"	d
BASE_TCP_CLIENT_TASK_THREAD_H	orgainCode/baseTcpClientThread.h	2;"	d
BASE_TCP_SERVICE_H	base/baseTcpService.h	2;"	d
BASE_TCP_TASK_H	base/baseTcpTask.h	2;"	d
BASE_TCP_TASK_POOL_H	base/baseTaskPool.h	2;"	d
BASE_TCP_TASK_QUEUE_H	base/baseTcpTaskQueue.h	2;"	d
BASE_TCP_TASK_QUEUE_H	orgainCode/baseTcpTaskQueue.h	2;"	d
BASE_THREAD_H	base/baseThread.h	2;"	d
BASE_THREAD_MANAGER_H	base/baseThreadManager.h	2;"	d
BASE_THREAD_MANAGER_H	orgainCode/baseThreadManager.h	2;"	d
BASE_TIME_H	base/baseTime.h	2;"	d
BASE_TIME_H	orgainCode/baseTime.h	2;"	d
BASE_VERIFY_THREAD_H	base/baseVerifyThread.h	2;"	d
BIT_SET_H	base/bitSet.h	2;"	d
BUFFER_CMD	base/baseCmdBuffer.h	7;"	d
BUILD_BASE_DIR	Makefile	/^BUILD_BASE_DIR = base$/;"	m
BUILD_COM_DIR	Makefile	/^BUILD_COM_DIR = common$/;"	m
BUILD_PROTOL_DIR	Makefile	/^BUILD_PROTOL_DIR = protol$/;"	m
BUILD_RECORD_SERVER_DIR	Makefile	/^BUILD_RECORD_SERVER_DIR = RecordServer$/;"	m
BUILD_SCENES_SERVER_DIR	Makefile	/^BUILD_SCENES_SERVER_DIR = ScenesServer$/;"	m
BUILD_SESSION_SERVER_DIR	Makefile	/^BUILD_SESSION_SERVER_DIR = SessionServer$/;"	m
BUILD_SUPER_SERVER_DIR	Makefile	/^BUILD_SUPER_SERVER_DIR = SuperServer$/;"	m
BYTE	common/baseDef.h	/^typedef unsigned char BYTE; $/;"	t
BitSet	base/bitSet.cpp	/^BitSet::BitSet( const BitSet &ref )$/;"	f	class:BitSet
BitSet	base/bitSet.cpp	/^BitSet::BitSet( size_t size ) : m_size( size )$/;"	f	class:BitSet
BitSet	base/bitSet.cpp	/^BitSet::BitSet():m_size( 0 )$/;"	f	class:BitSet
BitSet	base/bitSet.h	/^class BitSet$/;"	c
BufferCmdQueue	base/baseMsgContainer.h	/^typedef ByteBuffer<std::vector<BYTE> > BufferCmdQueue;$/;"	t
ByteBuffer	base/baseMsgContainer.cpp	/^BufferCmdQueue::ByteBuffer():m_maxSize(trunkSize),m_offPtr(0),m_curPtr(0),m_buffer(m_maxSize)$/;"	f	class:BufferCmdQueue
ByteBuffer	base/baseMsgContainer.cpp	/^StackCmdQueue::ByteBuffer():m_maxSize(PACKET_ZIP_BUFFER),m_offPtr(0),m_curPtr(0)$/;"	f	class:StackCmdQueue
ByteBuffer	base/baseMsgContainer.h	/^class ByteBuffer$/;"	c
CC	RecordServer/Makefile	/^CC            = gcc$/;"	m
CC	ScenesServer/Makefile	/^CC            = gcc$/;"	m
CC	SessionServer/Makefile	/^CC            = gcc$/;"	m
CC	SuperServer/Makefile	/^CC            = gcc$/;"	m
CC	base/Makefile	/^CC            = gcc$/;"	m
CC	common/Makefile	/^CC            = gcc$/;"	m
CC	protol/Makefile	/^CC            = gcc$/;"	m
CFLAGS	RecordServer/Makefile	/^CFLAGS         := -g -I$(PROJECT_INC_DIR) -I\/usr\/include\/mysql\/include\/$/;"	m
CFLAGS	ScenesServer/Makefile	/^CFLAGS         := -g -I$(PROJECT_INC_DIR) -I\/usr\/include\/mysql\/include\/$/;"	m
CFLAGS	SessionServer/Makefile	/^CFLAGS         := -g -I$(PROJECT_INC_DIR) -I\/usr\/include\/mysql\/include\/$/;"	m
CFLAGS	SuperServer/Makefile	/^CFLAGS         := -g -I$(PROJECT_INC_DIR) -I\/usr\/include\/mysql\/include\/$/;"	m
CFLAGS	base/Makefile	/^CFLAGS         := -g -I$(PROJECT_INC_DIR) -I\/usr\/include\/mysql\/include\/$/;"	m
CFLAGS	common/Makefile	/^CFLAGS         := -g -I$(PROJECT_INC_DIR)$/;"	m
CFLAGS	protol/Makefile	/^CFLAGS         := -g -I$(PROJECT_INC_DIR)$/;"	m
CLIENT_PARA_NULL	common/nullCmd.h	/^const BYTE CLIENT_PARA_NULL = 2;$/;"	v
CLIETN_PARA_NULL	orgainCode/nullCmd.h	/^const BYTE CLIETN_PARA_NULL = 1;$/;"	v
CMD_NULL	common/nullCmd.h	/^const BYTE CMD_NULL = 0;$/;"	v
CMD_NULL	orgainCode/nullCmd.h	/^const BYTE CMD_NULL = 0;$/;"	v
CS_CLOSE	base/baseTcpClientTask.h	/^			CS_CLOSE = 0,$/;"	e	enum:TcpClientTaskBase::ConnectState
CS_OKAY	base/baseTcpClientTask.h	/^			CS_OKAY = 2,$/;"	e	enum:TcpClientTaskBase::ConnectState
CS_RECYCLE	base/baseTcpClientTask.h	/^			CS_RECYCLE = 3,$/;"	e	enum:TcpClientTaskBase::ConnectState
CS_SYNC	base/baseTcpClientTask.h	/^			CS_SYNC = 1,$/;"	e	enum:TcpClientTaskBase::ConnectState
CXX	RecordServer/Makefile	/^CXX           = g++$/;"	m
CXX	ScenesServer/Makefile	/^CXX           = g++$/;"	m
CXX	SessionServer/Makefile	/^CXX           = g++$/;"	m
CXX	SuperServer/Makefile	/^CXX           = g++$/;"	m
CXX	base/Makefile	/^CXX           = g++$/;"	m
CXX	common/Makefile	/^CXX           = g++$/;"	m
CXX	protol/Makefile	/^CXX           = g++$/;"	m
CheckConditonReturn	base/baseFunc.h	46;"	d
CheckConditonVoid	base/baseFunc.h	38;"	d
CheckConnectThread	base/baseCheckConnectThread.h	/^		CheckConnectThread():Thread( "连接检查线程" )$/;"	f	class:CheckConnectThread
CheckConnectThread	base/baseCheckConnectThread.h	/^class CheckConnectThread : public Thread,public TaskQueue<TcpClientTaskBase>$/;"	c
CheckConnectThread	orgainCode/baseCheckConnectThread.h	/^		CheckConnectThread():Thread( "连接检查线程" )$/;"	f	class:CheckConnectThread
CheckConnectThread	orgainCode/baseCheckConnectThread.h	/^class CheckConnectThread : public Thread,public TaskQueue<TcpClientTaskBase>$/;"	c
CheckWaitThread	base/baseCheckWaitThread.cpp	/^CheckWaitThread::CheckWaitThread():Thread( "验证线程" )$/;"	f	class:CheckWaitThread
CheckWaitThread	base/baseCheckWaitThread.h	/^class CheckWaitThread : public Thread,public TaskQueue<TcpClientTaskBase>$/;"	c
CheckWaitThread	orgainCode/baseCheckWaitThread.cpp	/^CheckWaitThread::CheckWaitThread():Thread( "验证线程" )$/;"	f	class:CheckWaitThread
CheckWaitThread	orgainCode/baseCheckWaitThread.h	/^class CheckWaitThread : public Thread,public TaskQueue<TcpClientTaskBase>$/;"	c
ClientNullCmd	common/nullCmd.h	/^	ClientNullCmd()$/;"	f	struct:ClientNullCmd
ClientNullCmd	common/nullCmd.h	/^struct ClientNullCmd : public NullCmd$/;"	s
ClientNullCmd	orgainCode/nullCmd.h	/^	ClientNullCmd()$/;"	f	struct:ClientNullCmd
ClientNullCmd	orgainCode/nullCmd.h	/^struct ClientNullCmd : public NullCmd$/;"	s
Clocker	base/baseTime.h	/^		explicit Clocker(const SQWORD how_long,const SQWORD interval):_long(how_long),_interval(interval)$/;"	f	class:Clocker
Clocker	base/baseTime.h	/^		explicit Clocker(const SQWORD how_long,const SQWORD interval,Time &ctv):_long(how_long),_interval(interval),_clock(ctv)$/;"	f	class:Clocker
Clocker	base/baseTime.h	/^class Clocker$/;"	c
Clocker	orgainCode/baseTime.h	/^		explicit Clocker(const SQWORD how_long,const SQWORD interval):_long(how_long),_interval(interval)$/;"	f	class:Clocker
Clocker	orgainCode/baseTime.h	/^		explicit Clocker(const SQWORD how_long,const SQWORD interval,Time &ctv):_long(how_long),_interval(interval),_clock(ctv)$/;"	f	class:Clocker
Clocker	orgainCode/baseTime.h	/^class Clocker$/;"	c
CmdBuffer_wrapper	base/baseMsgContainer.h	/^		CmdBuffer_wrapper():cmd_size(sizeof(type)),max_size(size)$/;"	f	class:CmdBuffer_wrapper
CmdBuffer_wrapper	base/baseMsgContainer.h	/^class CmdBuffer_wrapper$/;"	c
CmdPair	base/baseMsgContainer.h	/^typedef std::pair<DWORD,BYTE*> CmdPair;$/;"	t
CmdQueue	base/baseMsgContainer.h	/^		typedef std::pair<volatile bool,CmdPair> CmdQueue;$/;"	t	class:MsgQueue
Condition	base/baseLock.h	/^		Condition()$/;"	f	class:Condition
Condition	base/baseLock.h	/^class Condition : private Noncopyable$/;"	c
ConnState	orgainCode/baseTcpClientTask.h	/^		enum ConnState$/;"	g	class:TcpClientTaskBase
ConnectState	base/baseTcpClientTask.h	/^		enum ConnectState$/;"	g	class:TcpClientTaskBase
ConstValueType	base/bitSet.h	/^		typedef const unsigned char ConstValueType;$/;"	t	class:BitSet
DELETE	base/baseFunc.h	6;"	d
DELETE_VEC	base/baseFunc.h	15;"	d
DEL_FILE	RecordServer/Makefile	/^DEL_FILE      = -rm -rf$/;"	m
DEL_FILE	ScenesServer/Makefile	/^DEL_FILE      = -rm -rf$/;"	m
DEL_FILE	SessionServer/Makefile	/^DEL_FILE      = -rm -rf$/;"	m
DEL_FILE	SuperServer/Makefile	/^DEL_FILE      = -rm -rf$/;"	m
DEL_FILE	base/Makefile	/^DEL_FILE      = -rm -rf$/;"	m
DEL_FILE	common/Makefile	/^DEL_FILE      = -rm -rf$/;"	m
DEL_FILE	protol/Makefile	/^DEL_FILE      = -rm -rf$/;"	m
DWORD	common/baseDef.h	/^typedef unsigned int DWORD;$/;"	t
DataSendCmd	common/nullCmd.h	/^	DataSendCmd()$/;"	f	struct:DataSendCmd
DataSendCmd	common/nullCmd.h	/^struct DataSendCmd : public NullCmd$/;"	s
Done	base/autoLifeHook.h	/^		struct Done$/;"	s	class:AutoLifeHook
EXEC	Makefile	/^EXEC = object$/;"	m
Entry	base/baseEntry.cpp	/^Entry::Entry():id(0),tempid(0)$/;"	f	class:Entry
Entry	base/baseEntry.cpp	/^Entry::Entry(const DWORD _id):id(_id),tempid(0)$/;"	f	class:Entry
Entry	base/baseEntry.cpp	/^Entry::Entry(const DWORD _id,const char *_name):id(_id),tempid(0)$/;"	f	class:Entry
Entry	base/baseEntry.h	/^class Entry : private Noncopyable$/;"	c
EntryCallBack	base/baseEntry.h	/^struct EntryCallBack$/;"	s
EntryID	base/baseEntry.h	/^class EntryID : public LimitHash<DWORD,Entry*>$/;"	c
EntryManager	base/baseEntry.h	/^class EntryManager : protected e1,protected e2,protected e3$/;"	c
EntryManagerList	base/baseEntry.h	/^		typedef std::vector<Entry*> EntryManagerList;		 typedef EntryManagerList::iterator EntryManagerList_iter;$/;"	t	class:EntryManager
EntryManagerList_iter	base/baseEntry.h	/^		typedef std::vector<Entry*> EntryManagerList;		 typedef EntryManagerList::iterator EntryManagerList_iter;$/;"	t	class:EntryManager
EntryName	base/baseEntry.h	/^class EntryName:public LimitHash<const char*,Entry *>{$/;"	c
EntryNone	base/baseEntry.h	/^class EntryNone$/;"	c
EntryTempID	base/baseEntry.h	/^		EntryTempID() {}$/;"	f	class:EntryTempID
EntryTempID	base/baseEntry.h	/^class EntryTempID:public LimitHash<DWORD,Entry*>$/;"	c
EpollfdContainer	base/baseCheckConnectThread.h	/^		typedef std::vector<epoll_event> EpollfdContainer;$/;"	t	class:CheckConnectThread
EpollfdContainer	base/baseCheckWaitThread.h	/^		typedef std::vector<epoll_event> EpollfdContainer;$/;"	t	class:CheckWaitThread
EpollfdContainer	base/baseOkayThread.h	/^		typedef std::vector<epoll_event> EpollfdContainer;$/;"	t	class:OkayThread
EpollfdContainer	base/baseTcpClientThread.h	/^		typedef std::vector<epoll_event> EpollfdContainer;$/;"	t	class:TcpClientTaskThread
EpollfdContainer	base/baseVerifyThread.h	/^		typedef std::vector<struct epoll_event> EpollfdContainer;$/;"	t	class:VerifyThread
FOREVER	base/baseTime.h	24;"	d
FOREVER	orgainCode/baseTime.h	22;"	d
FORWARD_SERVERCMD	protol/protolCmd.h	/^const BYTE FORWARD_SERVERCMD   = 254;$/;"	v
Filed	base/baseSqlFiled.h	/^		Filed()$/;"	f	struct:Filed
Filed	base/baseSqlFiled.h	/^struct Filed : public Entry$/;"	s
GATEWAYSERVER	protol/protolCmd.h	/^	GATEWAYSERVER  = 6,       \/\/网关服务器$/;"	e	enum:ServerType
GLOBAL_H	base/global.h	2;"	d
GLOBAL_H	orgainCode/global.h	2;"	d
GameType	base/baseSubService.h	/^enum GameType$/;"	g
GameType_Titan_Normal	base/baseSubService.h	/^	GameType_Titan_Normal     = 4,  \/\/巨人$/;"	e	enum:GameType
GameType_Zhengtu_Normal	base/baseSubService.h	/^	GameType_Zhengtu_Normal   = 1,  \/\/征途$/;"	e	enum:GameType
GameType_Zhengtu_Sichuan	base/baseSubService.h	/^	GameType_Zhengtu_Sichuan  = 2,  \/\/征途四川专区$/;"	e	enum:GameType
GameZone	base/baseSubService.h	/^	GameZone( const GameZone &gameZone )$/;"	f	struct:GameZone
GameZone	base/baseSubService.h	/^	GameZone()$/;"	f	struct:GameZone
GameZone	base/baseSubService.h	/^struct GameZone$/;"	s
Global	base/global.cpp	/^namespace Global$/;"	n	file:
Global	base/global.h	/^namespace Global$/;"	n
Global	orgainCode/global.cpp	/^namespace Global$/;"	n	file:
Global	orgainCode/global.h	/^namespace Global$/;"	n
HALF_DAY	base/baseTime.h	22;"	d
HALF_DAY	orgainCode/baseTime.h	20;"	d
HALF_HOUR	base/baseTime.h	20;"	d
HALF_HOUR	orgainCode/baseTime.h	18;"	d
HALF_MIN	base/baseTime.h	18;"	d
HALF_MIN	orgainCode/baseTime.h	16;"	d
HALF_SEC	base/baseTime.h	16;"	d
HALF_SEC	orgainCode/baseTime.h	14;"	d
HandleState	base/baseSqlHandle.h	/^enum HandleState$/;"	g
HandleState_Invalid	base/baseSqlHandle.h	/^	HandleState_Invalid = 1,  \/\/无效$/;"	e	enum:HandleState
HandleState_Used	base/baseSqlHandle.h	/^	HandleState_Used    = 3   \/\/使用$/;"	e	enum:HandleState
HandleState_Valid	base/baseSqlHandle.h	/^	HandleState_Valid   = 2,  \/\/有效$/;"	e	enum:HandleState
HashMap	base/baseEntry.h	/^		typedef __gnu_cxx::hash_map<keyT,valueT,__gnu_cxx::hash<keyT>,key_equal<keyT> >HashMap;$/;"	t	class:LimitHash
LDFLAG	RecordServer/Makefile	/^LDFLAG         := -L$(PROJECT_LIB_DIR) -lbase -lcommon -lprotol -L\/usr\/lib\/mysql\/ -lpthread -lrt -lmysqlclient$/;"	m
LDFLAG	ScenesServer/Makefile	/^LDFLAG         := -L$(PROJECT_LIB_DIR) -lbase -lcommon -lprotol -L\/usr\/lib\/mysql\/ -lpthread -lrt -lmysqlclient$/;"	m
LDFLAG	SessionServer/Makefile	/^LDFLAG         := -L$(PROJECT_LIB_DIR) -lbase -lcommon -lprotol -L\/usr\/lib\/mysql\/ -lpthread -lrt -lmysqlclient$/;"	m
LDFLAG	SuperServer/Makefile	/^LDFLAG         := -L$(PROJECT_LIB_DIR) -lbase -L\/usr\/lib\/mysql\/ -lpthread -lrt -lmysqlclient$/;"	m
LDFLAG	base/Makefile	/^LDFLAG         := -L$(PROJECT_LIB_DIR) -lprotol$/;"	m
LDFLAG	common/Makefile	/^LDFLAG         := -L$(PROJECT_LIB_DIR) $/;"	m
LDFLAG	protol/Makefile	/^LDFLAG         := -L$(PROJECT_LIB_DIR)$/;"	m
LEVEL_ALL	base/baseLog.h	/^			LEVEL_ALL = 0$/;"	e	enum:Logger::__anon8
LEVEL_DEBUG	base/baseLog.h	/^			LEVEL_DEBUG = 1,$/;"	e	enum:Logger::__anon8
LEVEL_ERROR	base/baseLog.h	/^			LEVEL_ERROR = 4,$/;"	e	enum:Logger::__anon8
LEVEL_FATAL	base/baseLog.h	/^			LEVEL_FATAL = 5,$/;"	e	enum:Logger::__anon8
LEVEL_INFO	base/baseLog.h	/^			LEVEL_INFO  = 2,$/;"	e	enum:Logger::__anon8
LEVEL_OFF	base/baseLog.h	/^			LEVEL_OFF = 6,$/;"	e	enum:Logger::__anon8
LEVEL_WARN	base/baseLog.h	/^			LEVEL_WARN  = 3,$/;"	e	enum:Logger::__anon8
LINK	RecordServer/Makefile	/^LINK          = g++$/;"	m
LINK	ScenesServer/Makefile	/^LINK          = g++$/;"	m
LINK	SessionServer/Makefile	/^LINK          = g++$/;"	m
LINK	SuperServer/Makefile	/^LINK          = g++$/;"	m
LINK	base/Makefile	/^LINK          = g++$/;"	m
LINK	common/Makefile	/^LINK          = g++$/;"	m
LINK	protol/Makefile	/^LINK          = g++$/;"	m
LOGINSERVER	protol/protolCmd.h	/^	LOGINSERVER    = 4,       \/\/登录服务器$/;"	e	enum:ServerType
LOGIN_START_SERVERCMD_PARA	protol/protolCmd.h	/^const BYTE LOGIN_START_SERVERCMD_PARA = 1;$/;"	v
LimitHash	base/baseEntry.h	/^		LimitHash()$/;"	f	class:LimitHash
LimitHash	base/baseEntry.h	/^ class LimitHash : private Noncopyable$/;"	c
ListeningRecv	orgainCode/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::ListeningRecv(bool needRecv)$/;"	f	class:TcpClientTaskBase
ListeningSend	orgainCode/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::ListeningSend()$/;"	f	class:TcpClientTaskBase
LogCheckCondition	base/baseFunc.h	85;"	d
LogCheckConditionOnly	base/baseFunc.h	54;"	d
LogErrorCheckCondition	base/baseFunc.h	96;"	d
LogErrorCheckConditionOnly	base/baseFunc.h	75;"	d
LogInfoCheckConditionOnly	base/baseFunc.h	64;"	d
LogLevel	base/baseLog.h	/^		}LogLevel;$/;"	t	class:Logger	typeref:enum:Logger::__anon8
Logger	base/baseLog.cpp	/^Logger::Logger(char *name)$/;"	f	class:Logger
Logger	base/baseLog.h	/^class Logger$/;"	c
LoginStartServerCmd	protol/protolCmd.h	/^	LoginStartServerCmd()$/;"	f	struct:LoginStartServerCmd
LoginStartServerCmd	protol/protolCmd.h	/^struct LoginStartServerCmd : public StartServerCmd$/;"	s
MAX_DBSIZE	common/baseDef.h	7;"	d
MAX_HOSTSIZE	common/baseDef.h	4;"	d
MAX_IP_LENGTH	common/baseDef.h	32;"	d
MAX_NAMESIZE	common/baseDef.h	31;"	d
MAX_NAME_SIZE	common/baseDef.h	8;"	d
MAX_PASSWORD	common/baseDef.h	6;"	d
MAX_USERSIZE	common/baseDef.h	5;"	d
MessageQueue	base/baseMsgContainer.h	/^class MessageQueue : public RWLocker<lock>,public Processor$/;"	c
MsgQueue	base/baseMsgContainer.h	/^		MsgQueue()$/;"	f	class:MsgQueue
MsgQueue	base/baseMsgContainer.h	/^class MsgQueue$/;"	c
Mutex	base/baseLock.h	/^		Mutex(MutexType _t = fast)$/;"	f	class:Mutex
Mutex	base/baseLock.h	/^class Mutex : private Noncopyable$/;"	c
MutexType	base/baseLock.h	/^		enum MutexType$/;"	g	class:Mutex
MysqlHandle	base/baseSqlHandle.cpp	/^MysqlHandle::MysqlHandle( const MysqlUrl *url,MysqlPool *pool,const DWORD hashcode ) : m_url(url),m_state(HandleState_Invalid),m_mysql(NULL),m_timeoutTime(1000L),m_pool(pool),m_hashCode(hashcode)$/;"	f	class:MysqlHandle
MysqlHandle	base/baseSqlHandle.h	/^class MysqlHandle : public Entry$/;"	c
MysqlHandleManager	base/baseSqlHandle.h	/^		MysqlHandleManager()$/;"	f	class:MysqlHandleManager
MysqlHandleManager	base/baseSqlHandle.h	/^class MysqlHandleManager : public EntryManager<EntryID,EntryNone<2>,EntryNone<3>,true>\/*,public Singletonbase<MysqlHandleManager>*\/$/;"	c
MysqlPool	base/baseSqlPool.cpp	/^MysqlPool::MysqlPool(int max_hash,int max_handle)$/;"	f	class:MysqlPool
MysqlPool	base/baseSqlPool.h	/^class MysqlPool : private Noncopyable$/;"	c
MysqlUrl	base/baseSqlUrl.h	/^	MysqlUrl():hashcode(0),url(),supportTransactions(false)$/;"	f	struct:MysqlUrl
MysqlUrl	base/baseSqlUrl.h	/^	MysqlUrl(const DWORD hashcode,const std::string &url,const bool supportTransactions = false) : hashcode(hashcode),url(url),supportTransactions(supportTransactions)$/;"	f	struct:MysqlUrl
MysqlUrl	base/baseSqlUrl.h	/^struct MysqlUrl : public Entry$/;"	s
MysqlUrlManager	base/baseSqlUrl.h	/^		MysqlUrlManager()$/;"	f	class:MysqlUrlManager
MysqlUrlManager	base/baseSqlUrl.h	/^class MysqlUrlManager : public EntryManager<EntryID,EntryNone<2>,EntryNone<3> >$/;"	c
NOTIFY_ME_SERVERCMD_PARA	protol/protolCmd.h	/^const BYTE NOTIFY_ME_SERVERCMD_PARA = 5;$/;"	v
NOTIFY_OTHER_SERVERCMD_PARA	protol/protolCmd.h	/^const BYTE NOTIFY_OTHER_SERVERCMD_PARA = 4;$/;"	v
NetService	base/baseNetService.cpp	/^NetService::NetService( const std::string &name ):Service( name )$/;"	f	class:NetService
NetService	base/baseNetService.h	/^class NetService : public Service$/;"	c
NetType	base/baseSubService.h	/^enum NetType$/;"	g
NetType_far	base/baseSubService.h	/^	NetType_far   = 1,      \/\/远程路由$/;"	e	enum:NetType
NetType_near	base/baseSubService.h	/^	NetType_near  = 0,      \/\/近程路由$/;"	e	enum:NetType
Noncopyable	base/baseClass.h	/^		Noncopyable(){};$/;"	f	class:Noncopyable
Noncopyable	base/baseClass.h	/^class Noncopyable$/;"	c
NotifyMeServer	protol/protolCmd.h	/^	NotifyMeServer()$/;"	f	struct:NotifyMeServer
NotifyMeServer	protol/protolCmd.h	/^struct NotifyMeServer : public StartServerCmd$/;"	s
NotifyOtherServer	protol/protolCmd.h	/^	NotifyOtherServer()$/;"	f	struct:NotifyOtherServer
NotifyOtherServer	protol/protolCmd.h	/^struct NotifyOtherServer : public StartServerCmd$/;"	s
NullCmd	common/nullCmd.h	/^	NullCmd(const BYTE cmd = CMD_NULL,const BYTE para = PARA_NULL):byCmd(cmd),byParam(para)$/;"	f	struct:NullCmd
NullCmd	common/nullCmd.h	/^struct NullCmd$/;"	s
NullCmd	orgainCode/nullCmd.h	/^	NullCmd(const BYTE cmd = CMD_NULL,const BYTE para = PARA_NULL):byCmd(cmd),byParam(para)$/;"	f	struct:NullCmd
NullCmd	orgainCode/nullCmd.h	/^struct NullCmd$/;"	s
NullUserCmd	common/nullCmd.h	/^struct NullUserCmd : public NullCmd$/;"	s
NullUserCmd	orgainCode/nullCmd.h	/^struct NullUserCmd : public NullCmd$/;"	s
OK_START_RETURN_SERVERCMD_PARA	protol/protolCmd.h	/^const BYTE OK_START_RETURN_SERVERCMD_PARA = 7;$/;"	v
OK_START_SERVERCMD_PARA	protol/protolCmd.h	/^const BYTE OK_START_SERVERCMD_PARA = 6;$/;"	v
ONE_DAY	base/baseTime.h	21;"	d
ONE_DAY	orgainCode/baseTime.h	19;"	d
ONE_HOUR	base/baseTime.h	19;"	d
ONE_HOUR	orgainCode/baseTime.h	17;"	d
ONE_MIN	base/baseTime.h	17;"	d
ONE_MIN	orgainCode/baseTime.h	15;"	d
ONE_SEC	base/baseTime.h	15;"	d
ONE_SEC	orgainCode/baseTime.h	13;"	d
ONE_WEEK	base/baseTime.h	23;"	d
ONE_WEEK	orgainCode/baseTime.h	21;"	d
OkStartReturnServerCmd	protol/protolCmd.h	/^	OkStartReturnServerCmd()$/;"	f	struct:OkStartReturnServerCmd
OkStartReturnServerCmd	protol/protolCmd.h	/^struct OkStartReturnServerCmd : public StartServerCmd$/;"	s
OkStartServerCmd	protol/protolCmd.h	/^	OkStartServerCmd()$/;"	f	struct:OkStartServerCmd
OkStartServerCmd	protol/protolCmd.h	/^struct OkStartServerCmd : public StartServerCmd$/;"	s
OkayThread	base/baseOkayThread.h	/^		OkayThread():Thread("工作线程")$/;"	f	class:OkayThread
OkayThread	base/baseOkayThread.h	/^class OkayThread : public Thread,public TaskQueue<TcpTask>$/;"	c
PACKET_ZIP_BUFFER	base/baseMsgContainer.h	/^const DWORD PACKET_ZIP_BUFFER = unzip_size(trunkSize - 1) + sizeof(DWORD) + 8;$/;"	v
PARA_NULL	common/nullCmd.h	/^const BYTE PARA_NULL = 0;$/;"	v
PARA_NULL	orgainCode/nullCmd.h	/^const BYTE PARA_NULL = 0;$/;"	v
PROJECT_BIN_DIR	base/Makefile	/^PROJECT_BIN_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_BIN_DIR	protol/Makefile	/^PROJECT_BIN_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_INC_DIR	RecordServer/Makefile	/^PROJECT_INC_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_INC_DIR	ScenesServer/Makefile	/^PROJECT_INC_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_INC_DIR	SessionServer/Makefile	/^PROJECT_INC_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_INC_DIR	SuperServer/Makefile	/^PROJECT_INC_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_INC_DIR	base/Makefile	/^PROJECT_INC_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_INC_DIR	common/Makefile	/^PROJECT_INC_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_INC_DIR	protol/Makefile	/^PROJECT_INC_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_LIB_DIR	RecordServer/Makefile	/^PROJECT_LIB_DIR = ..\/base -L..\/common -L..\/protol$/;"	m
PROJECT_LIB_DIR	ScenesServer/Makefile	/^PROJECT_LIB_DIR = ..\/base -L..\/common -L..\/protol$/;"	m
PROJECT_LIB_DIR	SessionServer/Makefile	/^PROJECT_LIB_DIR = ..\/base -L..\/common -L..\/protol$/;"	m
PROJECT_LIB_DIR	SuperServer/Makefile	/^PROJECT_LIB_DIR = ..\/base$/;"	m
PROJECT_LIB_DIR	base/Makefile	/^PROJECT_LIB_DIR = ..\/protol$/;"	m
PROJECT_LIB_DIR	common/Makefile	/^PROJECT_LIB_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_LIB_DIR	protol/Makefile	/^PROJECT_LIB_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_SRC_DIR	base/Makefile	/^PROJECT_SRC_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_SRC_DIR	protol/Makefile	/^PROJECT_SRC_DIR = $(PROJECT_TOP_DIR)$/;"	m
PROJECT_TOP_DIR	RecordServer/Makefile	/^PROJECT_TOP_DIR = $(shell cd ..\/; pwd)$/;"	m
PROJECT_TOP_DIR	ScenesServer/Makefile	/^PROJECT_TOP_DIR = $(shell cd ..\/; pwd)$/;"	m
PROJECT_TOP_DIR	SessionServer/Makefile	/^PROJECT_TOP_DIR = $(shell cd ..\/; pwd)$/;"	m
PROJECT_TOP_DIR	SuperServer/Makefile	/^PROJECT_TOP_DIR = $(shell cd ..\/; pwd)$/;"	m
PROJECT_TOP_DIR	base/Makefile	/^PROJECT_TOP_DIR = $(shell cd ..\/; pwd)$/;"	m
PROJECT_TOP_DIR	common/Makefile	/^PROJECT_TOP_DIR = $(shell cd ..\/; pwd)$/;"	m
PROJECT_TOP_DIR	protol/Makefile	/^PROJECT_TOP_DIR = $(shell cd ..\/; pwd)$/;"	m
Processor	base/baseMsgContainer.h	/^class Processor$/;"	c
Property	base/baseProperty.h	/^class Property$/;"	c
Property	orgainCode/baseProperty.h	/^class Property$/;"	c
PropertyMap	base/baseProperty.h	/^		typedef __gnu_cxx::hash_map<std::string,ValType,keyHash,keyEqual> PropertyMap;$/;"	t	class:Property
PropertyMap	orgainCode/baseProperty.h	/^		typedef __gnu_cxx::hash_map<std::string,VarType,keyHash,keyEqual> PropertyMap;$/;"	t	class:Property
PropertyMap_ConstIter	base/baseProperty.h	/^		typedef PropertyMap::const_iterator PropertyMap_ConstIter;$/;"	t	class:Property
PropertyMap_ConstIter	orgainCode/baseProperty.h	/^		typedef PropertyMap::const_iterator PropertyMap_ConstIter;$/;"	t	class:Property
PropertyMap_Iter	base/baseProperty.h	/^		typedef PropertyMap::iterator PropertyMap_Iter;$/;"	t	class:Property
PropertyMap_Iter	orgainCode/baseProperty.h	/^		typedef PropertyMap::iterator PropertyMap_Iter;$/;"	t	class:Property
QWORD	common/baseDef.h	/^typedef unsigned long QWORD;$/;"	t
QueueSize	base/baseMsgContainer.h	126;"	d
RECORDSERVER	protol/protolCmd.h	/^	RECORDSERVER   = 2,       \/\/档案服$/;"	e	enum:ServerType
RECORD_SERVER_H	RecordServer/RecordServer.h	2;"	d
RECORD_TIME_TICK_H	RecordServer/recordTimeTick.h	2;"	d
REQUEST_START_SERVERCMD_PARA	protol/protolCmd.h	/^const BYTE REQUEST_START_SERVERCMD_PARA = 2;$/;"	v
RESPONSE_START_SERVERCMD_PARA	protol/protolCmd.h	/^const BYTE RESPONSE_START_SERVERCMD_PARA = 3;$/;"	v
RM	Makefile	/^RM   = rm -rf$/;"	m
RS_First	SuperServer/superTask.h	/^			RS_First,$/;"	e	enum:SuperTask::Recycle_State
RS_First	orgainCode/superTask.h	/^			RS_First,$/;"	e	enum:SuperTask::Recycle_State
RS_Second	SuperServer/superTask.h	/^			RS_Second,$/;"	e	enum:SuperTask::Recycle_State
RS_Second	orgainCode/superTask.h	/^			RS_Second,$/;"	e	enum:SuperTask::Recycle_State
RS_Third	SuperServer/superTask.h	/^			RS_Third,$/;"	e	enum:SuperTask::Recycle_State
RS_Third	orgainCode/superTask.h	/^			RS_Third,$/;"	e	enum:SuperTask::Recycle_State
RTime	base/baseTime.h	/^		RTime(const RTime & _time)$/;"	f	class:RTime
RTime	base/baseTime.h	/^		RTime(const int delay)$/;"	f	class:RTime
RTime	base/baseTime.h	/^class RTime$/;"	c
RTime	orgainCode/baseTime.h	/^		RTime(const RTime & _time)$/;"	f	class:RTime
RTime	orgainCode/baseTime.h	/^		RTime(const int delay)$/;"	f	class:RTime
RTime	orgainCode/baseTime.h	/^class RTime$/;"	c
RWLock	base/baseLock.h	/^		RWLock()$/;"	f	class:RWLock
RWLock	base/baseLock.h	/^class RWLock : private Noncopyable$/;"	c
RWLock_scope_rdlock	base/baseLock.h	/^		RWLock_scope_rdlock(RWLock &_rdlock):rdlock(_rdlock)$/;"	f	class:RWLock_scope_rdlock
RWLock_scope_rdlock	base/baseLock.h	/^class RWLock_scope_rdlock : private Noncopyable$/;"	c
RWLock_scope_wrlock	base/baseLock.h	/^		RWLock_scope_wrlock(RWLock &_wrlock):wrlock(_wrlock)$/;"	f	class:RWLock_scope_wrlock
RWLock_scope_wrlock	base/baseLock.h	/^class RWLock_scope_wrlock : private Noncopyable$/;"	c
RWLocker	base/baseLock.h	/^class RWLocker$/;"	c
RWLocker	base/baseLock.h	/^class RWLocker<false>$/;"	c
Record	base/baseSqlRecord.h	/^		Record()$/;"	f	class:Record
Record	base/baseSqlRecord.h	/^class Record : public EntryManager<EntryName,EntryNone<2>,EntryNone<3>,true>$/;"	c
RecordServer	RecordServer/RecordServer.cpp	/^RecordServer::RecordServer() : SubNetService("RecordServer",RECORDSERVER),m_antiaddiceCheck(false)$/;"	f	class:RecordServer
RecordServer	RecordServer/RecordServer.h	/^class RecordServer : public SubNetService$/;"	c
RecordSet	base/baseSqlRecord.h	/^		RecordSet(int size):recordVec(size)$/;"	f	struct:RecordSet
RecordSet	base/baseSqlRecord.h	/^struct RecordSet$/;"	s
RecordTimeTick	RecordServer/recordTimeTick.cpp	/^RecordTimeTick::RecordTimeTick():Thread( "RecordTimeTick" ),m_oneSec( 1*1000L ),m_fiveSec( 5*1000L ),m_tenSec( 10*1000L ),m_oneMin( 60*1000L ),m_fiveMin( 5*60*1000L ),m_oneQuarter( 15*60*1000L ),m_oneClocker( 1*3600,1*3600 ),m_zeroClocker( 24*3600,24*3600 ),m_fourClocker( 4*3600,24*3600 )$/;"	f	class:RecordTimeTick
RecordTimeTick	RecordServer/recordTimeTick.h	/^class RecordTimeTick : public Thread,public SingletonBase<RecordTimeTick>$/;"	c
RecordVec	base/baseSqlRecord.h	/^		typedef std::vector<Record*> RecordVec;$/;"	t	struct:RecordSet
RecordVec_iter	base/baseSqlRecord.h	/^		typedef RecordVec::iterator RecordVec_iter;$/;"	t	struct:RecordSet
RecycleThread	base/baseRecycleThread.h	/^		RecycleThread():Thread("回收线程")$/;"	f	class:RecycleThread
RecycleThread	base/baseRecycleThread.h	/^class RecycleThread : public Thread,public TaskQueue<TcpTask>$/;"	c
Recycle_State	SuperServer/superTask.h	/^		enum Recycle_State$/;"	g	class:SuperTask
Recycle_State	orgainCode/superTask.h	/^		enum Recycle_State$/;"	g	class:SuperTask
RemoveEntry_Pred	base/baseEntry.h	/^struct RemoveEntry_Pred$/;"	s
RequestStartServerCmd	protol/protolCmd.h	/^	RequestStartServerCmd()$/;"	f	struct:RequestStartServerCmd
RequestStartServerCmd	protol/protolCmd.h	/^struct RequestStartServerCmd : public StartServerCmd$/;"	s
ResponseStartServerCmd	protol/protolCmd.h	/^	ResponseStartServerCmd()$/;"	f	struct:ResponseStartServerCmd
ResponseStartServerCmd	protol/protolCmd.h	/^struct ResponseStartServerCmd : public StartServerCmd$/;"	s
SCENESSERVER	protol/protolCmd.h	/^	SCENESSERVER   = 5,       \/\/场景服务器$/;"	e	enum:ServerType
SCENES_SERVER_H	ScenesServer/scenesServer.h	2;"	d
SCENES_SERVER_H	orgainCode/ScenesServer.h	2;"	d
SDWORD	common/baseDef.h	/^typedef signed int SDWORD;$/;"	t
SERVER_PARA_NULL	common/nullCmd.h	/^const BYTE SERVER_PARA_NULL = 1;$/;"	v
SERVER_PARA_NULL	orgainCode/nullCmd.h	/^const BYTE SERVER_PARA_NULL = 0;$/;"	v
SESSIONSERVER	protol/protolCmd.h	/^	SESSIONSERVER  = 3,       \/\/会话服务器$/;"	e	enum:ServerType
SESSION_SERVER_H	SessionServer/SessionServer.h	2;"	d
SESSION_TIME_TICK_H	SessionServer/sessionTimeTick.h	2;"	d
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SQWORD	common/baseDef.h	/^typedef signed long SQWORD;$/;"	t
START_SERVERCMD	protol/protolCmd.h	/^const BYTE START_SERVERCMD     = 255;$/;"	v
SUPERSERVER	protol/protolCmd.h	/^	SUPERSERVER    = 1,       \/\/管理服$/;"	e	enum:ServerType
SUPER_SERVER_H	SuperServer/SuperServer.h	2;"	d
SUPER_SERVER_H	orgainCode/SuperServer.h	2;"	d
SUPER_TASK_H	SuperServer/superTask.h	2;"	d
SUPER_TASK_H	orgainCode/superTask.h	2;"	d
SUPER_TASK_MANAGER_H	SuperServer/superTaskManager.h	2;"	d
SUPER_TASK_MANAGER_H	orgainCode/superTaskManager.h	2;"	d
SUPER_TIME_TICK_H	SuperServer/superTimeTick.h	2;"	d
SWORD	common/baseDef.h	/^typedef signed short SWORD;$/;"	t
SYSTEMTIME	base/baseTime.h	/^}SYSTEMTIME;$/;"	t	typeref:struct:__anon2
SYSTEMTIME	orgainCode/baseTime.h	/^}SYSTEMTIME;$/;"	t	typeref:struct:__anon1
SafePtr	base/autoLifeHook.h	/^typedef boost::weak_ptr<AutoLifeHook> SafePtr;$/;"	t
SceneTimeTick	ScenesServer/timeTick.cpp	/^SceneTimeTick::SceneTimeTick():Thread( "TimeTick" ),m_oneSec( 1 * 1000L ),m_fiveSec( 5 * 1000L ),m_tenSec( 10 * 1000L ),m_oneMin( 60 * 1000L ),m_fiveMin( 5 * 60 * 1000L ),m_oneQuarter( 15 * 60 * 1000L ),m_oneClocker( 1 * 3600,1 * 3600 ),m_zeroClocker( 24 * 3600,24 * 3600 ),m_fourClocker( 4 * 3600,24 * 3600 )$/;"	f	class:SceneTimeTick
SceneTimeTick	ScenesServer/timeTick.h	/^class SceneTimeTick : public Thread,public SingletonBase<SceneTimeTick>$/;"	c
ScenesServer	ScenesServer/scenesServer.cpp	/^ScenesServer::ScenesServer() : SubNetService( "Scene",SCENESSERVER ),m_antiaddiceCheck( false )$/;"	f	class:ScenesServer
ScenesServer	ScenesServer/scenesServer.h	/^class ScenesServer : public SubNetService$/;"	c
ScenesServer	orgainCode/ScenesServer.cpp	/^ScenesServer::ScenesServer() : SubNetService("Scene",SCENESSERVER),m_antiaddiceCheck(false)$/;"	f	class:ScenesServer
ScenesServer	orgainCode/ScenesServer.h	/^class ScenesServer : public SubNetService$/;"	c
ScenesServer	orgainCode/scenesServer.cpp	/^ScenesServer::ScenesServer() : SubNetService("Scene",SCENESSERVER),m_antiaddiceCheck(false)$/;"	f	class:ScenesServer
ServerEntry	protol/protolCmd.h	/^	ServerEntry()$/;"	f	struct:ServerEntry
ServerEntry	protol/protolCmd.h	/^	ServerEntry(const ServerEntry &serverEntry)$/;"	f	struct:ServerEntry
ServerEntry	protol/protolCmd.h	/^struct ServerEntry$/;"	s
ServerNullCmd	common/nullCmd.h	/^	ServerNullCmd()$/;"	f	struct:ServerNullCmd
ServerNullCmd	common/nullCmd.h	/^struct ServerNullCmd : public NullCmd$/;"	s
ServerNullCmd	orgainCode/nullCmd.h	/^	ServerNullCmd()$/;"	f	struct:ServerNullCmd
ServerNullCmd	orgainCode/nullCmd.h	/^struct ServerNullCmd : public NullCmd$/;"	s
ServerType	protol/protolCmd.h	/^enum ServerType$/;"	g
ServerTypeString	protol/protolCmd.h	/^static ServerTypeStruct ServerTypeString[] = $/;"	v
ServerTypeStruct	protol/protolCmd.h	/^	ServerTypeStruct( const ServerType _type = UNKNOWNSERVER,const char *_name = NULL )$/;"	f	struct:ServerTypeStruct
ServerTypeStruct	protol/protolCmd.h	/^struct ServerTypeStruct$/;"	s
Service	base/baseService.h	/^		Service(const std::string &name)$/;"	f	class:Service
Service	base/baseService.h	/^class Service : public Entry,public SingletonBase<Service,false>$/;"	c
SessionServer	SessionServer/SessionServer.cpp	/^SessionServer::SessionServer() : SubNetService("SessionServer",SESSIONSERVER),m_antiaddiceCheck(false)$/;"	f	class:SessionServer
SessionServer	SessionServer/SessionServer.h	/^class SessionServer : public SubNetService$/;"	c
SessionTimeTick	SessionServer/sessionTimeTick.cpp	/^SessionTimeTick::SessionTimeTick():Thread( "SessionTimeTick" ),m_oneSec( 1*1000L ),m_fiveSec( 5*1000L ),m_tenSec( 10*1000L ),m_oneMin( 60*1000L ),m_fiveMin( 5*60*1000L ),m_oneQuarter( 15*60*1000L ),m_oneClocker( 1*3600,1*3600 ),m_zeroClocker( 24*3600,24*3600 ),m_fourClocker( 4*3600,24*3600 )$/;"	f	class:SessionTimeTick
SessionTimeTick	SessionServer/sessionTimeTick.h	/^class SessionTimeTick : public Thread,public SingletonBase<SessionTimeTick>$/;"	c
SingletonBase	base/baseClass.h	/^		SingletonBase()$/;"	f	class:SingletonBase
SingletonBase	base/baseClass.h	/^class SingletonBase : private Noncopyable$/;"	c
SingletonBase	base/baseClass.h	/^class SingletonBase<T,false> : private Noncopyable$/;"	c
SingletonBase	base/baseClass.h	/^class SingletonBase<T,true> : private Noncopyable$/;"	c
Socket	base/baseSocket.cpp	/^Socket::Socket(const SWORD sock,const struct sockaddr_in *addr,const bool compress)$/;"	f	class:Socket
Socket	base/baseSocket.h	/^class Socket : private Noncopyable$/;"	c
Socket	orgainCode/baseSocket.cpp	/^Socket::Socket(const SWORD sock,const struct sockaddr_in *addr,const bool compress)$/;"	f	class:Socket
SortFunc	base/baseEntry.h	/^		typedef bool (*SortFunc) (Entry *e1,Entry *e2);$/;"	t	class:EntryManager
StackCmdQueue	base/baseMsgContainer.h	/^typedef ByteBuffer<BYTE [PACKET_ZIP_BUFFER]> StackCmdQueue;$/;"	t
StartServerCmd	protol/protolCmd.h	/^	StartServerCmd()$/;"	f	struct:StartServerCmd
StartServerCmd	protol/protolCmd.h	/^struct StartServerCmd : public NullCmd$/;"	s
SubNetService	base/baseSubService.cpp	/^SubNetService::SubNetService( const std::string &name,const DWORD type ):NetService( name ),m_monitorTimer( 10*1000L ),m_generation( 0 )$/;"	f	class:SubNetService
SubNetService	base/baseSubService.h	/^class SubNetService : public NetService$/;"	c
SuperClient	base/baseSuperClient.cpp	/^SuperClient::SuperClient():TcpClientBufferQueue("服务器管理器客户端"),m_verify(false)$/;"	f	class:SuperClient
SuperClient	base/baseSuperClient.h	/^class SuperClient : public TcpClientBufferQueue$/;"	c
SuperClient	orgainCode/baseSuperClient.cpp	/^SuperClient::SuperClient():TcpClientBufferQueue("服务器管理器客户端"),verify(false)$/;"	f	class:SuperClient
SuperClient	orgainCode/baseSuperClient.h	/^class SuperClient : public TcpClientBufferQueue$/;"	c
SuperServer	SuperServer/SuperServer.cpp	/^SuperServer::SuperServer() : NetService( "服务器管理器" )$/;"	f	class:SuperServer
SuperServer	SuperServer/SuperServer.h	/^class SuperServer : public NetService$/;"	c
SuperServer	orgainCode/SuperServer.cpp	/^SuperServer::SuperServer() : NetService( "服务器管理器" )$/;"	f	class:SuperServer
SuperServer	orgainCode/SuperServer.h	/^class SuperServer : public NetService$/;"	c
SuperTask	SuperServer/superTask.cpp	/^SuperTask::SuperTask(const SDWORD sock,const struct sockaddr_in *addr) : TcpTaskQueue(sock,addr),m_sequenceTimer(2*1000L)$/;"	f	class:SuperTask
SuperTask	SuperServer/superTask.h	/^class SuperTask : public TcpTaskQueue$/;"	c
SuperTask	orgainCode/superTask.cpp	/^SuperTask::SuperTask(const SDWORD sock,const struct sockaddr_in *addr) : TcpTaskQueue(sock,addr),m_sequenceTimer(2*1000L)$/;"	f	class:SuperTask
SuperTask	orgainCode/superTask.h	/^class SuperTask : public TcpTaskQueue$/;"	c
SuperTaskManager	SuperServer/superTaskManager.h	/^		SuperTaskManager() {}$/;"	f	class:SuperTaskManager
SuperTaskManager	SuperServer/superTaskManager.h	/^class SuperTaskManager : public TaskQueueManager<SuperTask>,public SingletonBase<SuperTaskManager>$/;"	c
SuperTaskManager	orgainCode/superTaskManager.h	/^		SuperTaskManager() {};$/;"	f	class:SuperTaskManager
SuperTaskManager	orgainCode/superTaskManager.h	/^class SuperTaskManager : public TaskQueueManager,public SingletonBase<SuperTaskManager>$/;"	c
SuperTimeTick	SuperServer/superTimeTick.cpp	/^SuperTimeTick::SuperTimeTick():Thread( "SuperTimeTick" ),m_oneSec( 1*1000L ),m_fiveSec( 5*1000L ),m_tenSec( 10*1000L ),m_oneMin( 60*1000L ),m_fiveMin( 5*60*1000L ),m_oneQuarter( 15*60*1000L ),m_oneClocker( 1*3600,1*3600 ),m_zeroClocker( 24*3600,24*3600 ),m_fourClocker( 4*3600,24*3600 )$/;"	f	class:SuperTimeTick
SuperTimeTick	SuperServer/superTimeTick.h	/^class SuperTimeTick : public Thread,public SingletonBase<SuperTimeTick>$/;"	c
SuperTimeTick	orgainCode/superTimeTick.cpp	/^SuperTimeTick::SuperTimeTick():Thread( "SuperTimeTick" ),m_oneSec( 1*1000L ),m_fiveSec( 5*1000L ),m_tenSec( 10*1000L ),m_oneMin( 60*1000L ),m_fiveMin( 5*60*1000L ),m_oneQuarter( 15*60*1000L ),m_oneClocker( 1*3600,1*3600 ),m_zeroClocker( 24*3600,24*3600 ),m_fourClocker( 4*3600,24*3600 )$/;"	f	class:SuperTimeTick
SyncThread	base/baseSyncThread.h	/^		SyncThread() : Thread("同步线程")$/;"	f	class:SyncThread
SyncThread	base/baseSyncThread.h	/^class SyncThread : public Thread,public TaskQueue<TcpTask>$/;"	c
TEST_AUTO_PTR_H	base/testAutoPtr.h	2;"	d
TIME_TICK_H	ScenesServer/timeTick.h	2;"	d
TIME_T_SYSTEMTIME	base/baseTime.cpp	/^bool TIME_T_SYSTEMTIME( time_t ltime,SYSTEMTIME *pST )$/;"	f
TM_ACTIVE	base/baseTcpTask.h	/^			TM_ACTIVE,$/;"	e	enum:TcpTask::TerminateMethod
TM_NO	base/baseTcpClientTask.h	/^			TM_NO,$/;"	e	enum:TcpClientTaskBase::TerminateMethod
TM_NO	base/baseTcpTask.h	/^			TM_NO,$/;"	e	enum:TcpTask::TerminateMethod
TM_PASSIVE	base/baseTcpTask.h	/^			TM_PASSIVE,$/;"	e	enum:TcpTask::TerminateMethod
TM_SERVER_CLOSE	base/baseTcpClientTask.h	/^			TM_SERVER_CLOSE,$/;"	e	enum:TcpClientTaskBase::TerminateMethod
TM_SOCK_ERROR	base/baseTcpClientTask.h	/^			TM_SOCK_ERROR,$/;"	e	enum:TcpClientTaskBase::TerminateMethod
TM_SYSTEMTIME	base/baseTime.cpp	/^void TM_SYSTEMTIME( struct tm* pTM,SYSTEMTIME *pST )$/;"	f
TM_no	orgainCode/baseTcpClientTask.h	/^			TM_no,$/;"	e	enum:TcpClientTaskBase::TerminateMethod
TM_server_close	orgainCode/baseTcpClientTask.h	/^			TM_server_close$/;"	e	enum:TcpClientTaskBase::TerminateMethod
TM_sock_error	orgainCode/baseTcpClientTask.h	/^			TM_sock_error,$/;"	e	enum:TcpClientTaskBase::TerminateMethod
TTS_NOTUSE	base/baseTcpTask.h	/^			TTS_NOTUSE = 0,$/;"	e	enum:TcpTask::TcpTask_State
TTS_OKAY	base/baseTcpTask.h	/^			TTS_OKAY = 3,$/;"	e	enum:TcpTask::TcpTask_State
TTS_RECYCLE	base/baseTcpTask.h	/^			TTS_RECYCLE = 4,$/;"	e	enum:TcpTask::TcpTask_State
TTS_SYNC	base/baseTcpTask.h	/^			TTS_SYNC = 2,$/;"	e	enum:TcpTask::TcpTask_State
TTS_VERIFY	base/baseTcpTask.h	/^			TTS_VERIFY = 1,$/;"	e	enum:TcpTask::TcpTask_State
Table	base/baseSqlTable.h	/^		Table()$/;"	f	struct:Table
Table	base/baseSqlTable.h	/^struct Table : public Entry$/;"	s
TableManager	base/baseSqlTable.h	/^		TableManager()$/;"	f	class:TableManager
TableManager	base/baseSqlTable.h	/^class TableManager : public EntryManager<EntryName,EntryNone<2>,EntryNone<3>,true>$/;"	c
TaskManager	base/baseTaskManager.h	/^		TaskManager() {}$/;"	f	class:TaskManager
TaskManager	base/baseTaskManager.h	/^class TaskManager : public EntryManager<EntryID>$/;"	c
TaskManager	orgainCode/baseTaskManager.h	/^		TaskManager() {};$/;"	f	class:TaskManager
TaskManager	orgainCode/baseTaskManager.h	/^class TaskManager : public EntryManager<IndexID>$/;"	c
TaskQueue	base/baseTaskContainer.h	/^		TaskQueue():_size(0)$/;"	f	class:TaskQueue
TaskQueue	base/baseTaskContainer.h	/^class TaskQueue$/;"	c
TaskQueueManager	base/baseTaskQueueManager.h	/^		TaskQueueManager() {}$/;"	f	class:TaskQueueManager
TaskQueueManager	base/baseTaskQueueManager.h	/^class TaskQueueManager : public TaskManager<T>$/;"	c
TaskQueueManager	orgainCode/baseTaskQueueManager.h	/^		TaskQueueManager() {};$/;"	f	class:TaskQueueManager
TaskQueueManager	orgainCode/baseTaskQueueManager.h	/^class TaskQueueManager : public TaskManager<T>$/;"	c
TaskThread	base/baseTaskThread.cpp	/^TaskThread::TaskThread(const char *name,bool joinable):Thread(name,joinable)$/;"	f	class:TaskThread
TaskThread	base/baseTaskThread.h	/^class TaskThread : public Thread$/;"	c
TaskThreadManager	base/baseThreadManager.h	/^		TaskThreadManager()$/;"	f	class:TaskThreadManager
TaskThreadManager	base/baseThreadManager.h	/^class TaskThreadManager : public EntryManager<EntryID,EntryNone<2>,EntryNone<3>,true>$/;"	c
TaskThreadManager	orgainCode/baseThreadManager.h	/^		TaskThreadManager()$/;"	f	class:TaskThreadManager
TaskThreadManager	orgainCode/baseThreadManager.h	/^class TaskThreadManager : public EntryManager<EntryID,EntryNone<2>,EntryNone<3>,true>$/;"	c
TcpClientBase	base/baseTcpClient.cpp	/^TcpClientBase::TcpClientBase(const std::string &name,const std::string &ip,const WORD port,const WORD serverID,const bool compress):Thread(name.c_str()),m_port(port),m_serverID(serverID),m_pSocket(NULL),m_compress(compress)$/;"	f	class:TcpClientBase
TcpClientBase	base/baseTcpClient.h	/^class TcpClientBase : public Thread$/;"	c
TcpClientBuffer	base/baseTcpClientBuffer.h	/^		TcpClientBuffer(const std::string &name,const std::string &ip = "127.0.0.1",const unsigned short port = 80,const unsigned short serverID = 0,const bool compress = false,const QWORD usleepTime = 50000L)$/;"	f	class:TcpClientBuffer
TcpClientBuffer	base/baseTcpClientBuffer.h	/^class TcpClientBuffer : public TcpClientBase$/;"	c
TcpClientBufferQueue	base/baseTcpClientBuffer.h	/^		TcpClientBufferQueue(const std::string name,const std::string &ip = "127.0.0.1",const unsigned short port = 80,const unsigned short serverID = 0,const bool compress = false,const int usleepTime = 50000):TcpClientBuffer(name,ip,port,serverID,compress,usleepTime)$/;"	f	class:TcpClientBufferQueue
TcpClientBufferQueue	base/baseTcpClientBuffer.h	/^class TcpClientBufferQueue : public TcpClientBuffer,public MessageQueue<false>$/;"	c
TcpClientTaskBase	base/baseTcpClientTask.cpp	/^TcpClientTaskBase::TcpClientTaskBase(const std::string &ip,const DWORD port,const bool compress,const bool reConnect,const DWORD reConnectTimer) : m_pSocket(NULL),m_compress(compress),m_reConnect(reConnect),m_ip(ip),m_port(port),m_tickTimer(reConnectTimer,false,3600*1000L)$/;"	f	class:TcpClientTaskBase
TcpClientTaskBase	base/baseTcpClientTask.h	/^class TcpClientTaskBase : public Entry$/;"	c
TcpClientTaskBase	orgainCode/baseTcpClientTask.cpp	/^TcpClientTaskBase::TcpClientTaskBase(const std::string &ip,const DWORD port,const bool compress,const bool reConn,const DWORD reConnTimer) : pSocket(NULL),compress(compress),reConn(reConn),ip(ip),port(port),_tick_timer(reConnTimer,false,3600*1000L)$/;"	f	class:TcpClientTaskBase
TcpClientTaskBase	orgainCode/baseTcpClientTask.h	/^class TcpClientTaskBase : public Entry$/;"	c
TcpClientTaskBaseContainer	base/baseCheckConnectThread.h	/^		typedef std::list<TcpClientTaskBase*,__gnu_cxx::__pool_alloc<TcpClientTaskBase*> > TcpClientTaskBaseContainer;$/;"	t	class:CheckConnectThread
TcpClientTaskBaseContainer	base/baseCheckWaitThread.h	/^		typedef std::list<TcpClientTaskBase*,__gnu_cxx::__pool_alloc<TcpClientTaskBase*> > TcpClientTaskBaseContainer;$/;"	t	class:CheckWaitThread
TcpClientTaskBaseContainer	base/baseTcpClientThread.h	/^		typedef std::list<TcpClientTaskBase*,__gnu_cxx::__pool_alloc<TcpClientTaskBase*> > TcpClientTaskBaseContainer;$/;"	t	class:TcpClientTaskThread
TcpClientTaskBaseContainer	orgainCode/baseTcpClientThread.cpp	/^typedef std::list<TcpClientTaskBase*,__gnu_cxx::__pool_alloc<TcpClientTaskBase*> >TcpClientTaskBaseContainer;$/;"	t	file:
TcpClientTaskBaseQueue	base/baseCheckConnectThread.h	/^		typedef std::queue<TcpClientTaskBase*,std::deque<TcpClientTaskBase*,__gnu_cxx::__pool_alloc<TcpClientTaskBase*> > > TcpClientTaskBaseQueue;$/;"	t	class:CheckConnectThread
TcpClientTaskBaseQueue	base/baseCheckWaitThread.h	/^		typedef std::queue<TcpClientTaskBase*,std::deque<TcpClientTaskBase*,__gnu_cxx::__pool_alloc<TcpClientTaskBase*> > > TcpClientTaskBaseQueue;$/;"	t	class:CheckWaitThread
TcpClientTaskBaseQueue	base/baseTcpClientThread.h	/^		typedef std::queue<TcpClientTaskBase*,std::deque<TcpClientTaskBase*,__gnu_cxx::__pool_alloc<TcpClientTaskBase*> > > TcpClientTaskBaseQueue;$/;"	t	class:TcpClientTaskThread
TcpClientTaskBase_IT	base/baseCheckConnectThread.h	/^		typedef TcpClientTaskBaseContainer::iterator TcpClientTaskBase_IT;$/;"	t	class:CheckConnectThread
TcpClientTaskBase_IT	base/baseCheckWaitThread.h	/^		typedef TcpClientTaskBaseContainer::iterator TcpClientTaskBase_IT;$/;"	t	class:CheckWaitThread
TcpClientTaskBase_IT	base/baseTcpClientThread.h	/^		typedef TcpClientTaskBaseContainer::iterator TcpClientTaskBase_IT;$/;"	t	class:TcpClientTaskThread
TcpClientTaskPool	base/baseTcpClientTaskPool.h	/^		explicit TcpClientTaskPool(const DWORD maxConCnt = 20,const QWORD us = 50000L) : m_maxConCnt(maxConCnt)$/;"	f	class:TcpClientTaskPool
TcpClientTaskPool	base/baseTcpClientTaskPool.h	/^class TcpClientTaskPool : private Noncopyable$/;"	c
TcpClientTaskThread	base/baseTcpClientThread.cpp	/^TcpClientTaskThread::TcpClientTaskThread() : Thread( "工作线程" )$/;"	f	class:TcpClientTaskThread
TcpClientTaskThread	base/baseTcpClientThread.h	/^class TcpClientTaskThread : public Thread, public TaskQueue<TcpClientTaskBase>$/;"	c
TcpClientTaskThread	orgainCode/baseTcpClientThread.h	/^class TcpClientTaskThread : public Thread, public TaskQueue<TcpClientTaskBase>$/;"	c
TcpService	base/baseTcpService.cpp	/^TcpService::TcpService(const std::string &name) : m_sock(-1)$/;"	f	class:TcpService
TcpService	base/baseTcpService.h	/^class TcpService : private Noncopyable$/;"	c
TcpTask	base/baseTcpTask.cpp	/^TcpTask::TcpTask(const SWORD sock,const struct sockaddr_in *addr,const bool compress):m_taskType(0),m_buffered(false),m_mSocket(sock,addr,compress),m_state(TTS_NOTUSE),m_terminate(TM_NO),m_terminateWait(false),m_fdsradd(false),m_lifeTime(),m_uniqueVerified(false),m_checkSignal(true),m_tickTimer(3600*1000L),m_tick(false),m_checkTimeout(true)$/;"	f	class:TcpTask
TcpTask	base/baseTcpTask.h	/^class TcpTask : public Entry,public MessageQueue<false>$/;"	c
TcpTaskContainer	base/baseOkayThread.h	/^		typedef std::list<TcpTask*,__gnu_cxx::__pool_alloc<TcpTask*> > TcpTaskContainer;$/;"	t	class:OkayThread
TcpTaskContainer	base/baseRecycleThread.h	/^		typedef std::list<TcpTask*,__gnu_cxx::__pool_alloc<TcpTask*> > TcpTaskContainer;$/;"	t	class:RecycleThread
TcpTaskContainer	base/baseSyncThread.h	/^		typedef std::list<TcpTask*,__gnu_cxx::__pool_alloc<TcpTask*> > TcpTaskContainer;$/;"	t	class:SyncThread
TcpTaskContainer	base/baseVerifyThread.h	/^		typedef std::list<TcpTask*,__gnu_cxx::__pool_alloc<TcpTask*> > TcpTaskContainer;$/;"	t	class:VerifyThread
TcpTaskPool	base/baseTaskPool.h	/^		explicit TcpTaskPool(const DWORD maxConnect,const QWORD us = 50000) : m_maxConnect(maxConnect)$/;"	f	class:TcpTaskPool
TcpTaskPool	base/baseTaskPool.h	/^class TcpTaskPool : private Noncopyable$/;"	c
TcpTaskQueue	base/baseTcpTaskQueue.h	/^		TcpTaskQueue(const SDWORD sock,const struct sockaddr_in *addr = NULL,const bool compress = false,const bool checkSignal = true) : TcpTask(sock,addr,compress)$/;"	f	class:TcpTaskQueue
TcpTaskQueue	base/baseTcpTaskQueue.h	/^class TcpTaskQueue : public TcpTask$/;"	c
TcpTaskQueue	orgainCode/baseTcpTaskQueue.h	/^		TcpTaskQueue(const int sock,const struct sockaddr_in *addr = NULL,const bool compress = false,const bool checkSignal = true) : TcpTask(sock,addr,compress,checkSignal)$/;"	f	class:TcpTaskQueue
TcpTaskQueue	orgainCode/baseTcpTaskQueue.h	/^class TcpTaskQueue : public TcpTask$/;"	c
TcpTask_IT	base/baseOkayThread.h	/^		typedef TcpTaskContainer::iterator TcpTask_IT;$/;"	t	class:OkayThread
TcpTask_IT	base/baseRecycleThread.h	/^		typedef TcpTaskContainer::iterator TcpTask_IT;$/;"	t	class:RecycleThread
TcpTask_IT	base/baseSyncThread.h	/^		typedef TcpTaskContainer::iterator TcpTask_IT;$/;"	t	class:SyncThread
TcpTask_IT	base/baseVerifyThread.h	/^		typedef TcpTaskContainer::iterator TcpTask_IT;$/;"	t	class:VerifyThread
TcpTask_State	base/baseTcpTask.h	/^		enum TcpTask_State$/;"	g	class:TcpTask
Terminate	base/baseService.h	/^		void Terminate()$/;"	f	class:Service
Terminate	base/baseTcpTask.h	/^		virtual void Terminate(const TerminateMethod method = TM_PASSIVE)$/;"	f	class:TcpTask
Terminate	orgainCode/baseTcpClientTask.h	/^		void Terminate(const TerminateMethod method )$/;"	f	class:TcpClientTaskBase
TerminateError	base/baseTcpTask.h	/^		virtual bool TerminateError()$/;"	f	class:TcpTask
TerminateMethod	base/baseTcpClientTask.h	/^		enum TerminateMethod$/;"	g	class:TcpClientTaskBase
TerminateMethod	base/baseTcpTask.h	/^		enum TerminateMethod$/;"	g	class:TcpTask
TerminateMethod	orgainCode/baseTcpClientTask.h	/^		enum TerminateMethod$/;"	g	class:TcpClientTaskBase
TerminateWait	base/baseService.h	/^		virtual void TerminateWait()$/;"	f	class:Service
TestAutoPtr	base/testAutoPtr.h	/^		TestAutoPtr( const int a,const int b ) : m_a(a),m_b(b)$/;"	f	class:TestAutoPtr
TestAutoPtr	base/testAutoPtr.h	/^class TestAutoPtr : public AutoLifeHook$/;"	c
Thread	base/baseThread.cpp	/^Thread::Thread(const char* name,const bool joinable):m_run(true),m_joinable(joinable)$/;"	f	class:Thread
Thread	base/baseThread.h	/^class Thread : public Entry$/;"	c
ThreadManager	base/baseThread.h	/^		ThreadManager()$/;"	f	class:ThreadManager
ThreadManager	base/baseThread.h	/^class ThreadManager : public EntryManager<EntryID,EntryNone<2>,EntryNone<3>,true>,public SingletonBase<ThreadManager>$/;"	c
Time	base/baseTime.h	/^		Time()$/;"	f	class:Time
Time	base/baseTime.h	/^		Time(const Time &time)$/;"	f	class:Time
Time	base/baseTime.h	/^class Time$/;"	c
Time	orgainCode/baseTime.h	/^		Time()$/;"	f	class:Time
Time	orgainCode/baseTime.h	/^		Time(const Time &time)$/;"	f	class:Time
Time	orgainCode/baseTime.h	/^class Time$/;"	c
TimeTick	ScenesServer/scenesServer.h	/^		typedef SceneTimeTick TimeTick;$/;"	t	class:ScenesServer
TimeTick	orgainCode/ScenesServer.h	/^		typedef SceneTimeTick TimeTick;$/;"	t	class:ScenesServer
Timer	base/baseTime.h	/^		Timer() : m_milliSec(0),m_timer() {}$/;"	f	class:Timer
Timer	base/baseTime.h	/^		explicit Timer(const QWORD milSec,bool first,Time &ctv) : m_milliSec(milSec),m_timer(ctv)$/;"	f	class:Timer
Timer	base/baseTime.h	/^		explicit Timer(const QWORD milSec,bool first=false,const QWORD delay=0) : m_milliSec(milSec),m_timer()$/;"	f	class:Timer
Timer	base/baseTime.h	/^class Timer$/;"	c
Timer	orgainCode/baseTime.h	/^		Timer() : m_milliSec(0),m_timer() {}$/;"	f	class:Timer
Timer	orgainCode/baseTime.h	/^		explicit Timer(const QWORD milSec,bool first,Time &ctv) : m_milliSec(milSec),m_timer(ctv)$/;"	f	class:Timer
Timer	orgainCode/baseTime.h	/^		explicit Timer(const QWORD milSec,bool first=false,const QWORD delay=0) : m_milliSec(milSec),m_timer()$/;"	f	class:Timer
Timer	orgainCode/baseTime.h	/^class Timer$/;"	c
UNKNOWNSERVER	protol/protolCmd.h	/^	UNKNOWNSERVER  = 0,       \/\/未知服务器$/;"	e	enum:ServerType
VAR_NULL	base/global.cpp	/^	ValType VAR_NULL;$/;"	v
VAR_NULL	orgainCode/global.cpp	/^	ValType VAR_NULL;$/;"	v
ValType	base/baseSqlValType.h	/^		ValType():_data(1,'\\0') {}$/;"	f	class:ValType
ValType	base/baseSqlValType.h	/^		ValType(const ValType & value)$/;"	f	class:ValType
ValType	base/baseSqlValType.h	/^		explicit  ValType(const T& value)$/;"	f	class:ValType
ValType	base/baseSqlValType.h	/^class ValType$/;"	c
ValueType	base/bitSet.h	/^		typedef unsigned char ValueType;$/;"	t	class:BitSet
VerifyThread	base/baseVerifyThread.h	/^		VerifyThread():Thread("验证线程")$/;"	f	class:VerifyThread
VerifyThread	base/baseVerifyThread.h	/^class VerifyThread : public Thread,public TaskQueue<TcpTask>$/;"	c
WORD	common/baseDef.h	/^typedef unsigned short WORD;$/;"	t
WhereExec	base/baseSqlHandle.cpp	/^	WhereExec(Table *table,std::ostringstream &query_string):frist(true),table(table),query_string(query_string)$/;"	f	struct:WhereExec
WhereExec	base/baseSqlHandle.cpp	/^struct WhereExec : public EntryCallBack<Filed>$/;"	s	file:
ZIP_CMD_PARA_NULL	common/nullCmd.h	/^const BYTE ZIP_CMD_PARA_NULL = 3;$/;"	v
ZIP_CMD_PARA_NULL	orgainCode/nullCmd.h	/^const BYTE ZIP_CMD_PARA_NULL = 2;$/;"	v
ZipCmdPackNullCmd	common/nullCmd.h	/^	ZipCmdPackNullCmd()$/;"	f	struct:ZipCmdPackNullCmd
ZipCmdPackNullCmd	common/nullCmd.h	/^struct ZipCmdPackNullCmd : public NullCmd$/;"	s
ZipCmdPackNullCmd	orgainCode/nullCmd.h	/^	ZipCmdPackNullCmd()$/;"	f	struct:ZipCmdPackNullCmd
ZipCmdPackNullCmd	orgainCode/nullCmd.h	/^struct ZipCmdPackNullCmd : public NullCmd$/;"	s
ZoneInfo	base/baseSubService.h	/^	ZoneInfo()$/;"	f	struct:ZoneInfo
ZoneInfo	base/baseSubService.h	/^struct ZoneInfo$/;"	s
ZoneInfoIter	base/baseSubService.h	/^		typedef ZoneInfoMap::iterator ZoneInfoIter;$/;"	t	class:SubNetService
ZoneInfoMap	base/baseSubService.h	/^		typedef std::map<DWORD,ZoneInfo> ZoneInfoMap;$/;"	t	class:SubNetService
_CMD_NAMESPACE_BEGIN	common/baseDef.h	24;"	d
_CMD_NAMESPACE_BEGIN	common/baseDef.h	27;"	d
_CMD_NAMESPACE_END	common/baseDef.h	25;"	d
_CMD_NAMESPACE_END	common/baseDef.h	28;"	d
_CMD_SERVER_NAMESPACE_END	protol/protolCmd.h	97;"	d
_NULLCMD_H	common/nullCmd.h	2;"	d
_NULLCMD_H	orgainCode/nullCmd.h	2;"	d
_START_COMMAND_H	protol/protolCmd.h	2;"	d
_USE_CMD_NAME_SPACE	common/baseDef.h	20;"	d
_USE_CMD_SERVER_NAMESPACE	protol/protolCmd.h	96;"	d
_add	base/baseCheckConnectThread.cpp	/^void CheckConnectThread::_add( TcpClientTaskBase *task )$/;"	f	class:CheckConnectThread
_add	base/baseCheckWaitThread.cpp	/^void CheckWaitThread::_add( TcpClientTaskBase *task )$/;"	f	class:CheckWaitThread
_add	base/baseOkayThread.cpp	/^void OkayThread::_add(TcpTask *task)$/;"	f	class:OkayThread
_add	base/baseRecycleThread.cpp	/^void RecycleThread::_add(TcpTask *task)$/;"	f	class:RecycleThread
_add	base/baseSyncThread.cpp	/^void SyncThread::_add(TcpTask *task)$/;"	f	class:SyncThread
_add	base/baseTcpClientThread.cpp	/^void TcpClientTaskThread::_add( TcpClientTaskBase *task )$/;"	f	class:TcpClientTaskThread
_add	base/baseVerifyThread.cpp	/^void VerifyThread::_add(TcpTask *task)$/;"	f	class:VerifyThread
_add	orgainCode/baseCheckConnectThread.cpp	/^void CheckConnectThread::_add( TcpClientTaskBase *task )$/;"	f	class:CheckConnectThread
_add	orgainCode/baseCheckWaitThread.cpp	/^void CheckWaitThread::_add( TcpClientTaskBase *task )$/;"	f	class:CheckWaitThread
_add	orgainCode/baseOkayThread.cpp	/^void OkayThread::_add(TcpTask *task)$/;"	f	class:OkayThread
_clock	base/baseTime.h	/^		Time _clock;$/;"	m	class:Clocker
_clock	orgainCode/baseTime.h	/^		Time _clock;$/;"	m	class:Clocker
_data	base/baseSqlValType.h	/^		std::vector<BYTE> _data;$/;"	m	class:ValType
_interval	base/baseTime.h	/^		const QWORD _interval;$/;"	m	class:Clocker
_interval	orgainCode/baseTime.h	/^		const QWORD _interval;$/;"	m	class:Clocker
_list	base/baseEntry.h	/^		EntryManagerList _list;$/;"	m	class:EntryManager
_long	base/baseTime.h	/^		const QWORD _long;$/;"	m	class:Clocker
_long	orgainCode/baseTime.h	/^		const QWORD _long;$/;"	m	class:Clocker
_max_handle	base/baseSqlPool.h	/^		DWORD _max_handle;$/;"	m	class:MysqlPool
_max_hash	base/baseSqlPool.h	/^		DWORD _max_hash;$/;"	m	class:MysqlPool
_msecs	base/baseTime.h	/^		QWORD _msecs;  \/\/毫秒$/;"	m	class:RTime
_msecs	orgainCode/baseTime.h	/^		QWORD _msecs;  \/\/毫秒$/;"	m	class:RTime
_now	base/baseTime.h	/^		QWORD _now()$/;"	f	class:RTime
_now	orgainCode/baseTime.h	/^		QWORD _now()$/;"	f	class:RTime
_queue	base/baseTaskContainer.h	/^		std::queue<T*,std::deque<T*,__gnu_cxx::__pool_alloc<T*> > > _queue;$/;"	m	class:TaskQueue
_sequence_timer	orgainCode/superTask.h	/^		Timer _sequence_timer;$/;"	m	class:SuperTask
_size	base/baseTaskContainer.h	/^		DWORD _size;$/;"	m	class:TaskQueue
_temp_queue	base/baseTaskContainer.h	/^		std::queue<T*,std::deque<T*,__gnu_cxx::__pool_alloc<T*> > > _temp_queue;$/;"	m	class:TaskQueue
_tick_timer	orgainCode/baseTcpClientTask.h	/^		Timer _tick_timer;$/;"	m	class:TcpClientTaskBase
accept	base/baseTcpService.cpp	/^SDWORD TcpService::accept(struct sockaddr_in *addr)$/;"	f	class:TcpService
add	base/baseTaskContainer.h	/^		inline void add(T *task)$/;"	f	class:TaskQueue
addCheckWait	base/baseTcpClientTaskPool.cpp	/^void TcpClientTaskPool::addCheckWait( TcpClientTaskBase *task )$/;"	f	class:TcpClientTaskPool
addCheckWait	base/baseTcpClientTaskPool_1.cpp	/^void TcpClientTaskPool::addCheckWait( TcpClientTaskBase *task )$/;"	f	class:TcpClientTaskPool
addDelay	base/baseTime.h	/^		inline void addDelay(const QWORD delay)$/;"	f	class:Time
addDelay	base/baseTime.h	/^		inline void addDelay(const Time &cur)$/;"	f	class:Timer
addDelay	base/baseTime.h	/^		void addDelay(int delay)$/;"	f	class:RTime
addDelay	orgainCode/baseTime.h	/^		inline void addDelay(const QWORD delay)$/;"	f	class:Time
addDelay	orgainCode/baseTime.h	/^		inline void addDelay(const Time &cur)$/;"	f	class:Timer
addDelay	orgainCode/baseTime.h	/^		void addDelay(int delay)$/;"	f	class:RTime
addEntry	base/baseEntry.h	/^		bool addEntry(Entry *entry)$/;"	f	class:EntryManager
addEpoll	base/baseSocket.h	/^		inline void addEpoll(SWORD kdpfd,DWORD events,void *ptr)$/;"	f	class:Socket
addEpoll	base/baseTcpClientTask.h	/^		void addEpoll(const SDWORD kdpfd,const DWORD events,void *ptr)$/;"	f	class:TcpClientTaskBase
addEpoll	base/baseTcpTask.h	/^		void addEpoll(SWORD kdpfd,__uint32_t events,void *ptr)$/;"	f	class:TcpTask
addEpoll	orgainCode/baseTcpClientThread.cpp	/^	task->addEpoll( m_kdpfd,EPOLLIN | EPOLLERR | EPOLLPRI,(void*)task );$/;"	t	file:
addFiled	base/baseSqlRecord.cpp	/^bool Record::addFiled(Filed *entry)$/;"	f	class:Record
addMain	base/baseTcpClientTaskPool.cpp	/^bool TcpClientTaskPool::addMain( TcpClientTaskBase *task )$/;"	f	class:TcpClientTaskPool
addMain	base/baseTcpClientTaskPool_1.cpp	/^bool TcpClientTaskPool::addMain( TcpClientTaskBase *task )$/;"	f	class:TcpClientTaskPool
addMysqlHandle	base/baseSqlHandle.h	/^		bool addMysqlHandle(MysqlHandle *entry)$/;"	f	class:MysqlHandleManager
addMysqlUrl	base/baseSqlUrl.h	/^		bool addMysqlUrl(MysqlUrl *entry)$/;"	f	class:MysqlUrlManager
addNewFiled	base/baseSqlRecord.cpp	/^bool Record::addNewFiled(const char *filedName,int filedType,DWORD mask)$/;"	f	class:Record
addNewTable	base/baseSqlTable.cpp	/^bool TableManager::addNewTable(MYSQL *mysql_conn,const char *tableName)$/;"	f	class:TableManager
addOkay	base/baseTaskPool.cpp	/^bool TcpTaskPool::addOkay(TcpTask *task)$/;"	f	class:TcpTaskPool
addRecycle	base/baseTaskPool.cpp	/^void TcpTaskPool::addRecycle(TcpTask *task)$/;"	f	class:TcpTaskPool
addServerEntry	base/baseSubService.cpp	/^bool SubNetService::addServerEntry(const ServerEntry &entry)$/;"	f	class:SubNetService
addSync	base/baseTaskPool.cpp	/^bool TcpTaskPool::addSync(TcpTask *task)$/;"	f	class:TcpTaskPool
addTable	base/baseSqlTable.h	/^		bool addTable(Table *entry)$/;"	f	class:TableManager
addTask	base/baseTaskManager.h	/^		bool addTask(T *task)$/;"	f	class:TaskManager
addTask	orgainCode/baseTaskManager.h	/^		bool addTask(T *task)$/;"	f	class:TaskManager
addThread	base/baseThread.cpp	/^bool ThreadManager::addThread(Thread *entry)$/;"	f	class:ThreadManager
addThread	base/baseThreadManager.h	/^		bool addThread(Thread *entry)$/;"	f	class:TaskThreadManager
addThread	orgainCode/baseThreadManager.h	/^		bool addThread(Thread *entry)$/;"	f	class:TaskThreadManager
addToContainer	base/baseTcpClientTask.h	/^		virtual void addToContainer()$/;"	f	class:TcpClientTaskBase
addToContainer	base/baseTcpTask.h	/^		virtual void addToContainer()$/;"	f	class:TcpTask
addToContainer	orgainCode/baseTcpClientTask.h	/^		virtual void addToContainer()$/;"	f	class:TcpClientTaskBase
addVerify	base/baseTaskPool.cpp	/^bool TcpTaskPool::addVerify(TcpTask *task)$/;"	f	class:TcpTaskPool
allSize	common/nullCmd.h	/^	inline DWORD allSize()$/;"	f	struct:ZipCmdPackNullCmd
allSize	orgainCode/nullCmd.h	/^	inline DWORD allSize()$/;"	f	struct:ZipCmdPackNullCmd
allSize	protol/protolCmd.h	/^	DWORD allSize() const$/;"	f	struct:NotifyMeServer
allsize	common/nullCmd.h	/^	DWORD allsize()$/;"	f	struct:DataSendCmd
analysisRecvingCmd	base/baseTcpClient.h	/^		virtual void analysisRecvingCmd(BYTE cmd,BYTE param,DWORD size) {};$/;"	f	class:TcpClientBase
analysisRecvingCmd	base/baseTcpClientTask.h	/^		virtual void analysisRecvingCmd(BYTE cmd,BYTE param,DWORD size) {};$/;"	f	class:TcpClientTaskBase
analysisRecvingCmd	base/baseTcpTask.h	/^		virtual void analysisRecvingCmd(BYTE cmd,BYTE param,DWORD size) {};$/;"	f	class:TcpTask
analysisRecvingCmd	orgainCode/baseTcpClientTask.h	/^		virtual void analysisRecvingCmd(BYTE cmd,BYTE param,DWORD size) {};$/;"	f	class:TcpClientTaskBase
analysisSendingCmd	base/baseTcpClient.h	/^		virtual void analysisSendingCmd(BYTE cmd,BYTE param,DWORD size) {};$/;"	f	class:TcpClientBase
analysisSendingCmd	base/baseTcpClientTask.h	/^		virtual void analysisSendingCmd(BYTE cmd,BYTE param,DWORD size) {};$/;"	f	class:TcpClientTaskBase
analysisSendingCmd	base/baseTcpTask.h	/^		virtual void analysisSendingCmd(BYTE cmd,BYTE param,DWORD size) {};$/;"	f	class:TcpTask
analysisSendingCmd	orgainCode/baseTcpClientTask.h	/^		virtual void analysisSendingCmd(BYTE cmd,BYTE param,DWORD size) {};$/;"	f	class:TcpClientTaskBase
arpg_program_version	orgainCode/ScenesServer.cpp	/^const char *arpg_program_version = "Program version :\\t" "VERSION_STRING" "\\Bulid version :\\t" "_S( BUILD STRING )" "\\Build time :\\t" __DATE__","__TIME__;$/;"	v
atomicAdd	base/baseThread.cpp	/^long Thread::atomicAdd(volatile SQWORD *val,SQWORD x)$/;"	f	class:Thread
atomicDec	base/baseThread.cpp	/^long Thread::atomicDec(volatile SQWORD *val)$/;"	f	class:Thread
atomicInc	base/baseThread.cpp	/^long Thread::atomicInc(volatile SQWORD *val)$/;"	f	class:Thread
bcopy	base/baseFunc.h	24;"	d
bind	base/baseTcpService.cpp	/^bool TcpService::bind(const std::string &name,const WORD port)$/;"	f	class:TcpService
broadCmdToFLServer	base/baseSubService.cpp	/^bool SubNetService::broadCmdToFLServer( const void *strCmd,const DWORD cmdLen )$/;"	f	class:SubNetService
broadCmdToUserServer	base/baseSubService.cpp	/^bool SubNetService::broadCmdToUserServer( const void *strCmd,const DWORD cmdLen )$/;"	f	class:SubNetService
broadcast	base/baseLock.h	/^		void broadcast()$/;"	f	class:Condition
broadcast	base/baseTaskManager.h	/^		bool broadcast(const void *cmd,const DWORD cmdLen)$/;"	f	class:TaskManager
broadcast	orgainCode/baseTaskManager.h	/^		bool broadcast(const void *pstrcmd,const int cmdLen)$/;"	f	class:TaskManager
broadcastToTypeExceptOne	base/baseTaskManager.h	/^		bool broadcastToTypeExceptOne(const DWORD taskType,const DWORD exceptID,const void *cmd,const DWORD cmdLen)$/;"	f	class:TaskManager
broadcastToTypeExceptOne	orgainCode/baseTaskManager.h	/^		bool broadcastToTypeExceptOne(const DWORD type,const DWORD except,const void *pstrcmd,const int cmdLen)$/;"	f	class:TaskManager
brocastToID	base/baseTaskManager.h	/^		bool brocastToID(const DWORD serverID,const void *cmd,const DWORD cmdLen)$/;"	f	class:TaskManager
brocastToID	orgainCode/baseTaskManager.h	/^		bool brocastToID(const DWORD serverID,const void *pstrcmd,const int cmdLen)$/;"	f	class:TaskManager
buffer	base/baseMsgContainer.h	/^		BYTE buffer[size];$/;"	m	class:CmdBuffer_wrapper
buildTime	base/global.cpp	/^	volatile WORD buildTime = 0;$/;"	v
buildTime	protol/protolCmd.h	/^	DWORD buildTime;$/;"	m	struct:RequestStartServerCmd
byCmd	common/nullCmd.h	/^	BYTE	byCmd;$/;"	m	struct:NullCmd
byCmd	orgainCode/nullCmd.h	/^	BYTE	byCmd;$/;"	m	struct:NullCmd
byParam	common/nullCmd.h	/^	BYTE	byParam;$/;"	m	struct:NullCmd
byParam	orgainCode/nullCmd.h	/^	BYTE	byParam;$/;"	m	struct:NullCmd
bzero	base/baseFunc.h	31;"	d
caculateOnlineNum	SuperServer/superTaskManager.cpp	/^const DWORD SuperTaskManager::caculateOnlineNum()$/;"	f	class:SuperTaskManager
caculateOnlineNum	orgainCode/superTaskManager.cpp	/^const DWORD SuperTaskManager::caculateOnlineNum()$/;"	f	class:SuperTaskManager
changeSocket	base/baseSocket.cpp	/^bool Socket::changeSocket(const SWORD socket)$/;"	f	class:Socket
changeSocket	orgainCode/baseSocket.cpp	/^bool Socket::changeSocket(const SWORD socket)$/;"	f	class:Socket
checkAndReloadConfig	RecordServer/RecordServer.cpp	/^void RecordServer::checkAndReloadConfig()$/;"	f	class:RecordServer
checkAndReloadConfig	ScenesServer/scenesServer.cpp	/^void ScenesServer::checkAndReloadConfig()$/;"	f	class:ScenesServer
checkAndReloadConfig	SessionServer/SessionServer.cpp	/^void SessionServer::checkAndReloadConfig()$/;"	f	class:SessionServer
checkAndReloadConfig	orgainCode/ScenesServer.cpp	/^void ScenesServer::checkAndReloadConfig()$/;"	f	class:ScenesServer
checkAndReloadConfig	orgainCode/scenesServer.cpp	/^void ScenesServer::checkAndReloadConfig()$/;"	f	class:ScenesServer
checkChangeSocket	base/baseSocket.cpp	/^bool Socket::checkChangeSocket()$/;"	f	class:Socket
checkChangeSocket	orgainCode/baseSocket.cpp	/^bool Socket::checkChangeSocket()$/;"	f	class:Socket
checkConn	orgainCode/baseTcpClientTask.cpp	/^void TcpClientTaskBase::checkConn()$/;"	f	class:TcpClientTaskBase
checkConnect	base/baseTcpClientTask.cpp	/^void TcpClientTaskBase::checkConnect()$/;"	f	class:TcpClientTaskBase
checkDependence	SuperServer/superTaskManager.cpp	/^const bool SuperTaskManager::checkDependence(const WORD serverType)$/;"	f	class:SuperTaskManager
checkDependence	orgainCode/superTaskManager.cpp	/^const bool SuperTaskManager::checkDependence(const WORD serverType)$/;"	f	class:SuperTaskManager
checkFinal	orgainCode/ScenesServer.cpp	/^void ScenesServer::checkFinal()$/;"	f	class:ScenesServer
checkFirstMainLoop	base/baseTcpClientTask.h	/^		bool checkFirstMainLoop()$/;"	f	class:TcpClientTaskBase
checkFirstMainLoop	orgainCode/baseTcpClientTask.h	/^		bool checkFirstMainLoop()$/;"	f	class:TcpClientTaskBase
checkIOForRead	base/baseSocket.cpp	/^SWORD Socket::checkIOForRead()$/;"	f	class:Socket
checkIOForRead	orgainCode/baseSocket.cpp	/^SWORD Socket::checkIOForRead()$/;"	f	class:Socket
checkIOForWrite	base/baseSocket.cpp	/^SWORD Socket::checkIOForWrite()$/;"	f	class:Socket
checkIOForWrite	orgainCode/baseSocket.cpp	/^SWORD Socket::checkIOForWrite()$/;"	f	class:Socket
checkInterval	base/baseTcpTask.h	/^		bool checkInterval(const Time &timeVal)$/;"	f	class:TcpTask
checkMaxSendSize	base/baseSocket.cpp	/^bool Socket::checkMaxSendSize(const DWORD size)$/;"	f	class:Socket
checkMaxSendSize	orgainCode/baseSocket.cpp	/^bool Socket::checkMaxSendSize(const DWORD size)$/;"	f	class:Socket
checkRebound	base/baseTcpClientTask.h	/^		virtual SDWORD checkRebound()$/;"	f	class:TcpClientTaskBase
checkRebound	orgainCode/baseTcpClientTask.h	/^		virtual int checkRebound()$/;"	f	class:TcpClientTaskBase
checkRecycle	SuperServer/superTask.cpp	/^bool SuperTask::checkRecycle()$/;"	f	class:SuperTask
checkRecycle	orgainCode/superTask.cpp	/^bool SuperTask::checkRecycle()$/;"	f	class:SuperTask
checkRunning	base/baseThread.cpp	/^bool Thread::checkRunning()$/;"	f	class:Thread
checkSignal	base/baseTcpTask.cpp	/^void TcpTask::checkSignal(const Time &timeVal)$/;"	f	class:TcpTask
checkStateTimeOut	base/baseTcpClientTask.h	/^		bool checkStateTimeOut(const ConnectState state,const Time &timeVal,const DWORD timeout)$/;"	f	class:TcpClientTaskBase
checkStateTimeOut	orgainCode/baseTcpClientTask.h	/^		bool checkStateTimeOut(const ConnState state,const Time &ct,const DWORD timeout)$/;"	f	class:TcpClientTaskBase
checkTick	base/baseTcpClientTask.h	/^		bool checkTick() const$/;"	f	class:TcpClientTaskBase
checkTick	base/baseTcpTask.h	/^		bool checkTick() const$/;"	f	class:TcpTask
checkTick	orgainCode/baseTcpClientTask.h	/^		bool checkTick() const$/;"	f	class:TcpClientTaskBase
checkTmOk	base/baseTime.h	/^		void checkTmOk()$/;"	f	class:Time
checkTmOk	orgainCode/baseTime.h	/^		void checkTmOk()$/;"	f	class:Time
checkUseTime	base/baseSqlHandle.cpp	/^void MysqlHandle::checkUseTime()$/;"	f	class:MysqlHandle
checkVerifyOK	base/baseTcpTask.h	/^		bool checkVerifyOK()$/;"	f	class:TcpTask
checkVerifyTimeout	base/baseTcpTask.h	/^		bool checkVerifyTimeout(const Time &timeVal,const QWORD interval = 4000L) const$/;"	f	class:TcpTask
checkZoneInfo	base/baseService.cpp	/^bool Service::checkZoneInfo(MysqlPool *pool,const char *ip,const WORD port)$/;"	f	class:Service
check_queue	base/baseTaskContainer.h	/^		inline void check_queue()$/;"	f	class:TaskQueue
cid1	base/baseEntry.h	/^				BYTE cid1;$/;"	m	struct:Entry::__anon3::__anon5
cid2	base/baseEntry.h	/^				BYTE cid2;$/;"	m	struct:Entry::__anon3::__anon5
cid3	base/baseEntry.h	/^				BYTE cid3;$/;"	m	struct:Entry::__anon3::__anon5
cid4	base/baseEntry.h	/^				BYTE cid4;$/;"	m	struct:Entry::__anon3::__anon5
clear	base/baseEntry.h	/^		inline void clear()$/;"	f	class:LimitHash
clear	base/baseEntry.h	/^		void clear() {}$/;"	f	class:EntryNone
clear	base/baseEntry.h	/^		void clear()$/;"	f	class:EntryManager
clear	base/baseMsgContainer.h	/^		void clear()$/;"	f	class:MsgQueue
clearFlag	base/baseSocket.h	/^		inline void clearFlag(const DWORD flag)$/;"	f	class:Socket
clearTick	base/baseTcpClientTask.h	/^		void clearTick()$/;"	f	class:TcpClientTaskBase
clearTick	base/baseTcpTask.h	/^		void clearTick()$/;"	f	class:TcpTask
clearTick	orgainCode/baseTcpClientTask.h	/^		void clearTick()$/;"	f	class:TcpClientTaskBase
close	base/baseTcpClient.h	/^		virtual void close()$/;"	f	class:TcpClientBase
close	base/baseTcpClientBuffer.h	/^		void close()$/;"	f	class:TcpClientBuffer
close	orgainCode/baseTcpClientTask.h	/^			close = 0,$/;"	e	enum:TcpClientTaskBase::ConnState
cmdMsgParse	base/baseMsgContainer.h	/^		bool cmdMsgParse(const Cmd::NullCmd *ptNullCmd,const DWORD cmdLen)$/;"	f	class:MessageQueue
cmdQueue	base/baseMsgContainer.h	/^		CmdQueue cmdQueue[QueueSize];$/;"	m	class:MsgQueue
cmdQueue	base/baseMsgContainer.h	/^	MsgQueue cmdQueue;$/;"	m	class:MessageQueue
cmd_size	base/baseMsgContainer.h	/^		DWORD cmd_size;$/;"	m	class:CmdBuffer_wrapper
cnt	base/baseMsgContainer.h	/^		type* cnt;$/;"	m	class:CmdBuffer_wrapper
compress	orgainCode/baseTcpClientTask.h	/^		const bool compress;$/;"	m	class:TcpClientTaskBase
cond	base/baseLock.h	/^		pthread_cond_t cond;$/;"	m	class:Condition
config	base/global.cpp	/^	Property config;$/;"	v
config	orgainCode/global.cpp	/^	Property config;$/;"	v
connect	base/baseTcpClient.cpp	/^bool TcpClientBase::connect()$/;"	f	class:TcpClientBase
connect	base/baseTcpClient.h	/^		bool connect(const char *ip,const WORD port)$/;"	f	class:TcpClientBase
connect	base/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::connect()$/;"	f	class:TcpClientTaskBase
connect	orgainCode/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::connect()$/;"	f	class:TcpClientTaskBase
const_iter	base/baseEntry.h	/^		typedef typename HashMap::const_iterator const_iter;$/;"	t	class:LimitHash
constructInPlace	base/baseConstruct.h	/^inline void constructInPlace(T *ptr)$/;"	f
constructInPlace	base/baseConstruct.h	/^inline void constructInPlace(Ty *ptr,Tparam param)$/;"	f
constructInPlace	base/baseConstruct.h	/^inline void constructInPlace(Ty *ptr,Tparam param,Tparam param2,Tparam3 param3)$/;"	f
constructInPlace	base/baseConstruct.h	/^inline void constructInPlace(Ty *ptr,Tparam param,Tparam2 param2)$/;"	f
createDate	base/baseSubService.h	/^	DWORD createDate;$/;"	m	struct:ZoneInfo
ctrlHandler	base/baseService.cpp	/^static void ctrlHandler(const SDWORD signum)$/;"	f	file:
current	base/baseTime.h	/^		void current(const Time &cur)$/;"	f	class:Timer
current	orgainCode/baseTime.h	/^		void current(const Time &cur)$/;"	f	class:Timer
data	base/baseSqlFiled.h	/^		ValType data;$/;"	m	struct:Filed
data	common/nullCmd.h	/^	BYTE data[0];$/;"	m	struct:DataSendCmd
data	common/nullCmd.h	/^	char data[0];$/;"	m	struct:ZipCmdPackNullCmd
data	orgainCode/nullCmd.h	/^	char data[0];$/;"	m	struct:ZipCmdPackNullCmd
dataSize	common/nullCmd.h	/^	inline DWORD dataSize()$/;"	f	struct:ZipCmdPackNullCmd
dataSize	orgainCode/nullCmd.h	/^	inline DWORD dataSize()$/;"	f	struct:ZipCmdPackNullCmd
datasize	common/nullCmd.h	/^	DWORD datasize()$/;"	f	struct:DataSendCmd
dbName	base/baseSqlUrl.h	/^	char dbName[MAX_DBSIZE];$/;"	m	struct:MysqlUrl
debug	base/baseLog.cpp	/^void Logger::debug(const char* pattern,...)$/;"	f	class:Logger
delEpoll	base/baseSocket.h	/^		inline void delEpoll(SWORD kdpfd,DWORD events)$/;"	f	class:Socket
delEpoll	base/baseTcpClientTask.h	/^		void delEpoll(const SDWORD kdpfd,const DWORD events)$/;"	f	class:TcpClientTaskBase
delEpoll	base/baseTcpTask.h	/^		void delEpoll(SWORD kdpfd,__uint32_t events)$/;"	f	class:TcpTask
delEpoll	orgainCode/baseTcpClientTask.h	/^		void delEpoll(int kdpfd,__uint32_t events)$/;"	f	class:TcpClientTaskBase
delay	base/baseTime.h	/^		void delay()$/;"	f	class:Clocker
delay	orgainCode/baseTime.h	/^		void delay()$/;"	f	class:Clocker
deleteAll	base/baseEntry.h	/^		void deleteAll()$/;"	f	class:EntryManager
deleteDatabase	sql/database.py	/^def deleteDatabase():$/;"	f
deleteEntry_if	base/baseEntry.h	/^		void deleteEntry_if(RemoveEntry_Pred<YourEntry> &pred)$/;"	f	class:EntryManager
deleteInstance	base/baseClass.h	/^		static void deleteInstance()$/;"	f	class:SingletonBase
deleteNameDatabase	sql/database.py	/^def deleteNameDatabase():$/;"	f
depend	RecordServer/Makefile	/^depend = $(patsubst %.cpp,%.d,$(src))$/;"	m
depend	ScenesServer/Makefile	/^depend = $(patsubst %.cpp,%.d,$(src))$/;"	m
depend	SessionServer/Makefile	/^depend = $(patsubst %.cpp,%.d,$(src))$/;"	m
depend	SuperServer/Makefile	/^depend = $(patsubst %.cpp,%.d,$(src))$/;"	m
depend	base/Makefile	/^depend = $(patsubst %.cpp,%.d,$(src))$/;"	m
depend	common/Makefile	/^depend = $(patsubst %.cpp,%.d,$(src))$/;"	m
depend	protol/Makefile	/^depend = $(patsubst %.cpp,%.d,$(src))$/;"	m
destZoneID	base/baseSubService.h	/^	DWORD destZoneID;$/;"	m	struct:ZoneInfo
doCmd	base/baseMsgContainer.h	/^		bool doCmd()$/;"	f	class:MessageQueue
doCmd	base/baseSubService.cpp	/^bool SubNetService::doCmd()$/;"	f	class:SubNetService
doCmd	base/baseTaskQueueManager.h	/^		void doCmd()$/;"	f	class:TaskQueueManager
doCmd	orgainCode/baseTaskQueueManager.h	/^		void doCmd()$/;"	f	class:TaskQueueManager
doCmd	sql/database.py	/^def doCmd(str):$/;"	f
doNameCmd	sql/database.py	/^def doNameCmd(str):$/;"	f
dowork	RunServer.sh	/^dowork()$/;"	f
dowork	RunServer.sh~	/^dowork()$/;"	f
dowork	orgainCode/RunServer.sh	/^dowork()$/;"	f
dropMark	sql/database.py	/^def dropMark(str):$/;"	f
dump	base/baseProperty.h	/^		void dump( std::ostream &out ) const$/;"	f	class:Property
dump	orgainCode/baseProperty.h	/^		void dump( std::ostream &out ) const$/;"	f	class:Property
dwSize	common/nullCmd.h	/^	DWORD dwSize;$/;"	m	struct:DataSendCmd
elapse	base/baseTime.h	/^		QWORD elapse(const RTime &rt)$/;"	f	class:RTime
elapse	base/baseTime.h	/^		QWORD elapse(const Time &time) const$/;"	f	class:Time
elapse	orgainCode/baseTime.h	/^		QWORD elapse(const RTime &rt)$/;"	f	class:RTime
elapse	orgainCode/baseTime.h	/^		QWORD elapse(const Time &time) const$/;"	f	class:Time
empty	base/baseEntry.h	/^		bool empty() const$/;"	f	class:EntryManager
empty	base/baseEntry.h	/^		inline bool empty() const$/;"	f	class:LimitHash
empty	base/baseSqlRecord.h	/^		inline bool empty() const$/;"	f	struct:RecordSet
empty	base/baseSqlValType.h	/^		inline bool empty() const$/;"	f	class:ValType
empty	base/baseTime.h	/^		inline bool empty()$/;"	f	class:Timer
empty	orgainCode/baseTime.h	/^		inline bool empty()$/;"	f	class:Timer
entry	protol/protolCmd.h	/^	ServerEntry entry;$/;"	m	struct:NotifyOtherServer
entry	protol/protolCmd.h	/^	ServerEntry entry[0];$/;"	m	struct:NotifyMeServer
epfds	orgainCode/baseCheckWaitThread.h	/^		epollfdContainer epfds;$/;"	m	class:CheckWaitThread
erase	base/baseMsgContainer.h	/^		void erase()$/;"	f	class:MsgQueue
error	base/baseLog.cpp	/^void Logger::error(const char* pattern,...)$/;"	f	class:Logger
errorcheck	base/baseLock.h	/^			errorcheck = PTHREAD_MUTEX_ERRORCHECK_NP$/;"	e	enum:Mutex::MutexType
escapeString	base/baseSqlHandle.cpp	/^bool MysqlHandle::escapeString(const char *src)$/;"	f	class:MysqlHandle
escapeString	base/baseSqlHandle.cpp	/^bool MysqlHandle::escapeString(const std::string &src)$/;"	f	class:MysqlHandle
escapeString	base/baseSqlHandle.cpp	/^char* MysqlHandle::escapeString(const char *src,char *dest,DWORD size)$/;"	f	class:MysqlHandle
escapeString	base/baseSqlHandle.cpp	/^std::string& MysqlHandle::escapeString(const std::string &src,std::string &dest)$/;"	f	class:MysqlHandle
ets	base/baseEntry.h	/^		HashMap ets;$/;"	m	class:LimitHash
exeDelete	base/baseSqlHandle.cpp	/^DWORD MysqlHandle::exeDelete(const char *tableName,Record *where)$/;"	f	class:MysqlHandle
exeInsert	base/baseSqlHandle.cpp	/^DWORD MysqlHandle::exeInsert(const char *tableName,Record *data,bool need_log)$/;"	f	class:MysqlHandle
exeSelect	base/baseSqlHandle.cpp	/^RecordSet* MysqlHandle::exeSelect(const char *sql,const DWORD sqllen)$/;"	f	class:MysqlHandle
exeSelect	base/baseSqlHandle.cpp	/^RecordSet* MysqlHandle::exeSelect(const char *tableName,Record *column,Record *where,Record *having,DWORD limit_offset,DWORD limit_rows,Record *groupby,Record *order)$/;"	f	class:MysqlHandle
exeUpdate	base/baseSqlHandle.cpp	/^DWORD MysqlHandle::exeUpdate(const char *tableName,Record *data,Record *where)$/;"	f	class:MysqlHandle
exec	base/baseSqlHandle.cpp	/^	bool exec(Filed *entry)$/;"	f	struct:WhereExec
execEvery	base/baseThreadManager.h	/^		bool execEvery(EntryCallBack<YourEntry> &exec)$/;"	f	class:TaskThreadManager
execEvery	orgainCode/baseThreadManager.h	/^		bool execEvery(EntryCallBack<YourEntry> &exec)$/;"	f	class:TaskThreadManager
execEveryEntry	base/baseEntry.h	/^		bool execEveryEntry(EntryCallBack<YourEntry> &callBackInst)$/;"	f	class:EntryManager
execEveryEntryConst	base/baseEntry.h	/^		bool execEveryEntryConst(EntryCallBack<const YourEntry> &callBackInst) const$/;"	f	class:EntryManager
execEveryFiled	base/baseSqlRecord.h	/^		bool execEveryFiled(EntryCallBack<YourEntry> &exec)$/;"	f	class:Record
execEveryMysqlHandle	base/baseSqlHandle.h	/^		bool execEveryMysqlHandle(EntryCallBack<YourEntry> &exec)$/;"	f	class:MysqlHandleManager
execEveryMysqlUrl	base/baseSqlUrl.h	/^		bool execEveryMysqlUrl(EntryCallBack<YourEntry> &exec)$/;"	f	class:MysqlUrlManager
execEveryTable	base/baseSqlTable.h	/^		bool execEveryTable(EntryCallBack<YourEntry> &exec)$/;"	f	class:TableManager
execEveryTask	base/baseTaskManager.h	/^		bool execEveryTask(EntryCallBack<YourEntry> &callback)$/;"	f	class:TaskManager
execEveryTask	orgainCode/baseTaskManager.h	/^		bool execEveryTask(Callback<YourEntry> &callback)$/;"	f	class:TaskManager
execEveryThread	base/baseThread.h	/^		bool execEveryThread(EntryCallBack<YourEntry> &exec)$/;"	f	class:ThreadManager
execRandomEntry	base/baseEntry.h	/^		bool execRandomEntry(EntryCallBack<YourEntry> &exec)$/;"	f	class:EntryManager
execSql	base/baseSqlHandle.cpp	/^SDWORD MysqlHandle::execSql(const char *sql,const DWORD sqllen,bool need_errlog)$/;"	f	class:MysqlHandle
fast	base/baseLock.h	/^			fast = PTHREAD_MUTEX_ADAPTIVE_NP,$/;"	e	enum:Mutex::MutexType
fatal	base/baseLog.cpp	/^void Logger::fatal(const char *pattern,...)$/;"	f	class:Logger
fdsrAdd	base/baseTcpClientTask.h	/^		bool fdsrAdd(bool flg=true)$/;"	f	class:TcpClientTaskBase
fdsrAdd	base/baseTcpTask.h	/^		bool fdsrAdd()$/;"	f	class:TcpTask
fdsrAdd	orgainCode/baseTcpClientTask.h	/^		bool fdsrAdd(bool set=true)$/;"	f	class:TcpClientTaskBase
fdsradd	orgainCode/baseTcpClientTask.h	/^		bool fdsradd;$/;"	m	class:TcpClientTaskBase
fillPollFd	base/baseSocket.h	/^		inline void fillPollFd(struct pollfd& pfd,WORD events)$/;"	f	class:Socket
final	RecordServer/RecordServer.cpp	/^void RecordServer::final()$/;"	f	class:RecordServer
final	ScenesServer/scenesServer.cpp	/^void ScenesServer::final()$/;"	f	class:ScenesServer
final	SessionServer/SessionServer.cpp	/^void SessionServer::final()$/;"	f	class:SessionServer
final	SuperServer/SuperServer.cpp	/^void SuperServer::final()$/;"	f	class:SuperServer
final	base/baseNetService.cpp	/^void NetService::final()$/;"	f	class:NetService
final	base/baseSubService.cpp	/^void SubNetService::final()$/;"	f	class:SubNetService
final	base/baseTaskPool.cpp	/^void TcpTaskPool::final()$/;"	f	class:TcpTaskPool
final	base/baseTcpClientTask.h	/^		void final()$/;"	f	class:TcpClientTaskBase
final	base/baseTcpClientTaskPool.cpp	/^void TcpClientTaskPool::final()$/;"	f	class:TcpClientTaskPool
final	base/baseTcpClientTaskPool_1.cpp	/^void TcpClientTaskPool::final()$/;"	f	class:TcpClientTaskPool
final	base/baseThread.cpp	/^void Thread::final()$/;"	f	class:Thread
final	base/baseThreadManager.h	/^		void final()$/;"	f	class:TaskThreadManager
final	orgainCode/ScenesServer.cpp	/^void ScenesServer::final()$/;"	f	class:ScenesServer
final	orgainCode/SuperServer.cpp	/^void SuperServer::final()$/;"	f	class:SuperServer
final	orgainCode/baseTcpClientTask.h	/^		void final()$/;"	f	class:TcpClientTaskBase
final	orgainCode/baseThreadManager.h	/^		void final()$/;"	f	class:TaskThreadManager
final	orgainCode/scenesServer.cpp	/^void ScenesServer::final()$/;"	f	class:ScenesServer
finalGlobal	base/global.cpp	/^	void finalGlobal()$/;"	f	namespace:Global
finalGlobal	orgainCode/global.cpp	/^	void finalGlobal()$/;"	f	namespace:Global
finalHandle	base/baseSqlHandle.cpp	/^void MysqlHandle::finalHandle()$/;"	f	class:MysqlHandle
finalSave	RecordServer/RecordServer.cpp	/^void RecordServer::finalSave()$/;"	f	class:RecordServer
finalSave	ScenesServer/scenesServer.cpp	/^void ScenesServer::finalSave()$/;"	f	class:ScenesServer
finalSave	SessionServer/SessionServer.cpp	/^void SessionServer::finalSave()$/;"	f	class:SessionServer
finalSave	orgainCode/ScenesServer.cpp	/^void ScenesServer::finalSave()$/;"	f	class:ScenesServer
finalSave	orgainCode/scenesServer.cpp	/^void ScenesServer::finalSave()$/;"	f	class:ScenesServer
find	base/baseEntry.h	/^		inline bool find(const keyT &key,valueT &value) const$/;"	f	class:LimitHash
find	base/baseProperty.h	/^		bool find( const std::string &key )$/;"	f	class:Property
find	orgainCode/baseProperty.h	/^		bool find( const std::string &key )$/;"	f	class:Property
findOne	base/baseEntry.h	/^		inline bool findOne(valueT &value) const$/;"	f	class:LimitHash
fiveMin	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::fiveMin()$/;"	f	class:RecordTimeTick
fiveMin	ScenesServer/timeTick.cpp	/^void SceneTimeTick::fiveMin()$/;"	f	class:SceneTimeTick
fiveMin	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::fiveMin()$/;"	f	class:SessionTimeTick
fiveMin	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::fiveMin()$/;"	f	class:SuperTimeTick
fiveMin	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::fiveMin()$/;"	f	class:SuperTimeTick
fiveSec	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::fiveSec()$/;"	f	class:RecordTimeTick
fiveSec	ScenesServer/timeTick.cpp	/^void SceneTimeTick::fiveSec()$/;"	f	class:SceneTimeTick
fiveSec	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::fiveSec()$/;"	f	class:SessionTimeTick
fiveSec	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::fiveSec()$/;"	f	class:SuperTimeTick
fiveSec	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::fiveSec()$/;"	f	class:SuperTimeTick
force_sync	base/baseSocket.cpp	/^void Socket::force_sync()$/;"	f	class:Socket
force_sync	orgainCode/baseSocket.cpp	/^void Socket::force_sync()$/;"	f	class:Socket
format	base/baseTime.h	/^		void format(char *buffer,size_t bufferlen,const char *format = "%c\/$M\/%d$Y")$/;"	f	class:Time
format	orgainCode/baseTime.h	/^		void format(char *buffer,size_t bufferlen,const char *format = "%c\/$M\/%d$Y")$/;"	f	class:Time
fourHour	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::fourHour()$/;"	f	class:RecordTimeTick
fourHour	ScenesServer/timeTick.cpp	/^void SceneTimeTick::fourHour()$/;"	f	class:SceneTimeTick
fourHour	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::fourHour()$/;"	f	class:SessionTimeTick
fourHour	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::fourHour()$/;"	f	class:SuperTimeTick
fourHour	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::fourHour()$/;"	f	class:SuperTimeTick
fp_console	base/baseLog.h	/^		FILE *fp_console;$/;"	m	class:Logger
fp_file	base/baseLog.h	/^		FILE *fp_file;$/;"	m	class:Logger
freeHandle	base/baseSqlHandle.cpp	/^void MysqlHandle::freeHandle()$/;"	f	class:MysqlHandle
frist	base/baseSqlHandle.cpp	/^	bool frist;$/;"	m	struct:WhereExec	file:
fs	base/baseSqlTable.h	/^		Record fs;$/;"	m	struct:Table
fstopwork	RunServer.sh	/^fstopwork()$/;"	f
fstopwork	RunServer.sh~	/^fstopwork()$/;"	f
fstopwork	orgainCode/RunServer.sh	/^fstopwork()$/;"	f
game	base/baseSubService.h	/^			WORD game;$/;"	m	struct:GameZone::__anon9::__anon10
game	base/baseSubService.h	/^			WORD game;$/;"	m	struct:ZoneInfo::__anon11::__anon12
gameTime	base/global.cpp	/^	volatile QWORD gameTime = 0;$/;"	v
gameTime	orgainCode/global.cpp	/^	volatile QWORD gameTime = 0;$/;"	v
get	base/baseMsgContainer.h	/^		CmdPair* get()$/;"	f	class:MsgQueue
get	base/baseProperty.h	/^		const ValType &get( const std::string &key )$/;"	f	class:Property
get	base/baseSqlRecord.h	/^		Filed* get(const char *filedName)$/;"	f	class:Record
get	base/baseSqlRecord.h	/^		inline Record* get(unsigned int row) const$/;"	f	struct:RecordSet
get	base/bitSet.cpp	/^bool BitSet::get( size_t index )$/;"	f	class:BitSet
get	orgainCode/baseProperty.h	/^		const VarType &get( const std::string &key )$/;"	f	class:Property
getA	base/testAutoPtr.h	/^		int getA()$/;"	f	class:TestAutoPtr
getAddr	base/baseSocket.h	/^		inline const DWORD getAddr() const$/;"	f	class:Socket
getAddr	base/baseTcpClientTask.h	/^		const DWORD getAddr() const$/;"	f	class:TcpClientTaskBase
getAddr	base/baseTcpTask.h	/^		const DWORD getAddr() const$/;"	f	class:TcpTask
getAddr	orgainCode/baseTcpClientTask.h	/^		const DWORD getAddr() const$/;"	f	class:TcpClientTaskBase
getAverageOne	base/baseThreadManager.h	/^		T* getAverageOne()$/;"	f	class:TaskThreadManager
getAverageOne	orgainCode/baseThreadManager.h	/^		T* getAverageOne()$/;"	f	class:TaskThreadManager
getB	base/testAutoPtr.h	/^		int getB()$/;"	f	class:TestAutoPtr
getClassName	SuperServer/superTask.h	/^		const char* getClassName() const$/;"	f	class:SuperTask
getClassName	base/baseService.h	/^		const char *getClassName() const$/;"	f	class:Service
getClassName	base/baseSqlFiled.h	/^		const char* getClassName() const$/;"	f	struct:Filed
getClassName	base/baseSqlHandle.h	/^		const char* getClassName() const$/;"	f	class:MysqlHandle
getClassName	base/baseSqlTable.h	/^		const char* getClassName() const$/;"	f	struct:Table
getClassName	base/baseThread.h	/^		const char* getClassName()$/;"	f	class:Thread
getClassName	orgainCode/superTask.h	/^		const char* getClassName() const$/;"	f	class:SuperTask
getClientPool	SuperServer/SuperServer.h	/^		TcpClientTaskPool* getClientPool()$/;"	f	class:SuperServer
getClientPool	orgainCode/SuperServer.h	/^		TcpClientTaskPool* getClientPool()$/;"	f	class:SuperServer
getCurrentThreadId	base/baseThread.cpp	/^pthread_t Thread::getCurrentThreadId()$/;"	f	class:Thread
getDayStart	RecordServer/recordTimeTick.h	/^		static DWORD getDayStart( DWORD time )$/;"	f	class:RecordTimeTick
getDayStart	ScenesServer/timeTick.h	/^		static DWORD getDayStart( DWORD time )$/;"	f	class:SceneTimeTick
getDayStart	SessionServer/sessionTimeTick.h	/^		static DWORD getDayStart( DWORD time )$/;"	f	class:SessionTimeTick
getDayStart	SuperServer/superTimeTick.h	/^		static DWORD getDayStart( DWORD time )$/;"	f	class:SuperTimeTick
getEntryByCharName	base/baseEntry.h	/^		inline Entry* getEntryByCharName( const char* name ) const$/;"	f	class:EntryName
getEntryByID	base/baseEntry.h	/^		inline Entry * getEntryByID(const DWORD id) const$/;"	f	class:EntryID
getEntryByName	base/baseEntry.h	/^		 inline Entry* getEntryByName( const std::string& name) const$/;"	f	class:EntryName
getEntryByName	base/baseEntry.h	/^		inline Entry* getEntryByName(const char* name) const$/;"	f	class:EntryName
getEntryByTempID	base/baseEntry.h	/^		inline Entry * getEntryByTempID(const DWORD tempid) const$/;"	f	class:EntryTempID
getGameTyper	base/global.cpp	/^	int getGameTyper()$/;"	f	namespace:Global
getGameTyper	orgainCode/global.cpp	/^	int getGameTyper()$/;"	f	namespace:Global
getGroupBy	base/baseSqlHandle.cpp	/^inline std::ostringstream& MysqlHandle::getGroupBy(Table *table,std::ostringstream &query_string,Record *groupby)$/;"	f	class:MysqlHandle
getHandle	base/baseSqlPool.cpp	/^MysqlHandle* MysqlPool::getHandle(DWORD hashcode)$/;"	f	class:MysqlPool
getHaving	base/baseSqlHandle.cpp	/^inline std::ostringstream& MysqlHandle::getHaving(Table *table,std::ostringstream &query_string,Record *having)$/;"	f	class:MysqlHandle
getHours	base/baseTime.h	/^		DWORD getHours()$/;"	f	class:Time
getHours	orgainCode/baseTime.h	/^		DWORD getHours()$/;"	f	class:Time
getID	SuperServer/SuperServer.h	/^		const WORD getID() const$/;"	f	class:SuperServer
getID	base/baseTcpClientTask.h	/^		const DWORD getID() const$/;"	f	class:TcpClientTaskBase
getID	base/baseTcpTask.h	/^		const DWORD getID() const$/;"	f	class:TcpTask
getID	orgainCode/SuperServer.h	/^		const WORD getID() const$/;"	f	class:SuperServer
getID	orgainCode/baseTcpClientTask.h	/^		const DWORD getID() const$/;"	f	class:TcpClientTaskBase
getIP	SuperServer/SuperServer.h	/^		const char* getIP() const$/;"	f	class:SuperServer
getIP	base/baseSocket.h	/^		inline const char* getIP() const$/;"	f	class:Socket
getIP	base/baseTcpClient.h	/^		const char *getIP() const$/;"	f	class:TcpClientBase
getIP	base/baseTcpClientTask.h	/^		const char* getIP() const$/;"	f	class:TcpClientTaskBase
getIP	base/baseTcpTask.h	/^		const char* getIP() const$/;"	f	class:TcpTask
getIP	orgainCode/SuperServer.h	/^		const char* getIP() const$/;"	f	class:SuperServer
getIP	orgainCode/baseTcpClientTask.h	/^		const char* getIP() const$/;"	f	class:TcpClientTaskBase
getIPByIfName	base/baseSocket.cpp	/^const char* Socket::getIPByIfName(const char *ifName)$/;"	f	class:Socket
getIPByIfName	orgainCode/baseSocket.cpp	/^const char* Socket::getIPByIfName(const char *ifName)$/;"	f	class:Socket
getInstance	RecordServer/RecordServer.h	/^		static RecordServer& getInstance()$/;"	f	class:RecordServer
getInstance	ScenesServer/scenesServer.h	/^		static ScenesServer &getInstance()$/;"	f	class:ScenesServer
getInstance	SessionServer/SessionServer.h	/^		static SessionServer& getInstance()$/;"	f	class:SessionServer
getInstance	SuperServer/SuperServer.h	/^		static SuperServer &getInstance()$/;"	f	class:SuperServer
getInstance	base/baseClass.h	/^		static T& getInstance()$/;"	f	class:SingletonBase
getInstance	base/baseClass.h	/^		static T1& getInstance()$/;"	f	class:SingletonBase
getInstance	base/baseNetService.h	/^		static NetService &getInstance()$/;"	f	class:NetService
getInstance	base/baseSubService.h	/^		static SubNetService &getInstance()$/;"	f	class:SubNetService
getInstance	orgainCode/ScenesServer.h	/^		static ScenesServer &getInstance()$/;"	f	class:ScenesServer
getInstance	orgainCode/SuperServer.h	/^		static SuperServer &getInstance()$/;"	f	class:SuperServer
getLastFrameTime	RecordServer/recordTimeTick.h	/^		long getLastFrameTime()$/;"	f	class:RecordTimeTick
getLastFrameTime	ScenesServer/timeTick.h	/^		long getLastFrameTime()$/;"	f	class:SceneTimeTick
getLastFrameTime	SessionServer/sessionTimeTick.h	/^		long getLastFrameTime()$/;"	f	class:SessionTimeTick
getLastFrameTime	SuperServer/superTimeTick.h	/^		long getLastFrameTime()$/;"	f	class:SuperTimeTick
getLocalIP	base/baseSocket.h	/^		inline const char* getLocalIP() const$/;"	f	class:Socket
getLocalPort	base/baseSocket.h	/^		inline const WORD getLocalPort() const$/;"	f	class:Socket
getLocalTZ	base/baseTime.cpp	/^const std::string& Time::getLocalTZ()$/;"	f	class:Time
getLocalTime	base/baseTime.h	/^		static void getLocalTime(struct tm &tmVal,time_t timeVal)$/;"	f	class:Time
getLocalTime	base/baseTime.h	/^		static void getLocalTime(struct tm &tv,time_t timeValue)$/;"	f	class:RTime
getLocalTime	orgainCode/baseTime.h	/^		static void getLocalTime(struct tm &tmVal,time_t timeVal)$/;"	f	class:Time
getLocalTime	orgainCode/baseTime.h	/^		static void getLocalTime(struct tm &tv,time_t timeValue)$/;"	f	class:RTime
getMDays	base/baseTime.h	/^		DWORD getMDays()$/;"	f	class:Time
getMDays	base/baseTime.h	/^		WORD getMDays(const WORD dayDiff)$/;"	f	class:Time
getMDays	orgainCode/baseTime.h	/^		DWORD getMDays()$/;"	f	class:Time
getMDays	orgainCode/baseTime.h	/^		WORD getMDays(const WORD dayDiff)$/;"	f	class:Time
getMaxCount	base/baseThreadManager.h	/^		DWORD getMaxCount()$/;"	f	class:TaskThreadManager
getMaxCount	orgainCode/baseThreadManager.h	/^		int getMaxCount()$/;"	f	class:TaskThreadManager
getMaxDataSize	base/baseSocket.cpp	/^DWORD Socket::getMaxDataSize() const$/;"	f	class:Socket
getMaxDataSize	orgainCode/baseSocket.cpp	/^DWORD Socket::getMaxDataSize() const$/;"	f	class:Socket
getMaxFrameTime	RecordServer/recordTimeTick.h	/^		long getMaxFrameTime()$/;"	f	class:RecordTimeTick
getMaxFrameTime	ScenesServer/timeTick.h	/^		long getMaxFrameTime()$/;"	f	class:SceneTimeTick
getMaxFrameTime	SessionServer/sessionTimeTick.h	/^		long getMaxFrameTime()$/;"	f	class:SessionTimeTick
getMaxFrameTime	SuperServer/superTimeTick.h	/^		long getMaxFrameTime()$/;"	f	class:SuperTimeTick
getMaxSize	base/baseOkayThread.h	/^		static DWORD getMaxSize()$/;"	f	class:OkayThread
getMaxSize	base/baseTcpClientThread.cpp	/^int TcpClientTaskThread::getMaxSize()$/;"	f	class:TcpClientTaskThread
getMinCount	base/baseThreadManager.h	/^		DWORD getMinCount()$/;"	f	class:TaskThreadManager
getMinCount	orgainCode/baseThreadManager.h	/^		int getMinCount()$/;"	f	class:TaskThreadManager
getMinutes	base/baseTime.h	/^		DWORD getMinutes()$/;"	f	class:Time
getMinutes	orgainCode/baseTime.h	/^		DWORD getMinutes()$/;"	f	class:Time
getMonths	base/baseTime.h	/^		DWORD getMonths()$/;"	f	class:Time
getMonths	orgainCode/baseTime.h	/^		DWORD getMonths()$/;"	f	class:Time
getMysql	base/baseSqlHandle.h	/^		MYSQL* getMysql() const$/;"	f	class:MysqlHandle
getMysqlHandleByID	base/baseSqlHandle.h	/^		MysqlHandle* getMysqlHandleByID(const DWORD handleId)$/;"	f	class:MysqlHandleManager
getMysqlUrlByID	base/baseSqlUrl.h	/^		MysqlUrl *getMysqlUrlByID(const DWORD hashcode)$/;"	f	class:MysqlUrlManager
getName	base/baseLog.cpp	/^const char* Logger::getName()$/;"	f	class:Logger
getNextState	base/baseTcpClientTask.cpp	/^void TcpClientTaskBase::getNextState()$/;"	f	class:TcpClientTaskBase
getNextState	base/baseTcpTask.cpp	/^void TcpTask::getNextState()$/;"	f	class:TcpTask
getNextState	orgainCode/baseTcpClientTask.cpp	/^void TcpClientTaskBase::getNextState()$/;"	f	class:TcpClientTaskBase
getOne	base/baseThreadManager.h	/^		T *getOne()$/;"	f	class:TaskThreadManager
getOne	orgainCode/baseThreadManager.h	/^		T *getOne()$/;"	f	class:TaskThreadManager
getOrder	base/baseSqlHandle.cpp	/^inline std::ostringstream& MysqlHandle::getOrder(Table *table,std::ostringstream &query_string,Record *order)$/;"	f	class:MysqlHandle
getPoolSize	base/baseNetService.cpp	/^const DWORD NetService::getPoolSize() const$/;"	f	class:NetService
getPoolState	base/baseNetService.h	/^		virtual const SDWORD getPoolState() const$/;"	f	class:NetService
getPort	SuperServer/SuperServer.h	/^		const WORD getPort() const$/;"	f	class:SuperServer
getPort	base/baseSocket.h	/^		inline const WORD getPort() const$/;"	f	class:Socket
getPort	base/baseTcpClient.h	/^		const WORD getPort() const$/;"	f	class:TcpClientBase
getPort	base/baseTcpClientTask.h	/^		const WORD getPort() const$/;"	f	class:TcpClientTaskBase
getPort	base/baseTcpTask.h	/^		const WORD getPort() const$/;"	f	class:TcpTask
getPort	orgainCode/SuperServer.h	/^		const WORD getPort() const$/;"	f	class:SuperServer
getPort	orgainCode/baseTcpClientTask.h	/^		const WORD getPort() const$/;"	f	class:TcpClientTaskBase
getSeconds	base/baseTime.h	/^		QWORD getSeconds()$/;"	f	class:Time
getSeconds	orgainCode/baseTime.h	/^		QWORD getSeconds()$/;"	f	class:Time
getServerID	base/baseSubService.h	/^		const WORD getServerID() const$/;"	f	class:SubNetService
getServerID	base/baseTcpClient.h	/^		DWORD getServerID()$/;"	f	class:TcpClientBase
getServerInfo	SuperServer/SuperServer.cpp	/^bool SuperServer::getServerInfo()$/;"	f	class:SuperServer
getServerInfo	orgainCode/SuperServer.cpp	/^bool SuperServer::getServerInfo()$/;"	f	class:SuperServer
getServerType	base/baseSubService.h	/^		const DWORD getServerType() const$/;"	f	class:SubNetService
getServerTypeString	protol/protolCmd.h	/^inline const char* getServerTypeString( const ServerType type )$/;"	f
getSize	base/baseSqlHandle.h	/^		size_t getSize()$/;"	f	class:MysqlHandleManager
getSize	base/baseTaskManager.h	/^		DWORD getSize()$/;"	f	class:TaskManager
getSize	base/baseTaskPool.cpp	/^DWORD TcpTaskPool::getSize()$/;"	f	class:TcpTaskPool
getSize	orgainCode/baseTaskManager.h	/^		DWORD getSize()$/;"	f	class:TaskManager
getSocket	base/baseSocket.h	/^		const SWORD getSocket()$/;"	f	class:Socket
getState	base/baseTcpClientTask.h	/^		const ConnectState getState() const$/;"	f	class:TcpClientTaskBase
getState	base/baseTcpTask.h	/^		const TcpTask_State getState() const$/;"	f	class:TcpTask
getState	orgainCode/baseTcpClientTask.h	/^		const ConnState getState() const$/;"	f	class:TcpClientTaskBase
getStateString	base/baseTcpClientTask.h	/^		const char* getStateString(const ConnectState state)$/;"	f	class:TcpClientTaskBase
getStateString	base/baseTcpTask.h	/^		const char* getStateString(const TcpTask_State state) const$/;"	f	class:TcpTask
getStateString	orgainCode/baseTcpClientTask.h	/^		const char* getStateString(const ConnState state)$/;"	f	class:TcpClientTaskBase
getSystemTime	base/baseTime.cpp	/^bool getSystemTime( SYSTEMTIME *pST )$/;"	f
getTableByName	base/baseSqlTable.h	/^		Table* getTableByName(const char *tableName)$/;"	f	class:TableManager
getTaskByID	base/baseTaskManager.h	/^		T *getTaskByID(const DWORD id)$/;"	f	class:TaskManager
getTaskByID	orgainCode/baseTaskManager.h	/^		T *getTaskByID(const DWORD id)$/;"	f	class:TaskManager
getTaskSizeByType	base/baseTaskManager.h	/^		DWORD getTaskSizeByType(const DWORD taskType)$/;"	f	class:TaskManager
getTaskSizeByType	orgainCode/baseTaskManager.h	/^		DWORD getTaskSizeByType(const DWORD taskType)$/;"	f	class:TaskManager
getThreadByID	base/baseThreadManager.h	/^		T* getThreadByID(const WORD id)$/;"	f	class:TaskThreadManager
getThreadByID	orgainCode/baseThreadManager.h	/^		T* getThreadByID(const WORD id)$/;"	f	class:TaskThreadManager
getTimeMesc	base/baseTime.h	/^		QWORD getTimeMesc()$/;"	f	class:Timer
getTimeMesc	orgainCode/baseTime.h	/^		QWORD getTimeMesc()$/;"	f	class:Timer
getTotalSize	base/baseTcpClientTaskPool.h	/^		const SDWORD getTotalSize()$/;"	f	class:TcpClientTaskPool
getType	SuperServer/SuperServer.h	/^		const WORD getType() const$/;"	f	class:SuperServer
getType	base/baseTcpClientTask.h	/^		const DWORD getType() const$/;"	f	class:TcpClientTaskBase
getType	base/baseTcpTask.h	/^		const DWORD getType() const$/;"	f	class:TcpTask
getType	orgainCode/SuperServer.h	/^		const WORD getType() const$/;"	f	class:SuperServer
getType	orgainCode/baseTcpClientTask.h	/^		const DWORD getType() const$/;"	f	class:TcpClientTaskBase
getValue	base/baseSqlRecord.h	/^		ValType getValue(const char *fileName)$/;"	f	class:Record
getVerifyVersion	base/global.cpp	/^	int getVerifyVersion()$/;"	f	namespace:Global
getVerifyVersion	orgainCode/global.cpp	/^	int getVerifyVersion()$/;"	f	namespace:Global
getWDays	base/baseTime.h	/^		DWORD getWDays()$/;"	f	class:Time
getWDays	orgainCode/baseTime.h	/^		DWORD getWDays()$/;"	f	class:Time
getWeakPtr	base/autoLifeHook.h	/^		SafePtr getWeakPtr() const$/;"	f	class:AutoLifeHook
getWhere	base/baseSqlHandle.cpp	/^std::ostringstream& MysqlHandle::getWhere(Table *table,std::ostringstream &query_string,Record *where)$/;"	f	class:MysqlHandle
getYDays	base/baseTime.h	/^		DWORD getYDays()$/;"	f	class:Time
getYDays	orgainCode/baseTime.h	/^		DWORD getYDays()$/;"	f	class:Time
getYears	base/baseTime.h	/^		DWORD getYears()$/;"	f	class:Time
getYears	orgainCode/baseTime.h	/^		DWORD getYears()$/;"	f	class:Time
getZoneID	SuperServer/SuperServer.h	/^		const GameZone& getZoneID() const$/;"	f	class:SuperServer
getZoneID	orgainCode/SuperServer.h	/^		const GameZone& getZoneID() const$/;"	f	class:SuperServer
getZoneName	SuperServer/SuperServer.h	/^		const std::string& getZoneName()$/;"	f	class:SuperServer
getZoneName	orgainCode/SuperServer.h	/^		const std::string& getZoneName()$/;"	f	class:SuperServer
hasNotifyMe	orgainCode/superTask.h	/^		bool hasNotifyMe;$/;"	m	class:SuperTask
hasNotifyMeReturn	orgainCode/superTask.h	/^		bool hasNotifyMeReturn;$/;"	m	class:SuperTask
hasNotifyOther	orgainCode/superTask.h	/^		bool hasNotifyOther;$/;"	m	class:SuperTask
hashcode	base/baseSqlUrl.h	/^	const DWORD hashcode;$/;"	m	struct:MysqlUrl
host	base/baseSqlUrl.h	/^	char host[MAX_HOSTSIZE];$/;"	m	struct:MysqlUrl
hupHandler	base/baseService.cpp	/^static void hupHandler(const SDWORD signum)$/;"	f	file:
id	base/baseEntry.h	/^			DWORD id;$/;"	m	union:Entry::__anon3
id	base/baseSubService.h	/^		DWORD id;$/;"	m	union:GameZone::__anon9
ifCheckSignal	base/baseTcpTask.h	/^		const bool ifCheckSignal() const$/;"	f	class:TcpTask
if_CNC	base/baseSubService.h	/^	if_CNC        = 3,      \/\/网通$/;"	e	enum:NetType
if_CTC	base/baseSubService.h	/^	if_CTC        = 2,      \/\/电信$/;"	e	enum:NetType
info	base/baseLog.cpp	/^void Logger::info(const char *pattern,...)$/;"	f	class:Logger
init	RecordServer/RecordServer.cpp	/^bool RecordServer::init()$/;"	f	class:RecordServer
init	ScenesServer/scenesServer.cpp	/^bool ScenesServer::init()$/;"	f	class:ScenesServer
init	SessionServer/SessionServer.cpp	/^bool SessionServer::init()$/;"	f	class:SessionServer
init	SuperServer/SuperServer.cpp	/^bool SuperServer::init()$/;"	f	class:SuperServer
init	base/baseNetService.cpp	/^bool NetService::init(const WORD port)$/;"	f	class:NetService
init	base/baseService.cpp	/^bool Service::init()$/;"	f	class:Service
init	base/baseSubService.cpp	/^bool SubNetService::init()$/;"	f	class:SubNetService
init	base/baseTaskPool.cpp	/^bool TcpTaskPool::init()$/;"	f	class:TcpTaskPool
init	base/baseTcpClientTaskPool.cpp	/^bool TcpClientTaskPool::init( const DWORD preThreadSize )$/;"	f	class:TcpClientTaskPool
init	base/baseTcpClientTaskPool_1.cpp	/^bool TcpClientTaskPool::init( const DWORD preThreadSize )$/;"	f	class:TcpClientTaskPool
init	base/baseThreadManager.h	/^		bool init(const DWORD min = 1,const DWORD max = 1,const std::string name = "thread",void *param = NULL)$/;"	f	class:TaskThreadManager
init	orgainCode/ScenesServer.cpp	/^bool ScenesServer::init()$/;"	f	class:ScenesServer
init	orgainCode/SuperServer.cpp	/^bool SuperServer::init()$/;"	f	class:SuperServer
init	orgainCode/baseThreadManager.h	/^		bool init(const int min = 1,const int max = 1,const std::string name = "thread",void *param = NULL)$/;"	f	class:TaskThreadManager
init	orgainCode/scenesServer.cpp	/^bool ScenesServer::init()$/;"	f	class:ScenesServer
initGlobal	base/global.cpp	/^	void initGlobal()$/;"	f	namespace:Global
initGlobal	orgainCode/global.cpp	/^	void initGlobal()$/;"	f	namespace:Global
initGlobalVal	SuperServer/main.cpp	/^void initGlobalVal()$/;"	f
initHandle	base/baseSqlHandle.cpp	/^bool MysqlHandle::initHandle()$/;"	f	class:MysqlHandle
initMysql	base/baseSqlHandle.cpp	/^bool MysqlHandle::initMysql()$/;"	f	class:MysqlHandle
initParam	base/baseCheckConnectThread.cpp	/^void CheckConnectThread::initParam( void *param )$/;"	f	class:CheckConnectThread
initParam	base/baseCheckWaitThread.cpp	/^void CheckWaitThread::initParam( void *param )$/;"	f	class:CheckWaitThread
initParam	base/baseOkayThread.cpp	/^void OkayThread::initParam(void *param)$/;"	f	class:OkayThread
initParam	base/baseRecycleThread.cpp	/^void RecycleThread::initParam(void *param)$/;"	f	class:RecycleThread
initParam	base/baseSyncThread.cpp	/^void SyncThread::initParam(void *param)$/;"	f	class:SyncThread
initParam	base/baseTcpClientThread.cpp	/^void TcpClientTaskThread::initParam( void *param )$/;"	f	class:TcpClientTaskThread
initParam	base/baseThread.h	/^		virtual void initParam(void *arg)$/;"	f	class:Thread
initParam	base/baseVerifyThread.cpp	/^void VerifyThread::initParam(void *param)$/;"	f	class:VerifyThread
initParam	orgainCode/baseCheckConnectThread.cpp	/^void CheckConnectThread::initParam( void *param )$/;"	f	class:CheckConnectThread
initParam	orgainCode/baseCheckWaitThread.cpp	/^void CheckWaitThread::initParam( void *param )$/;"	f	class:CheckWaitThread
initParam	orgainCode/baseOkayThread.cpp	/^void OkayThread::initParam(void *param)$/;"	f	class:OkayThread
insert	base/baseEntry.h	/^	 	inline bool insert(const keyT &key,valueT &value)$/;"	f	class:LimitHash
installDatabase	sql/database.py	/^def installDatabase():$/;"	f
installNameDatabase	sql/database.py	/^def installNameDatabase():$/;"	f
instance	base/baseClass.h	/^		 static T *instance;$/;"	m	class:SingletonBase
instance	base/baseClass.h	/^template<typename T> T* SingletonBase<T,false>::instance = NULL;$/;"	m	class:SingletonBase
instance	base/baseClass.h	/^template<typename T> T* SingletonBase<T,true>::instance = NULL;$/;"	m	class:SingletonBase
ip	orgainCode/baseTcpClientTask.h	/^		const std::string ip;$/;"	m	class:TcpClientTaskBase
ip	protol/protolCmd.h	/^	char ip[MAX_IP_LENGTH];$/;"	m	struct:RequestStartServerCmd
ip	protol/protolCmd.h	/^	char ip[MAX_IP_LENGTH];$/;"	m	struct:ServerEntry
isAlive	base/baseThread.cpp	/^const bool Thread::isAlive() const$/;"	f	class:Thread
isEmpty	base/baseSqlRecord.h	/^		bool isEmpty()$/;"	f	class:Record
isFdsrAdd	base/baseTcpClientTask.h	/^		bool isFdsrAdd()$/;"	f	class:TcpClientTaskBase
isFdsrAdd	base/baseTcpTask.h	/^		bool isFdsrAdd() const$/;"	f	class:TcpTask
isFdsrAdd	orgainCode/baseTcpClientTask.h	/^		bool isFdsrAdd()$/;"	f	class:TcpClientTaskBase
isFinal	base/baseThread.cpp	/^const bool Thread::isFinal() const$/;"	f	class:Thread
isGM	base/global.cpp	/^	bool isGM( const DWORD charID )$/;"	f	namespace:Global
isGM	orgainCode/global.cpp	/^	bool isGM( const DWORD charID )$/;"	f	namespace:Global
isHighDelay	RecordServer/recordTimeTick.h	/^inline bool RecordTimeTick::isHighDelay()$/;"	f	class:RecordTimeTick
isHighDelay	ScenesServer/timeTick.h	/^inline bool SceneTimeTick::isHighDelay()$/;"	f	class:SceneTimeTick
isHighDelay	SessionServer/sessionTimeTick.h	/^inline bool SessionTimeTick::isHighDelay()$/;"	f	class:SessionTimeTick
isHighDelay	SuperServer/superTimeTick.h	/^inline bool SuperTimeTick::isHighDelay()$/;"	f	class:SuperTimeTick
isJoinable	base/baseThread.cpp	/^const bool Thread::isJoinable()const$/;"	f	class:Thread
isOkay	base/baseTcpClientTask.h	/^		bool isOkay() const$/;"	f	class:TcpClientTaskBase
isOkay	orgainCode/baseTcpClientTask.h	/^		bool isOkay() const$/;"	f	class:TcpClientTaskBase
isSetFlag	base/baseSocket.h	/^		inline bool isSetFlag(const DWORD flag) const$/;"	f	class:Socket
isTerminate	base/baseService.h	/^		bool isTerminate() const$/;"	f	class:Service
isTerminate	base/baseTcpClientTask.h	/^		bool isTerminate() const$/;"	f	class:TcpClientTaskBase
isTerminate	base/baseTcpTask.h	/^		bool isTerminate() const$/;"	f	class:TcpTask
isTerminate	orgainCode/baseTcpClientTask.h	/^		bool isTerminate() const$/;"	f	class:TcpClientTaskBase
isTerminateWait	base/baseTcpTask.h	/^		bool isTerminateWait()$/;"	f	class:TcpTask
isUnique	base/baseTcpTask.h	/^		bool isUnique() const$/;"	f	class:TcpTask
iter	base/baseEntry.h	/^		typedef typename HashMap::iterator iter;$/;"	t	class:LimitHash
join	base/baseThread.cpp	/^void Thread::join()$/;"	f	class:Thread
kdpfd	orgainCode/baseCheckWaitThread.h	/^		int kdpfd;$/;"	m	class:CheckWaitThread
keyEqual	base/baseProperty.h	/^		struct keyEqual : public std::binary_function<const std::string,const std::string,bool>$/;"	s	class:Property
keyEqual	orgainCode/baseProperty.h	/^		struct keyEqual : public std::binary_function<const std::string,const std::string>$/;"	s	class:Property
keyHash	base/baseProperty.h	/^		struct keyHash : public std::unary_function<const std::string,size_t>$/;"	s	class:Property
keyHash	orgainCode/baseProperty.h	/^		struct keyHash : public std::unary_function<const std::string,size_t>$/;"	s	class:Property
key_equal	base/baseEntry.h	/^ struct key_equal : public std::binary_function<keyT,keyT,bool>$/;"	s
leftMsec	base/baseTime.h	/^		inline QWORD leftMsec(const Time &cur)$/;"	f	class:Timer
leftMsec	orgainCode/baseTime.h	/^		inline QWORD leftMsec(const Time &cur)$/;"	f	class:Timer
leftSec	base/baseTime.h	/^		inline DWORD leftSec(const Time &cur)$/;"	f	class:Timer
leftSec	base/baseTime.h	/^		inline QWORD leftSec(const Time &cur)$/;"	f	class:Clocker
leftSec	orgainCode/baseTime.h	/^		inline DWORD leftSec(const Time &cur)$/;"	f	class:Timer
leftSec	orgainCode/baseTime.h	/^		inline QWORD leftSec(const Time &cur)$/;"	f	class:Clocker
lifeTime	orgainCode/baseTcpClientTask.h	/^		Time lifeTime;$/;"	m	class:TcpClientTaskBase
listAll	base/baseEntry.h	/^		void listAll()$/;"	f	class:EntryManager
listeningRecv	base/baseTcpClientBuffer.cpp	/^bool TcpClientBuffer::listeningRecv()$/;"	f	class:TcpClientBuffer
listeningRecv	base/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::listeningRecv(bool needRecv)$/;"	f	class:TcpClientTaskBase
listeningRecv	base/baseTcpTask.cpp	/^bool TcpTask::listeningRecv(bool needRecv)$/;"	f	class:TcpTask
listeningRecv	orgainCode/baseTcpClientBuffer.cpp	/^bool TcpClientBuffer::listeningRecv()$/;"	f	class:TcpClientBuffer
listeningSend	base/baseTcpClientBuffer.cpp	/^bool TcpClientBuffer::listeningSend()$/;"	f	class:TcpClientBuffer
listeningSend	base/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::listeningSend()$/;"	f	class:TcpClientTaskBase
listeningSend	base/baseTcpTask.cpp	/^bool TcpTask::listeningSend()$/;"	f	class:TcpTask
listeningSend	orgainCode/baseTcpClientBuffer.cpp	/^bool TcpClientBuffer::listeningSend()$/;"	f	class:TcpClientBuffer
lock	base/baseLock.h	/^		void lock()$/;"	f	class:Mutex
lock	orgainCode/superTask.h	/^		static RWLock lock;$/;"	m	class:SuperTask
log	base/baseLog.cpp	/^void Logger::log(const LogLevel level,const char * pattern,...)$/;"	f	class:Logger
logMutex	base/baseLog.h	/^		Mutex logMutex;$/;"	m	class:Logger
logger	base/global.cpp	/^	Logger *logger = NULL;$/;"	v
logger	orgainCode/global.cpp	/^	Logger *logger = NULL;$/;"	v
logva	base/baseLog.cpp	/^void Logger::logva(const LogLevel level,const char* pattern,va_list vp)$/;"	f	class:Logger
loop	base/baseService.cpp	/^void Service::loop()$/;"	f	class:Service
lower	base/global.cpp	/^	char lower( char value )$/;"	f	namespace:Global
lower	orgainCode/global.cpp	/^	char lower( char value )$/;"	f	namespace:Global
m_a	base/testAutoPtr.h	/^		int m_a;$/;"	m	class:TestAutoPtr
m_accountInfo	SuperServer/SuperServer.h	/^		std::map<DWORD,std::string> m_accountInfo;$/;"	m	class:SuperServer
m_accountInfo	orgainCode/SuperServer.h	/^		std::map<DWORD,std::string> m_accountInfo;$/;"	m	class:SuperServer
m_addr	base/baseSocket.h	/^		struct sockaddr_in m_addr;$/;"	m	class:Socket	typeref:struct:Socket::sockaddr_in
m_alive	base/baseThread.h	/^		volatile bool m_alive;$/;"	m	class:Thread
m_antiaddiceCheck	RecordServer/RecordServer.h	/^		bool m_antiaddiceCheck;$/;"	m	class:RecordServer
m_antiaddiceCheck	ScenesServer/scenesServer.h	/^		bool m_antiaddiceCheck;$/;"	m	class:ScenesServer
m_antiaddiceCheck	SessionServer/SessionServer.h	/^		bool m_antiaddiceCheck;$/;"	m	class:SessionServer
m_antiaddiceCheck	orgainCode/ScenesServer.h	/^		bool m_antiaddiceCheck;$/;"	m	class:ScenesServer
m_b	base/testAutoPtr.h	/^		int m_b;$/;"	m	class:TestAutoPtr
m_bitMask	base/baseSocket.h	/^		DWORD m_bitMask;$/;"	m	class:Socket
m_buffer	base/baseMsgContainer.h	/^		Type m_buffer;$/;"	m	class:ByteBuffer
m_bufferFlg	base/baseTcpClientBuffer.h	/^		volatile bool m_bufferFlg;$/;"	m	class:TcpClientBuffer
m_bufferQueue	base/baseSocket.h	/^		BufferCmdQueue m_bufferQueue;$/;"	m	class:Socket
m_buffered	base/baseTcpTask.h	/^		bool m_buffered;$/;"	m	class:TcpTask
m_buildTime	SuperServer/superTask.h	/^		DWORD m_buildTime;$/;"	m	class:SuperTask
m_buildTime	orgainCode/superTask.h	/^		DWORD m_buildTime;$/;"	m	class:SuperTask
m_checkConnectThread	base/baseTcpClientTaskPool.h	/^		TaskThreadManager<CheckConnectThread> m_checkConnectThread;$/;"	m	class:TcpClientTaskPool
m_checkSignal	base/baseTcpTask.h	/^		const bool m_checkSignal;$/;"	m	class:TcpTask
m_checkTimeout	base/baseTcpTask.h	/^		bool m_checkTimeout;$/;"	m	class:TcpTask
m_checkWaitThread	base/baseTcpClientTaskPool.h	/^		TaskThreadManager<CheckWaitThread> m_checkWaitThread;$/;"	m	class:TcpClientTaskPool
m_clientPool	SuperServer/SuperServer.h	/^		TcpClientTaskPool *m_clientPool;$/;"	m	class:SuperServer
m_clientPool	orgainCode/SuperServer.h	/^		TcpClientTaskPool *m_clientPool;$/;"	m	class:SuperServer
m_clientTaskThread	base/baseTcpClientTaskPool.h	/^		TaskThreadManager<TcpClientTaskThread> m_clientTaskThread;$/;"	m	class:TcpClientTaskPool
m_complete	base/baseThread.h	/^		volatile bool m_complete;$/;"	m	class:Thread
m_compress	base/baseTcpClient.h	/^		const bool m_compress;$/;"	m	class:TcpClientBase
m_compress	base/baseTcpClientTask.h	/^		const bool m_compress;$/;"	m	class:TcpClientTaskBase
m_cond	base/baseThread.h	/^		Condition m_cond;$/;"	m	class:Thread
m_count	base/baseSqlHandle.h	/^		DWORD m_count;$/;"	m	class:MysqlHandle
m_curPtr	base/baseMsgContainer.h	/^		DWORD m_curPtr;$/;"	m	class:ByteBuffer
m_currentCmd	base/baseSocket.h	/^		DWORD m_currentCmd;$/;"	m	class:Socket
m_dataVec	base/bitSet.h	/^		vector< ValueType > m_dataVec;$/;"	m	class:BitSet
m_day	base/baseLog.h	/^		int m_day;$/;"	m	class:Logger
m_deleteTime	base/baseSqlHandle.h	/^		Time m_deleteTime;$/;"	m	class:MysqlHandle
m_duduGameZone	SuperServer/SuperServer.h	/^		GameZone m_duduGameZone;$/;"	m	class:SuperServer
m_duduGameZone	orgainCode/SuperServer.h	/^		GameZone m_duduGameZone;$/;"	m	class:SuperServer
m_encQueue	base/baseSocket.h	/^		BufferCmdQueue m_encQueue;$/;"	m	class:Socket
m_epfds	base/baseCheckWaitThread.h	/^		EpollfdContainer m_epfds;$/;"	m	class:CheckWaitThread
m_epfds	base/baseTcpClientThread.h	/^		EpollfdContainer m_epfds;$/;"	m	class:TcpClientTaskThread
m_epfds	orgainCode/baseTcpClientThread.h	/^		epollfdContainer m_epfds;$/;"	m	class:TcpClientTaskThread
m_epollFdContainer	base/baseOkayThread.h	/^		EpollfdContainer m_epollFdContainer;$/;"	m	class:OkayThread
m_epollFdContainer	base/baseVerifyThread.h	/^		EpollfdContainer m_epollFdContainer;$/;"	m	class:VerifyThread
m_ev	base/baseSocket.h	/^		struct epoll_event m_ev;$/;"	m	class:Socket	typeref:struct:Socket::epoll_event
m_fdsradd	base/baseTcpClientTask.h	/^		bool m_fdsradd;$/;"	m	class:TcpClientTaskBase
m_fdsradd	base/baseTcpTask.h	/^		bool m_fdsradd;$/;"	m	class:TcpTask
m_file	base/baseLog.h	/^		std::string m_file;$/;"	m	class:Logger
m_fiveMin	RecordServer/recordTimeTick.h	/^		Timer m_fiveMin;$/;"	m	class:RecordTimeTick
m_fiveMin	ScenesServer/timeTick.h	/^		Timer m_fiveMin;$/;"	m	class:SceneTimeTick
m_fiveMin	SessionServer/sessionTimeTick.h	/^		Timer m_fiveMin;$/;"	m	class:SessionTimeTick
m_fiveMin	SuperServer/superTimeTick.h	/^		Timer m_fiveMin;$/;"	m	class:SuperTimeTick
m_fiveSec	RecordServer/recordTimeTick.h	/^		Timer m_fiveSec;$/;"	m	class:RecordTimeTick
m_fiveSec	ScenesServer/timeTick.h	/^		Timer m_fiveSec;$/;"	m	class:SceneTimeTick
m_fiveSec	SessionServer/sessionTimeTick.h	/^		Timer m_fiveSec;$/;"	m	class:SessionTimeTick
m_fiveSec	SuperServer/superTimeTick.h	/^		Timer m_fiveSec;$/;"	m	class:SuperTimeTick
m_fourClocker	RecordServer/recordTimeTick.h	/^		Clocker  m_fourClocker;$/;"	m	class:RecordTimeTick
m_fourClocker	ScenesServer/timeTick.h	/^		Clocker  m_fourClocker;$/;"	m	class:SceneTimeTick
m_fourClocker	SessionServer/sessionTimeTick.h	/^		Clocker  m_fourClocker;$/;"	m	class:SessionTimeTick
m_fourClocker	SuperServer/superTimeTick.h	/^		Clocker  m_fourClocker;$/;"	m	class:SuperTimeTick
m_frameTime	RecordServer/recordTimeTick.h	/^		QWORD m_frameTime;$/;"	m	class:RecordTimeTick
m_frameTime	ScenesServer/timeTick.h	/^		long m_frameTime;$/;"	m	class:SceneTimeTick
m_frameTime	SessionServer/sessionTimeTick.h	/^		QWORD m_frameTime;$/;"	m	class:SessionTimeTick
m_frameTime	SuperServer/superTimeTick.h	/^		QWORD m_frameTime;$/;"	m	class:SuperTimeTick
m_gameZone	SuperServer/SuperServer.h	/^		GameZone m_gameZone;$/;"	m	class:SuperServer
m_gameZone	base/baseSubService.h	/^		GameZone m_gameZone;$/;"	m	class:SubNetService
m_gameZone	orgainCode/SuperServer.h	/^		GameZone m_gameZone;$/;"	m	class:SuperServer
m_gameZoneStr	SuperServer/SuperServer.h	/^		char m_gameZoneStr[16];$/;"	m	class:SuperServer
m_gameZoneStr	orgainCode/SuperServer.h	/^		char m_gameZoneStr[16];$/;"	m	class:SuperServer
m_generation	base/baseSubService.h	/^		DWORD m_generation;$/;"	m	class:SubNetService
m_hasNotifyMe	SuperServer/superTask.h	/^		bool m_hasNotifyMe;$/;"	m	class:SuperTask
m_hasNotifyMeReturn	SuperServer/superTask.h	/^		bool m_hasNotifyMeReturn;$/;"	m	class:SuperTask
m_hasNotifyOther	SuperServer/superTask.h	/^		bool m_hasNotifyOther;$/;"	m	class:SuperTask
m_hashCode	base/baseSqlHandle.h	/^		DWORD m_hashCode;$/;"	m	class:MysqlHandle
m_insertTime	base/baseSqlHandle.h	/^		Time m_insertTime;$/;"	m	class:MysqlHandle
m_ip	SuperServer/SuperServer.h	/^		char m_ip[MAX_IP_LENGTH];$/;"	m	class:SuperServer
m_ip	SuperServer/superTask.h	/^		char m_ip[MAX_IP_LENGTH];$/;"	m	class:SuperTask
m_ip	base/baseSubService.h	/^		char m_ip[MAX_IP_LENGTH];$/;"	m	class:SubNetService
m_ip	base/baseTcpClient.h	/^		char m_ip[MAX_IP_LENGTH];$/;"	m	class:TcpClientBase
m_ip	base/baseTcpClientTask.h	/^		const std::string m_ip;$/;"	m	class:TcpClientTaskBase
m_ip	orgainCode/SuperServer.h	/^		char m_ip[MAX_IP_LENGTH];$/;"	m	class:SuperServer
m_joinable	base/baseThread.h	/^		bool m_joinable;$/;"	m	class:Thread
m_kdpfd	base/baseCheckWaitThread.h	/^		int m_kdpfd;$/;"	m	class:CheckWaitThread
m_kdpfd	base/baseOkayThread.h	/^		SDWORD m_kdpfd;$/;"	m	class:OkayThread
m_kdpfd	base/baseSocket.h	/^		SWORD m_kdpfd;$/;"	m	class:Socket
m_kdpfd	base/baseTcpClientThread.h	/^		int m_kdpfd;$/;"	m	class:TcpClientTaskThread
m_kdpfd	base/baseTcpService.h	/^		SDWORD m_kdpfd;$/;"	m	class:TcpService
m_kdpfd	base/baseVerifyThread.h	/^		SDWORD m_kdpfd;$/;"	m	class:VerifyThread
m_kdpfd	orgainCode/baseTcpClientThread.h	/^		int m_kdpfd;$/;"	m	class:TcpClientTaskThread
m_lastsql	base/baseSqlHandle.h	/^		std::string m_lastsql;$/;"	m	class:MysqlHandle
m_level	base/baseLog.h	/^		LogLevel m_level;$/;"	m	class:Logger
m_lifeTime	base/baseSqlHandle.h	/^		Time m_lifeTime;$/;"	m	class:MysqlHandle
m_lifeTime	base/baseTcpClientTask.h	/^		Time m_lifeTime;$/;"	m	class:TcpClientTaskBase
m_lifeTime	base/baseTcpTask.h	/^		Time m_lifeTime;$/;"	m	class:TcpTask
m_localAddr	base/baseSocket.h	/^		struct sockaddr_in m_localAddr;$/;"	m	class:Socket	typeref:struct:Socket::sockaddr_in
m_lock	base/baseSubService.h	/^		Mutex m_lock;$/;"	m	class:SubNetService
m_mSocket	base/baseTcpTask.h	/^		Socket m_mSocket;$/;"	m	class:TcpTask
m_mainLoop	base/baseTcpClientTask.h	/^		volatile bool m_mainLoop;$/;"	m	class:TcpClientTaskBase
m_maxConCnt	base/baseTcpClientTaskPool.h	/^		const DWORD m_maxConCnt;$/;"	m	class:TcpClientTaskPool
m_maxConnect	base/baseTaskPool.h	/^		const DWORD m_maxConnect;$/;"	m	class:TcpTaskPool
m_maxCount	base/baseThreadManager.h	/^		DWORD m_maxCount;$/;"	m	class:TaskThreadManager
m_maxFrameTime	RecordServer/recordTimeTick.h	/^		QWORD m_maxFrameTime;$/;"	m	class:RecordTimeTick
m_maxFrameTime	ScenesServer/timeTick.h	/^		long m_maxFrameTime;$/;"	m	class:SceneTimeTick
m_maxFrameTime	SessionServer/sessionTimeTick.h	/^		QWORD m_maxFrameTime;$/;"	m	class:SessionTimeTick
m_maxFrameTime	SuperServer/superTimeTick.h	/^		QWORD m_maxFrameTime;$/;"	m	class:SuperTimeTick
m_maxSize	base/baseMsgContainer.h	/^		DWORD m_maxSize;$/;"	m	class:ByteBuffer
m_milliSec	base/baseTime.h	/^		QWORD m_milliSec;$/;"	m	class:Timer
m_milliSec	orgainCode/baseTime.h	/^		QWORD m_milliSec;$/;"	m	class:Timer
m_minCount	base/baseThreadManager.h	/^		DWORD m_minCount;$/;"	m	class:TaskThreadManager
m_mlock	base/baseThread.h	/^		Mutex m_mlock;$/;"	m	class:Thread
m_monitorTimer	base/baseSubService.h	/^		Timer m_monitorTimer;$/;"	m	class:SubNetService
m_msec	base/baseTime.h	/^		QWORD m_msec;$/;"	m	class:Time
m_msec	orgainCode/baseTime.h	/^		QWORD m_msec;$/;"	m	class:Time
m_mutex	base/baseSocket.h	/^		Mutex m_mutex;$/;"	m	class:Socket
m_mysql	base/baseSqlHandle.h	/^		MYSQL *m_mysql;$/;"	m	class:MysqlHandle
m_name	base/baseLog.h	/^		std::string m_name;$/;"	m	class:Logger
m_name	base/baseTcpService.h	/^		char m_name[MAX_NAME_SIZE];$/;"	m	class:TcpService
m_netType	base/baseSubService.h	/^		WORD m_netType;$/;"	m	class:SubNetService
m_offPtr	base/baseMsgContainer.h	/^		DWORD m_offPtr;$/;"	m	class:ByteBuffer
m_okayThreads	base/baseTaskPool.h	/^		TaskThreadManager<OkayThread> m_okayThreads;$/;"	m	class:TcpTaskPool
m_oneClocker	RecordServer/recordTimeTick.h	/^		Clocker  m_oneClocker;$/;"	m	class:RecordTimeTick
m_oneClocker	ScenesServer/timeTick.h	/^		Clocker  m_oneClocker;$/;"	m	class:SceneTimeTick
m_oneClocker	SessionServer/sessionTimeTick.h	/^		Clocker  m_oneClocker;$/;"	m	class:SessionTimeTick
m_oneClocker	SuperServer/superTimeTick.h	/^		Clocker  m_oneClocker;$/;"	m	class:SuperTimeTick
m_oneMin	RecordServer/recordTimeTick.h	/^		Timer m_oneMin;$/;"	m	class:RecordTimeTick
m_oneMin	ScenesServer/timeTick.h	/^		Timer m_oneMin;$/;"	m	class:SceneTimeTick
m_oneMin	SessionServer/sessionTimeTick.h	/^		Timer m_oneMin;$/;"	m	class:SessionTimeTick
m_oneMin	SuperServer/superTimeTick.h	/^		Timer m_oneMin;$/;"	m	class:SuperTimeTick
m_oneQuarter	RecordServer/recordTimeTick.h	/^		Timer m_oneQuarter;$/;"	m	class:RecordTimeTick
m_oneQuarter	ScenesServer/timeTick.h	/^		Timer m_oneQuarter;$/;"	m	class:SceneTimeTick
m_oneQuarter	SessionServer/sessionTimeTick.h	/^		Timer m_oneQuarter;$/;"	m	class:SessionTimeTick
m_oneQuarter	SuperServer/superTimeTick.h	/^		Timer m_oneQuarter;$/;"	m	class:SuperTimeTick
m_oneSec	RecordServer/recordTimeTick.h	/^		Timer m_oneSec;$/;"	m	class:RecordTimeTick
m_oneSec	ScenesServer/timeTick.h	/^		Timer m_oneSec;$/;"	m	class:SceneTimeTick
m_oneSec	SessionServer/sessionTimeTick.h	/^		Timer m_oneSec;$/;"	m	class:SessionTimeTick
m_oneSec	SuperServer/superTimeTick.h	/^		Timer m_oneSec;$/;"	m	class:SuperTimeTick
m_outIP	SuperServer/SuperServer.h	/^		char m_outIP[MAX_IP_LENGTH];$/;"	m	class:SuperServer
m_outIP	SuperServer/superTask.h	/^		char m_outIP[MAX_IP_LENGTH];$/;"	m	class:SuperTask
m_outIP	base/baseSubService.h	/^		char m_outIP[MAX_IP_LENGTH];$/;"	m	class:SubNetService
m_outIP	orgainCode/SuperServer.h	/^		char m_outIP[MAX_IP_LENGTH];$/;"	m	class:SuperServer
m_outPort	SuperServer/SuperServer.h	/^		WORD m_outPort;$/;"	m	class:SuperServer
m_outPort	SuperServer/superTask.h	/^		WORD m_outPort;$/;"	m	class:SuperTask
m_outPort	base/baseSubService.h	/^		WORD m_outPort;$/;"	m	class:SubNetService
m_outPort	orgainCode/SuperServer.h	/^		WORD m_outPort;$/;"	m	class:SuperServer
m_pSocket	base/baseTcpClient.h	/^		Socket *m_pSocket;$/;"	m	class:TcpClientBase
m_pSocket	base/baseTcpClientTask.h	/^		Socket *m_pSocket;$/;"	m	class:TcpClientTaskBase
m_pool	base/baseCheckConnectThread.h	/^		TcpClientTaskPool *m_pool;$/;"	m	class:CheckConnectThread
m_pool	base/baseCheckWaitThread.h	/^		TcpClientTaskPool *m_pool;$/;"	m	class:CheckWaitThread
m_pool	base/baseOkayThread.h	/^		TcpTaskPool *m_pool;$/;"	m	class:OkayThread
m_pool	base/baseSqlHandle.h	/^		MysqlPool *m_pool;$/;"	m	class:MysqlHandle
m_pool	base/baseSyncThread.h	/^		TcpTaskPool *m_pool;$/;"	m	class:SyncThread
m_pool	base/baseTcpClientThread.h	/^		TcpClientTaskPool *m_pool;$/;"	m	class:TcpClientTaskThread
m_pool	base/baseVerifyThread.h	/^		TcpTaskPool *m_pool;$/;"	m	class:VerifyThread
m_pool	orgainCode/baseTcpClientThread.h	/^		TcpClientTaskPool *m_pool;$/;"	m	class:TcpClientTaskThread
m_port	SuperServer/SuperServer.h	/^		WORD m_port;$/;"	m	class:SuperServer
m_port	SuperServer/superTask.h	/^		WORD m_port;$/;"	m	class:SuperTask
m_port	base/baseSubService.h	/^		WORD m_port;$/;"	m	class:SubNetService
m_port	base/baseTcpClient.h	/^		WORD m_port;$/;"	m	class:TcpClientBase
m_port	base/baseTcpClientTask.h	/^		const DWORD m_port;$/;"	m	class:TcpClientTaskBase
m_port	orgainCode/SuperServer.h	/^		WORD m_port;$/;"	m	class:SuperServer
m_protocol	SuperServer/superTask.h	/^		DWORD m_protocol;$/;"	m	class:SuperTask
m_protocol	orgainCode/superTask.h	/^		DWORD m_protocol;$/;"	m	class:SuperTask
m_rdMsec	base/baseSocket.h	/^		DWORD m_rdMsec;$/;"	m	class:Socket
m_reConnect	base/baseTcpClientTask.h	/^		const bool m_reConnect;$/;"	m	class:TcpClientTaskBase
m_reconnect	base/baseTcpClient.h	/^		bool m_reconnect;$/;"	m	class:TcpClientBase
m_recvQueue	base/baseSocket.h	/^		BufferCmdQueue m_recvQueue;$/;"	m	class:Socket
m_recvRawSize	base/baseSocket.h	/^		DWORD m_recvRawSize;$/;"	m	class:Socket
m_recycleState	SuperServer/superTask.h	/^		Recycle_State m_recycleState;$/;"	m	class:SuperTask
m_recycleState	orgainCode/superTask.h	/^		Recycle_State m_recycleState;$/;"	m	class:SuperTask
m_recycleThreads	base/baseTaskPool.h	/^		TaskThreadManager<RecycleThread> m_recycleThreads;$/;"	m	class:TcpTaskPool
m_recycleTime	SuperServer/superTask.h	/^		DWORD m_recycleTime;$/;"	m	class:SuperTask
m_run	base/baseThread.h	/^		volatile bool m_run;$/;"	m	class:Thread
m_rwLock	base/baseTaskManager.h	/^		RWLock m_rwLock;$/;"	m	class:TaskManager
m_rwlock	base/baseSqlHandle.h	/^		RWLock m_rwlock;$/;"	m	class:MysqlHandleManager
m_selectTime	base/baseSqlHandle.h	/^		Time m_selectTime;$/;"	m	class:MysqlHandle
m_sendQueue	base/baseSocket.h	/^		BufferCmdQueue m_sendQueue;$/;"	m	class:Socket
m_sequenceTimer	SuperServer/superTask.h	/^		Timer m_sequenceTimer;$/;"	m	class:SuperTask
m_serialNum	SuperServer/SuperServer.h	/^		DWORD m_serialNum;$/;"	m	class:SuperServer
m_serialNum	orgainCode/SuperServer.h	/^		DWORD m_serialNum;$/;"	m	class:SuperServer
m_serverID	SuperServer/SuperServer.h	/^		WORD m_serverID;$/;"	m	class:SuperServer
m_serverID	base/baseSubService.h	/^		WORD m_serverID;$/;"	m	class:SubNetService
m_serverID	base/baseTcpClient.h	/^		DWORD m_serverID;$/;"	m	class:TcpClientBase
m_serverID	orgainCode/SuperServer.h	/^		WORD m_serverID;$/;"	m	class:SuperServer
m_serverList	base/baseSubService.h	/^		std::deque<ServerEntry> m_serverList;$/;"	m	class:SubNetService
m_serverName	base/baseSubService.h	/^		char m_serverName[MAX_NAMESIZE];$/;"	m	class:SubNetService
m_serverReturnSize	SuperServer/superTask.h	/^		DWORD m_serverReturnSize;$/;"	m	class:SuperTask
m_serverSize	SuperServer/superTask.h	/^		DWORD m_serverSize;$/;"	m	class:SuperTask
m_serverType	SuperServer/SuperServer.h	/^		WORD m_serverType;$/;"	m	class:SuperServer
m_serverType	base/baseSubService.h	/^		DWORD m_serverType;$/;"	m	class:SubNetService
m_serverType	orgainCode/SuperServer.h	/^		WORD m_serverType;$/;"	m	class:SuperServer
m_size	base/bitSet.h	/^		size_t m_size;$/;"	m	class:BitSet
m_sock	base/baseSocket.h	/^		SWORD m_sock;$/;"	m	class:Socket
m_sock	base/baseTcpService.h	/^		SDWORD m_sock;$/;"	m	class:TcpService
m_sockChange	base/baseSocket.h	/^		SWORD m_sockChange;$/;"	m	class:Socket
m_startUp	base/baseSubService.h	/^		bool m_startUp;$/;"	m	class:SubNetService
m_state	base/baseSqlHandle.h	/^		HandleState m_state;$/;"	m	class:MysqlHandle
m_state	base/baseTcpClientTask.h	/^		volatile ConnectState m_state;$/;"	m	class:TcpClientTaskBase
m_state	base/baseTcpTask.h	/^		TcpTask_State m_state;$/;"	m	class:TcpTask
m_superClient	base/baseSubService.h	/^		SuperClient *m_superClient;$/;"	m	class:SubNetService
m_superIP	base/baseSubService.h	/^		char m_superIP[MAX_IP_LENGTH];$/;"	m	class:SubNetService
m_superPort	base/baseSubService.h	/^		WORD m_superPort;$/;"	m	class:SubNetService
m_svnVersion	SuperServer/superTask.h	/^		DWORD m_svnVersion;$/;"	m	class:SuperTask
m_svnVersion	orgainCode/superTask.h	/^		DWORD m_svnVersion;$/;"	m	class:SuperTask
m_syncThreads	base/baseTaskPool.h	/^		TaskThreadManager<SyncThread> m_syncThreads;$/;"	m	class:TcpTaskPool
m_taskContainer	base/baseCheckConnectThread.h	/^		TcpClientTaskBaseContainer m_taskContainer;$/;"	m	class:CheckConnectThread
m_taskContainer	base/baseCheckWaitThread.h	/^		TcpClientTaskBaseContainer m_taskContainer;$/;"	m	class:CheckWaitThread
m_taskContainer	base/baseOkayThread.h	/^		TcpTaskContainer m_taskContainer;$/;"	m	class:OkayThread
m_taskContainer	base/baseSyncThread.h	/^		TcpTaskContainer m_taskContainer;$/;"	m	class:SyncThread
m_taskContainer	base/baseTcpClientThread.h	/^		TcpClientTaskBaseContainer m_taskContainer;$/;"	m	class:TcpClientTaskThread
m_taskContainer	base/baseVerifyThread.h	/^		TcpTaskContainer m_taskContainer;$/;"	m	class:VerifyThread
m_taskCount	base/baseCheckWaitThread.h	/^		TcpClientTaskBaseContainer::size_type m_taskCount;$/;"	m	class:CheckWaitThread
m_taskCount	base/baseOkayThread.h	/^		TcpTaskContainer::size_type m_taskCount;$/;"	m	class:OkayThread
m_taskCount	base/baseTcpClientThread.h	/^		TcpClientTaskBaseContainer::size_type m_taskCount;$/;"	m	class:TcpClientTaskThread
m_taskCount	base/baseVerifyThread.h	/^		TcpTaskContainer::size_type m_taskCount;$/;"	m	class:VerifyThread
m_taskPool	base/baseNetService.h	/^		TcpTaskPool *m_taskPool;$/;"	m	class:NetService
m_taskType	base/baseTcpClientTask.h	/^		DWORD m_taskType;$/;"	m	class:TcpClientTaskBase
m_taskType	base/baseTcpTask.h	/^		DWORD m_taskType;$/;"	m	class:TcpTask
m_tasks	orgainCode/baseTcpClientThread.h	/^		TcpClientTaskBaseContainer m_tasks;$/;"	m	class:TcpClientTaskThread
m_tcpService	base/baseNetService.h	/^		TcpService *m_tcpService;$/;"	m	class:NetService
m_tenSec	RecordServer/recordTimeTick.h	/^		Timer m_tenSec;$/;"	m	class:RecordTimeTick
m_tenSec	ScenesServer/timeTick.h	/^		Timer m_tenSec;$/;"	m	class:SceneTimeTick
m_tenSec	SessionServer/sessionTimeTick.h	/^		Timer m_tenSec;$/;"	m	class:SessionTimeTick
m_tenSec	SuperServer/superTimeTick.h	/^		Timer m_tenSec;$/;"	m	class:SuperTimeTick
m_terminate	base/baseService.h	/^		bool m_terminate;$/;"	m	class:Service
m_terminate	base/baseTcpClientTask.h	/^		TerminateMethod m_terminate;$/;"	m	class:TcpClientTaskBase
m_terminate	base/baseTcpTask.h	/^		TerminateMethod m_terminate;$/;"	m	class:TcpTask
m_terminateWait	base/baseTcpTask.h	/^		bool m_terminateWait;$/;"	m	class:TcpTask
m_thread	base/baseThread.h	/^		pthread_t m_thread;$/;"	m	class:Thread
m_tick	base/baseTcpClientTask.h	/^		bool m_tick;$/;"	m	class:TcpClientTaskBase
m_tick	base/baseTcpTask.h	/^		bool m_tick;$/;"	m	class:TcpTask
m_tickTimer	base/baseTcpClientTask.h	/^		Timer m_tickTimer;$/;"	m	class:TcpClientTaskBase
m_tickTimer	base/baseTcpTask.h	/^		Timer m_tickTimer;$/;"	m	class:TcpTask
m_timeSpec	base/baseTime.h	/^		struct timespec m_timeSpec;$/;"	m	class:Time	typeref:struct:Time::timespec
m_timeSpec	orgainCode/baseTime.h	/^		struct timespec m_timeSpec;$/;"	m	class:Time	typeref:struct:Time::timespec
m_timeoutTime	base/baseSqlHandle.h	/^ 		DWORD m_timeoutTime;$/;"	m	class:MysqlHandle
m_timer	base/baseTime.h	/^		Time m_timer;$/;"	m	class:Timer
m_timer	orgainCode/baseTime.h	/^		Time m_timer;$/;"	m	class:Timer
m_tmOk	base/baseTime.h	/^		bool m_tmOk;$/;"	m	class:Time
m_tmOk	orgainCode/baseTime.h	/^		bool m_tmOk;$/;"	m	class:Time
m_uniqueVerified	base/baseTcpTask.h	/^		bool m_uniqueVerified;$/;"	m	class:TcpTask
m_updateTime	base/baseSqlHandle.h	/^		Time m_updateTime;$/;"	m	class:MysqlHandle
m_url	base/baseSqlHandle.h	/^		const MysqlUrl *m_url;$/;"	m	class:MysqlHandle
m_useTime	base/baseSqlHandle.h	/^		Time m_useTime;$/;"	m	class:MysqlHandle
m_usleepTime	base/baseTcpClientBuffer.h	/^		QWORD m_usleepTime;$/;"	m	class:TcpClientBuffer
m_usleepTime	base/baseTcpClientTaskPool.h	/^		QWORD m_usleepTime;$/;"	m	class:TcpClientTaskPool
m_verify	SuperServer/superTask.h	/^		bool m_verify;$/;"	m	class:SuperTask
m_verify	base/baseSuperClient.h	/^		bool m_verify;$/;"	m	class:SuperClient
m_verify	orgainCode/superTask.h	/^		bool m_verify;$/;"	m	class:SuperTask
m_verifyState	base/baseTcpTask.h	/^		SWORD m_verifyState;$/;"	m	class:TcpTask
m_verifyThreads	base/baseTaskPool.h	/^		TaskThreadManager<VerifyThread> m_verifyThreads;$/;"	m	class:TcpTaskPool
m_wrMsec	base/baseSocket.h	/^		DWORD m_wrMsec;$/;"	m	class:Socket
m_zeroClocker	RecordServer/recordTimeTick.h	/^		Clocker  m_zeroClocker;$/;"	m	class:RecordTimeTick
m_zeroClocker	ScenesServer/timeTick.h	/^		Clocker  m_zeroClocker;$/;"	m	class:SceneTimeTick
m_zeroClocker	SessionServer/sessionTimeTick.h	/^		Clocker  m_zeroClocker;$/;"	m	class:SessionTimeTick
m_zeroClocker	SuperServer/superTimeTick.h	/^		Clocker  m_zeroClocker;$/;"	m	class:SuperTimeTick
m_zoneInfo	base/baseSubService.h	/^		ZoneInfoMap m_zoneInfo;$/;"	m	class:SubNetService
m_zoneInfoBuff	SuperServer/SuperServer.h	/^		char m_zoneInfoBuff[Socket::s_maxDataSize];$/;"	m	class:SuperServer
m_zoneInfoBuff	orgainCode/SuperServer.h	/^		char m_zoneInfoBuff[Socket::MAX_DATASIZE];$/;"	m	class:SuperServer
m_zoneInfoCmd	orgainCode/SuperServer.h	/^		Cmd::Chat::stZoneInfoListLoginChatCmd *m_zoneInfoCmd;$/;"	m	class:SuperServer
m_zoneName	SuperServer/SuperServer.h	/^		std::string m_zoneName;$/;"	m	class:SuperServer
m_zoneName	base/baseSubService.h	/^		std::string m_zoneName;$/;"	m	class:SubNetService
m_zoneName	orgainCode/SuperServer.h	/^		std::string m_zoneName;$/;"	m	class:SuperServer
main	RecordServer/RecordServer.cpp	/^int main( int argc,char **argv )$/;"	f
main	ScenesServer/scenesServer.cpp	/^int main( int argc,char **argv )$/;"	f
main	SessionServer/SessionServer.cpp	/^int main( int argc,char **argv )$/;"	f
main	SuperServer/main.cpp	/^int main()$/;"	f
main	base/main.cpp	/^int main()$/;"	f
main	common/main.cpp	/^int main()$/;"	f
main	orgainCode/ScenesServer.cpp	/^int main( int argc,char **argv )$/;"	f
main	orgainCode/scenesServer.cpp	/^int main( int argc,char **argv )$/;"	f
main	protol/main.cpp	/^int main()$/;"	f
mainloop	orgainCode/baseTcpClientTask.h	/^		volatile bool mainloop;$/;"	m	class:TcpClientTaskBase
mask	base/baseSqlFiled.h	/^		DWORD mask;$/;"	m	struct:Filed
maxConns	orgainCode/baseCheckConnectThread.cpp	/^int TcpClientTaskThread::maxConns = 20;$/;"	m	class:TcpClientTaskThread	file:
maxConns	orgainCode/baseCheckConnectThread.h	/^		static const int maxConns = 4096;$/;"	m	class:CheckConnectThread
maxConns	orgainCode/baseCheckWaitThread.h	/^		static const int maxConns = 4096;$/;"	m	class:CheckWaitThread
maxSize	base/baseMsgContainer.h	/^		inline const DWORD maxSize() const$/;"	f	class:ByteBuffer
maxTaskSize	base/baseCheckConnectThread.cpp	/^int CheckConnectThread::maxTaskSize() const$/;"	f	class:CheckConnectThread
maxTaskSize	base/baseCheckWaitThread.cpp	/^int CheckWaitThread::maxTaskSize() const$/;"	f	class:CheckWaitThread
maxTaskSize	base/baseOkayThread.cpp	/^DWORD OkayThread::maxTaskSize() const$/;"	f	class:OkayThread
maxTaskSize	base/baseRecycleThread.cpp	/^int RecycleThread::maxTaskSize() const$/;"	f	class:RecycleThread
maxTaskSize	base/baseSyncThread.cpp	/^DWORD SyncThread::maxTaskSize() const$/;"	f	class:SyncThread
maxTaskSize	base/baseTcpClientThread.cpp	/^int TcpClientTaskThread::maxTaskSize() const$/;"	f	class:TcpClientTaskThread
maxTaskSize	base/baseVerifyThread.cpp	/^int VerifyThread::maxTaskSize() const$/;"	f	class:VerifyThread
maxTaskSize	orgainCode/baseCheckConnectThread.cpp	/^int CheckConnectThread::maxTaskSize() const$/;"	f	class:CheckConnectThread
maxTaskSize	orgainCode/baseCheckWaitThread.cpp	/^int CheckWaitThread::maxTaskSize() const$/;"	f	class:CheckWaitThread
maxTaskSize	orgainCode/baseOkayThread.cpp	/^DWORD OkayThread::maxTaskSize() const$/;"	f	class:OkayThread
max_count	orgainCode/baseThreadManager.h	/^		int max_count;$/;"	m	class:TaskThreadManager
max_size	base/baseMsgContainer.h	/^		DWORD max_size;$/;"	m	class:CmdBuffer_wrapper
max_task_size	base/baseRecycleThread.h	/^		static const int max_task_size = 65534;$/;"	m	class:RecycleThread
mhm	base/baseSqlPool.h	/^		std::vector<MysqlHandleManager*> mhm;$/;"	m	class:MysqlPool
min_count	orgainCode/baseThreadManager.h	/^		int min_count;$/;"	m	class:TaskThreadManager
mlock	base/baseTaskContainer.h	/^		Mutex mlock;$/;"	m	class:TaskQueue
msec	base/baseTime.h	/^		DWORD msec() const$/;"	f	class:RTime
msec	base/baseTime.h	/^		inline QWORD msec() const$/;"	f	class:Time
msec	orgainCode/baseTime.h	/^		DWORD msec() const$/;"	f	class:RTime
msec	orgainCode/baseTime.h	/^		inline QWORD msec() const$/;"	f	class:Time
msecs	base/baseTime.h	/^		QWORD msecs() const$/;"	f	class:RTime
msecs	orgainCode/baseTime.h	/^		QWORD msecs() const$/;"	f	class:RTime
msgParse	SuperServer/superTask.cpp	/^bool SuperTask::msgParse(const Cmd::NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SuperTask
msgParse	base/baseSuperClient.cpp	/^bool SuperClient::msgParse(const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:SuperClient
msgParse	orgainCode/baseSuperClient.cpp	/^bool SuperClient::msgParse(const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:SuperClient
msgParse	orgainCode/superTask.cpp	/^bool SuperTask::msgParse(const Cmd::NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SuperTask
msgParseForward	SuperServer/superTask.cpp	/^bool SuperTask::msgParseForward(const Cmd::NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SuperTask
msgParseForward	base/baseSuperClient.cpp	/^bool SuperClient::msgParseForward(const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:SuperClient
msgParseForward	orgainCode/baseSuperClient.cpp	/^bool SuperClient::msgParseForward(const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:SuperClient
msgParseForward	orgainCode/superTask.cpp	/^bool SuperTask::msgParseForward(const Cmd::NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SuperTask
msgParseStart	SuperServer/superTask.cpp	/^bool SuperTask::msgParseStart(const Cmd::NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SuperTask
msgParseStart	base/baseSuperClient.cpp	/^bool SuperClient::msgParseStart(const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:SuperClient
msgParseStart	orgainCode/baseSuperClient.cpp	/^bool SuperClient::msgParseStart(const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:SuperClient
msgParseStart	orgainCode/superTask.cpp	/^bool SuperTask::msgParseStart(const Cmd::NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:SuperTask
msgParse_InfoServer	RecordServer/RecordServer.cpp	/^bool RecordServer::msgParse_InfoServer( const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:RecordServer
msgParse_InfoServer	ScenesServer/scenesServer.cpp	/^bool ScenesServer::msgParse_InfoServer( const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:ScenesServer
msgParse_InfoServer	SessionServer/SessionServer.cpp	/^bool SessionServer::msgParse_InfoServer( const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:SessionServer
msgParse_InfoServer	orgainCode/ScenesServer.cpp	/^bool ScenesServer::msgParse_InfoServer( const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:ScenesServer
msgParse_InfoServer	orgainCode/scenesServer.cpp	/^bool ScenesServer::msgParse_InfoServer( const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:ScenesServer
msgParse_SuperService	RecordServer/RecordServer.cpp	/^bool RecordServer::msgParse_SuperService( const Cmd::NullCmd *nullCmd,const DWORD cmdLen )$/;"	f	class:RecordServer
msgParse_SuperService	ScenesServer/scenesServer.cpp	/^bool ScenesServer::msgParse_SuperService( const Cmd::NullCmd *nullCmd,const DWORD cmdLen )$/;"	f	class:ScenesServer
msgParse_SuperService	SessionServer/SessionServer.cpp	/^bool SessionServer::msgParse_SuperService( const Cmd::NullCmd *nullCmd,const DWORD cmdLen )$/;"	f	class:SessionServer
msgParse_SuperService	orgainCode/ScenesServer.cpp	/^bool ScenesServer::msgParse_SuperService( const Cmd::NullCmd *nullCmd,const DWORD cmdLen )$/;"	f	class:ScenesServer
msgParse_SuperService	orgainCode/scenesServer.cpp	/^bool ScenesServer::msgParse_SuperService( const Cmd::NullCmd *nullCmd,const DWORD cmdLen )$/;"	f	class:ScenesServer
msleep	base/baseThread.cpp	/^void Thread::msleep(const SQWORD mills)$/;"	f	class:Thread
mum	base/baseSqlPool.h	/^		MysqlUrlManager mum;$/;"	m	class:MysqlPool
mutex	base/baseLock.h	/^		pthread_mutex_t mutex;$/;"	m	class:Mutex
my_timesync	base/baseTime.h	/^		SQWORD my_timesync;$/;"	m	class:Clocker
my_timesync	orgainCode/baseTime.h	/^		SQWORD my_timesync;$/;"	m	class:Clocker
name	base/baseEntry.h	/^		char name[MAX_NAME_SIZE];$/;"	m	class:Entry
name	protol/protolCmd.h	/^	char name[MAX_NAMESIZE];$/;"	m	struct:ServerEntry
name	protol/protolCmd.h	/^	char name[MAX_NAMESIZE];$/;"	m	struct:ServerTypeStruct
needReConn	orgainCode/baseTcpClientTask.h	/^		bool needReConn()$/;"	f	class:TcpClientTaskBase
needReConnect	base/baseTcpClientTask.h	/^		bool needReConnect()$/;"	f	class:TcpClientTaskBase
netType	protol/protolCmd.h	/^	WORD netType;$/;"	m	struct:ResponseStartServerCmd
netType	protol/protolCmd.h	/^	WORD netType;$/;"	m	struct:ServerEntry
newInstance	base/baseClass.h	/^		static void newInstance()$/;"	f	class:SingletonBase
newTcpTask	RecordServer/RecordServer.cpp	/^void RecordServer::newTcpTask( const int sock,const struct sockaddr_in *addr )$/;"	f	class:RecordServer
newTcpTask	ScenesServer/scenesServer.cpp	/^void ScenesServer::newTcpTask( const int sock,const struct sockaddr_in *addr )$/;"	f	class:ScenesServer
newTcpTask	SessionServer/SessionServer.cpp	/^void SessionServer::newTcpTask( const int sock,const struct sockaddr_in *addr )$/;"	f	class:SessionServer
newTcpTask	SuperServer/SuperServer.cpp	/^void SuperServer::newTcpTask(const SDWORD sock,const struct sockaddr_in *addr)$/;"	f	class:SuperServer
newTcpTask	orgainCode/ScenesServer.cpp	/^void ScenesServer::newTcpTask( const int sock,const struct sockaddr_in *addr )$/;"	f	class:ScenesServer
newTcpTask	orgainCode/SuperServer.cpp	/^void SuperServer::newTcpTask( const int sock,const struct sockaddr_in *addr )$/;"	f	class:SuperServer
newTcpTask	orgainCode/scenesServer.cpp	/^void ScenesServer::newTcpTask( const int sock,const struct sockaddr_in *addr )$/;"	f	class:ScenesServer
next	base/baseTime.h	/^		void next (const Time &cur)$/;"	f	class:Clocker
next	base/baseTime.h	/^		void next(const Time &cur)$/;"	f	class:Timer
next	base/baseTime.h	/^		void next(const Time &cur,const QWORD delay)$/;"	f	class:Timer
next	orgainCode/baseTime.h	/^		void next (const Time &cur)$/;"	f	class:Clocker
next	orgainCode/baseTime.h	/^		void next(const Time &cur)$/;"	f	class:Timer
next	orgainCode/baseTime.h	/^		void next(const Time &cur,const QWORD delay)$/;"	f	class:Timer
notifyMe	SuperServer/superTask.cpp	/^bool SuperTask::notifyMe()$/;"	f	class:SuperTask
notifyMe	orgainCode/superTask.cpp	/^bool SuperTask::notifyMe()$/;"	f	class:SuperTask
notifyMeReturnOK	SuperServer/superTask.h	/^		bool notifyMeReturnOK()$/;"	f	class:SuperTask
notifyOther	SuperServer/superTask.cpp	/^bool SuperTask::notifyOther()$/;"	f	class:SuperTask
notifyOther	orgainCode/superTask.cpp	/^bool SuperTask::notifyOther()$/;"	f	class:SuperTask
notifyReturn	SuperServer/superTask.h	/^		void notifyReturn()$/;"	f	class:SuperTask
notifyReturnOK	SuperServer/superTask.h	/^		bool notifyReturnOK()$/;"	f	class:SuperTask
notifyReturnOK	orgainCode/superTask.h	/^		bool notifyReturnOK()$/;"	f	class:SuperTask
now	base/baseTime.h	/^		void now()$/;"	f	class:RTime
now	base/baseTime.h	/^		void now()$/;"	f	class:Time
now	orgainCode/baseTime.h	/^		void now()$/;"	f	class:RTime
now	orgainCode/baseTime.h	/^		void now()$/;"	f	class:Time
nowByDelay	base/baseTime.h	/^		void nowByDelay(int delay)$/;"	f	class:RTime
nowByDelay	orgainCode/baseTime.h	/^		void nowByDelay(int delay)$/;"	f	class:RTime
object	RecordServer/Makefile	/^object = $(patsubst %.cpp,%.o,$(src))$/;"	m
object	ScenesServer/Makefile	/^object = $(patsubst %.cpp,%.o,$(src))$/;"	m
object	SessionServer/Makefile	/^object = $(patsubst %.cpp,%.o,$(src))$/;"	m
object	SuperServer/Makefile	/^object = $(patsubst %.cpp,%.o,$(src))$/;"	m
object	base/Makefile	/^object = $(patsubst %.cpp,%.o,$(src))$/;"	m
object	common/Makefile	/^object = $(patsubst %.cpp,%.o,$(src))$/;"	m
object	protol/Makefile	/^object = $(patsubst %.cpp,%.o,$(src))$/;"	m
okay	orgainCode/baseTcpClientTask.h	/^			okay = 2,$/;"	e	enum:TcpClientTaskBase::ConnState
onReconnect	base/baseTcpClientTask.cpp	/^void TcpClientTaskBase::onReconnect()$/;"	f	class:TcpClientTaskBase
onReconnect	orgainCode/baseTcpClientTask.cpp	/^void TcpClientTaskBase::onReconnect()$/;"	f	class:TcpClientTaskBase
oneHour	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::oneHour()$/;"	f	class:RecordTimeTick
oneHour	ScenesServer/timeTick.cpp	/^void SceneTimeTick::oneHour()$/;"	f	class:SceneTimeTick
oneHour	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::oneHour()$/;"	f	class:SessionTimeTick
oneHour	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::oneHour()$/;"	f	class:SuperTimeTick
oneHour	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::oneHour()$/;"	f	class:SuperTimeTick
oneMin	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::oneMin()$/;"	f	class:RecordTimeTick
oneMin	ScenesServer/timeTick.cpp	/^void SceneTimeTick::oneMin()$/;"	f	class:SceneTimeTick
oneMin	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::oneMin()$/;"	f	class:SessionTimeTick
oneMin	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::oneMin()$/;"	f	class:SuperTimeTick
oneMin	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::oneMin()$/;"	f	class:SuperTimeTick
oneQuarter	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::oneQuarter()$/;"	f	class:RecordTimeTick
oneQuarter	ScenesServer/timeTick.cpp	/^void SceneTimeTick::oneQuarter()$/;"	f	class:SceneTimeTick
oneQuarter	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::oneQuarter()$/;"	f	class:SessionTimeTick
oneQuarter	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::oneQuarter()$/;"	f	class:SuperTimeTick
oneQuarter	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::oneQuarter()$/;"	f	class:SuperTimeTick
oneSec	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::oneSec()$/;"	f	class:RecordTimeTick
oneSec	ScenesServer/timeTick.cpp	/^void SceneTimeTick::oneSec()$/;"	f	class:SceneTimeTick
oneSec	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::oneSec()$/;"	f	class:SessionTimeTick
oneSec	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::oneSec()$/;"	f	class:SuperTimeTick
oneSec	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::oneSec()$/;"	f	class:SuperTimeTick
operator ()	base/autoLifeHook.h	/^			void operator() ( AutoLifeHook *ptr ){}$/;"	f	struct:AutoLifeHook::Done
operator ()	base/baseEntry.h	/^inline bool key_equal<DWORD>::operator()(const DWORD s1,const DWORD s2) const$/;"	f	class:key_equal
operator ()	base/baseEntry.h	/^inline bool key_equal<const char *>::operator()(const char * s1,const char * s2) const$/;"	f	class:key_equal
operator ()	base/baseProperty.h	/^			bool operator() ( const std::string &str1,const std::string &str2 ) const$/;"	f	struct:Property::keyEqual
operator ()	base/baseProperty.h	/^			size_t operator() ( const std::string &inst ) const$/;"	f	struct:Property::keyHash
operator ()	base/baseTime.h	/^		inline bool operator() (const Time &cur)$/;"	f	class:Clocker
operator ()	base/baseTime.h	/^		inline bool operator() (const Time &cur)$/;"	f	class:Timer
operator ()	orgainCode/baseProperty.h	/^			bool operator() ( const std::string &s1,const std::string &s2 ) const$/;"	f	struct:Property::keyEqual
operator ()	orgainCode/baseProperty.h	/^			size_t operator() ( const std::string &inst ) const$/;"	f	struct:Property::keyHash
operator ()	orgainCode/baseTime.h	/^		inline bool operator() (const Time &cur)$/;"	f	class:Clocker
operator ()	orgainCode/baseTime.h	/^		inline bool operator() (const Time &cur)$/;"	f	class:Timer
operator +	base/baseTime.h	/^		const RTime& operator+ (const RTime &rt)$/;"	f	class:RTime
operator +	orgainCode/baseTime.h	/^		const RTime& operator+ (const RTime &rt)$/;"	f	class:RTime
operator -	base/baseTime.h	/^		const RTime& operator- (const RTime &rt)$/;"	f	class:RTime
operator -	orgainCode/baseTime.h	/^		const RTime& operator- (const RTime &rt)$/;"	f	class:RTime
operator <	base/baseTime.h	/^		bool operator < (const RTime &rt)$/;"	f	class:RTime
operator <	base/baseTime.h	/^		inline bool operator< (const Time &time) const$/;"	f	class:Time
operator <	orgainCode/baseTime.h	/^		bool operator < (const RTime &rt)$/;"	f	class:RTime
operator <	orgainCode/baseTime.h	/^		inline bool operator< (const Time &time) const$/;"	f	class:Time
operator <=	base/baseTime.h	/^		bool operator <= (const RTime &rt)$/;"	f	class:RTime
operator <=	base/baseTime.h	/^		inline bool operator<=  (const Time &time) const$/;"	f	class:Time
operator <=	orgainCode/baseTime.h	/^		bool operator <= (const RTime &rt)$/;"	f	class:RTime
operator <=	orgainCode/baseTime.h	/^		inline bool operator<=  (const Time &time) const$/;"	f	class:Time
operator =	base/baseSqlValType.h	/^		inline ValType& operator= (const T& value)$/;"	f	class:ValType
operator =	base/baseSqlValType.h	/^		inline ValType& operator= (const ValType& value)$/;"	f	class:ValType
operator =	base/baseSubService.h	/^	GameZone& operator= ( const GameZone &gameZone )$/;"	f	struct:GameZone
operator =	base/baseTime.h	/^		RTime& operator= (const RTime& rt)$/;"	f	class:RTime
operator =	base/baseTime.h	/^		inline Time& operator= (const Time &time)$/;"	f	class:Time
operator =	base/bitSet.cpp	/^BitSet& BitSet::operator= (const BitSet& ref )$/;"	f	class:BitSet
operator =	orgainCode/baseTime.h	/^		RTime& operator= (const RTime& rt)$/;"	f	class:RTime
operator =	orgainCode/baseTime.h	/^		inline Time& operator= (const Time &time)$/;"	f	class:Time
operator =	protol/protolCmd.h	/^	ServerEntry& operator= ( const ServerEntry &serverEntry )$/;"	f	struct:ServerEntry
operator ==	base/baseSubService.h	/^	bool operator== ( const GameZone &gameZone )$/;"	f	struct:GameZone
operator ==	base/baseTime.h	/^		bool operator == (const RTime &rt)$/;"	f	class:RTime
operator ==	base/baseTime.h	/^		inline bool operator== (const Time &time) const$/;"	f	class:Time
operator ==	orgainCode/baseTime.h	/^		bool operator == (const RTime &rt)$/;"	f	class:RTime
operator ==	orgainCode/baseTime.h	/^		inline bool operator== (const Time &time) const$/;"	f	class:Time
operator >	base/baseTime.h	/^		bool operator> (const RTime &rt)$/;"	f	class:RTime
operator >	base/baseTime.h	/^		inline bool operator> (const Time &time) const$/;"	f	class:Time
operator >	orgainCode/baseTime.h	/^		bool operator> (const RTime &rt)$/;"	f	class:RTime
operator >	orgainCode/baseTime.h	/^		inline bool operator> (const Time &time) const$/;"	f	class:Time
operator >=	base/baseTime.h	/^		bool operator >= (const RTime &rt)$/;"	f	class:RTime
operator >=	base/baseTime.h	/^		inline bool operator>= (const Time &time) const$/;"	f	class:Time
operator >=	orgainCode/baseTime.h	/^		bool operator >= (const RTime &rt)$/;"	f	class:RTime
operator >=	orgainCode/baseTime.h	/^		inline bool operator>= (const Time &time) const$/;"	f	class:Time
operator []	base/baseProperty.h	/^		ValType& operator[] ( const std::string &key )$/;"	f	class:Property
operator []	orgainCode/baseProperty.h	/^		VarType& operator[] ( const std::string &key )$/;"	f	class:Property
operator char	base/baseSqlValType.h	/^		inline operator char() const$/;"	f	class:ValType
operator const char*	base/baseSqlValType.h	/^		inline operator const char*() const$/;"	f	class:ValType
operator const void*	base/baseSqlValType.h	/^		inline operator const void*() const$/;"	f	class:ValType
operator double	base/baseSqlValType.h	/^		inline operator double() const$/;"	f	class:ValType
operator float	base/baseSqlValType.h	/^		inline operator float() const$/;"	f	class:ValType
operator int	base/baseSqlValType.h	/^		inline operator int() const$/;"	f	class:ValType
operator long	base/baseSqlValType.h	/^		inline operator long() const$/;"	f	class:ValType
operator long long	base/baseSqlValType.h	/^		inline operator long long() const$/;"	f	class:ValType
operator short	base/baseSqlValType.h	/^		inline operator short() const$/;"	f	class:ValType
operator unsigned char	base/baseSqlValType.h	/^		inline operator unsigned char() const$/;"	f	class:ValType
operator unsigned int	base/baseSqlValType.h	/^		inline operator unsigned int() const$/;"	f	class:ValType
operator unsigned long	base/baseSqlValType.h	/^		inline operator unsigned long() const$/;"	f	class:ValType
operator unsigned long long	base/baseSqlValType.h	/^		inline operator unsigned long long()  const$/;"	f	class:ValType
operator unsigned short	base/baseSqlValType.h	/^		inline operator unsigned short() const$/;"	f	class:ValType
outIp	protol/protolCmd.h	/^	char outIp[MAX_IP_LENGTH];$/;"	m	struct:ResponseStartServerCmd
outNetIP	protol/protolCmd.h	/^	char outNetIP[MAX_IP_LENGTH];$/;"	m	struct:ServerEntry
outNetPort	protol/protolCmd.h	/^	WORD outNetPort;$/;"	m	struct:ServerEntry
outPort	protol/protolCmd.h	/^	WORD outPort;$/;"	m	struct:ResponseStartServerCmd
pSocket	orgainCode/baseTcpClientTask.h	/^		Socket *pSocket;$/;"	m	class:TcpClientTaskBase
packetAppend	base/baseSocket.h	/^DWORD Socket::packetAppend(const void *pData,const DWORD len,BufferType& cmdQueue)$/;"	f	class:Socket
packetAppendNoEnc	base/baseSocket.h	/^DWORD Socket::packetAppendNoEnc(const void *pData,const DWORD len,BufferType& cmdQueue)$/;"	f	class:Socket
packetMinSize	base/baseSocket.h	/^		inline DWORD packetMinSize() const$/;"	f	class:Socket
packetPackNoZip	base/baseSocket.h	/^DWORD Socket::packetPackNoZip(const void *pData,const DWORD len,BufferType& cmdQueue)$/;"	f	class:Socket
packetPackZip	base/baseSocket.h	/^DWORD Socket::packetPackZip(const void *pData,const DWORD len,BufferType& cmdQueue,const bool compress)$/;"	f	class:Socket
packetSize	base/baseSocket.h	/^		inline DWORD packetSize(const BYTE *in) const$/;"	f	class:Socket
packetUnpack	base/baseSocket.cpp	/^DWORD Socket::packetUnpack(BYTE *in,const DWORD packetLen,BYTE *out)$/;"	f	class:Socket
packetUnpack	orgainCode/baseSocket.cpp	/^DWORD Socket::packetUnpack(BYTE *in,const DWORD packetLen,BYTE *out)$/;"	f	class:Socket
parse	base/baseTcpClientBuffer.cpp	/^bool TcpClientBufferQueue::parse(const Cmd::NullCmd *nullCmd,const DWORD cmdLen)$/;"	f	class:TcpClientBufferQueue
parse	base/baseTcpTaskQueue.cpp	/^bool TcpTaskQueue::parse(const Cmd::NullCmd *cmd,const DWORD cmdLen)$/;"	f	class:TcpTaskQueue
parse	orgainCode/baseTcpClientBuffer.cpp	/^bool TcpClientBufferQueue::parse(const Cmd::NullCmd *nullCmd,const unsigned int cmdLen)$/;"	f	class:TcpClientBufferQueue
parse	orgainCode/baseTcpTaskQueue.cpp	/^bool TcpTaskQueue::parse(const Cmd::NullCmd *cmd,const unsigned int cmdLen)$/;"	f	class:TcpTaskQueue
parseCmdLine	base/baseProperty.cpp	/^DWORD Property::parseCmdLine( const char *cmdLine )$/;"	f	class:Property
parseCmdLine	base/baseProperty.cpp	/^DWORD Property::parseCmdLine( const std::string &cmdLine )$/;"	f	class:Property
parseCmdLine	orgainCode/baseProperty.cpp	/^DWORD Property::parseCmdLine( const char *cmdLine )$/;"	f	class:Property
parseCmdLine	orgainCode/baseProperty.cpp	/^DWORD Property::parseCmdLine( const std::string &cmdLine )$/;"	f	class:Property
parseMySQLURLString	base/baseSqlUrl.h	/^ 	void parseMySQLURLString()$/;"	f	struct:MysqlUrl
passwd	base/baseSqlUrl.h	/^	char passwd[MAX_PASSWORD];$/;"	m	struct:MysqlUrl
pool	base/baseRecycleThread.h	/^		TcpTaskPool *pool;$/;"	m	class:RecycleThread
pool	orgainCode/baseCheckConnectThread.h	/^		TcpClientTaskPool *pool;$/;"	m	class:CheckConnectThread
pool	orgainCode/baseCheckWaitThread.h	/^		TcpClientTaskPool *pool;$/;"	m	class:CheckWaitThread
port	base/baseSqlUrl.h	/^	DWORD port;$/;"	m	struct:MysqlUrl
port	orgainCode/baseTcpClientTask.h	/^		const DWORD port;$/;"	m	class:TcpClientTaskBase
port	protol/protolCmd.h	/^	WORD port;$/;"	m	struct:ResponseStartServerCmd
port	protol/protolCmd.h	/^	WORD port;$/;"	m	struct:ServerEntry
processChangeSocket	base/baseOkayThread.cpp	/^void OkayThread::processChangeSocket(TcpTask *task,SDWORD &kdpfd)$/;"	f	class:OkayThread
processCountFd	base/baseOkayThread.cpp	/^void OkayThread::processCountFd(DWORD &countFd,bool &check,SDWORD &kdpfd,EpollfdContainer &epollFdContainer)$/;"	f	class:OkayThread
processMsg	base/baseOkayThread.cpp	/^void OkayThread::processMsg()$/;"	f	class:OkayThread
processMsg	orgainCode/baseOkayThread.cpp	/^void OkayThread::processMsg()$/;"	f	class:OkayThread
processTerminate	base/baseOkayThread.cpp	/^void OkayThread::processTerminate(TcpTask_IT &it,TcpTask *task,SDWORD &kdpfd,DWORD &countFd,EpollfdContainer &epollFdContainer)$/;"	f	class:OkayThread
propertyMap	base/baseProperty.h	/^		PropertyMap propertyMap;$/;"	m	class:Property
propertyMap	orgainCode/baseProperty.h	/^		PropertyMap propertyMap;$/;"	m	class:Property
protocol	protol/protolCmd.h	/^	DWORD protocol;$/;"	m	struct:RequestStartServerCmd
psterIP	orgainCode/superTask.h	/^		char psterIP[MAX_IP_LENGTH];$/;"	m	class:SuperTask
pstrExtIP	orgainCode/superTask.h	/^		char pstrExtIP[MAX_IP_LENGTH];$/;"	m	class:SuperTask
push	base/baseEntry.h	/^		 inline bool push(Entry * &e)$/;"	f	class:EntryName
push	base/baseEntry.h	/^		bool push(Entry *entry) { return true; }$/;"	f	class:EntryNone
push	base/baseEntry.h	/^		inline bool push(Entry * &e)$/;"	f	class:EntryID
push	base/baseEntry.h	/^		inline bool push(Entry * e)$/;"	f	class:EntryTempID
put	base/baseMsgContainer.h	/^		bool put(const void *ptNullCmd,const DWORD cmdLen)$/;"	f	class:MsgQueue
put	base/baseMsgContainer.h	/^		inline void put(const BYTE *buf,const DWORD size)$/;"	f	class:ByteBuffer
put	base/baseSqlRecord.cpp	/^bool Record::put(const char *filedName)$/;"	f	class:Record
put	base/baseSqlRecord.h	/^		void put(const char *filedName,T value)$/;"	f	class:Record
put	base/baseSqlRecord.h	/^		void put(const char *filedName,const void *data,DWORD len)$/;"	f	class:Record
put	base/baseSqlValType.h	/^		inline void put(const T& value)$/;"	f	class:ValType
put	base/baseSqlValType.h	/^		inline void put(const void* data,const unsigned int len)$/;"	f	class:ValType
put	base/baseSqlValType.h	/^		void put(const BYTE& value)$/;"	f	class:ValType
put	base/baseTcpClientTaskPool.cpp	/^bool TcpClientTaskPool::put( TcpClientTaskBase *task )$/;"	f	class:TcpClientTaskPool
put	base/baseTcpClientTaskPool_1.cpp	/^bool TcpClientTaskPool::put( TcpClientTaskBase *task )$/;"	f	class:TcpClientTaskPool
putHandle	base/baseSqlPool.cpp	/^void MysqlPool::putHandle(MysqlHandle *handle)$/;"	f	class:MysqlPool
putQueueToArray	base/baseMsgContainer.h	/^		bool putQueueToArray()$/;"	f	class:MsgQueue
putUrl	base/baseSqlPool.cpp	/^bool MysqlPool::putUrl(unsigned int hashcode,const char *url)$/;"	f	class:MysqlPool
put_and_update	base/baseSqlRecord.h	/^		void put_and_update(const char *fileName,T value)$/;"	f	class:Record
putk	base/baseSqlRecord.cpp	/^bool Record::putk(const char *filedName,DWORD key)$/;"	f	class:Record
putk	base/baseSqlRecord.h	/^		void putk(const char *filedName,T value,DWORD key)$/;"	f	class:Record
putk	base/baseSqlRecord.h	/^		void putk(const char *filedName,const void *data,DWORD len,DWORD key)$/;"	f	class:Record
query_string	base/baseSqlHandle.cpp	/^	std::ostringstream &query_string;$/;"	m	struct:WhereExec	file:
queueCmd	base/baseMsgContainer.h	/^		std::queue<CmdPair>queueCmd;$/;"	m	class:MsgQueue
queueRead	base/baseMsgContainer.h	/^		DWORD queueRead;$/;"	m	class:MsgQueue
queueWrite	base/baseMsgContainer.h	/^		DWORD queueWrite;$/;"	m	class:MsgQueue
randBetween	base/global.cpp	/^	int randBetween(int min,int max)$/;"	f	namespace:Global
randBetween	orgainCode/global.cpp	/^	int randBetween(int min,int max)$/;"	f	namespace:Global
rcv_raw_size	base/baseSocket.h	/^		inline DWORD rcv_raw_size() const$/;"	f	class:Socket
rdBuffer	base/baseMsgContainer.h	/^		inline BYTE *rdBuffer()$/;"	f	class:ByteBuffer
rdFlip	base/baseMsgContainer.h	/^		inline void rdFlip(const DWORD size)$/;"	f	class:ByteBuffer
rdReady	base/baseMsgContainer.h	/^		inline bool rdReady()$/;"	f	class:ByteBuffer
rdSize	base/baseMsgContainer.h	/^		inline DWORD rdSize()$/;"	f	class:ByteBuffer
rdlock	base/baseLock.h	/^		RWLock &rdlock;$/;"	m	class:RWLock_scope_rdlock
rdlock	base/baseLock.h	/^		inline void rdlock()$/;"	f	class:RWLock
rdlock	base/baseLock.h	/^		void rdlock() { rwlock.rdlock();}$/;"	f	class:RWLocker
rdlock	base/baseLock.h	/^		void rdlock() {}$/;"	f	class:RWLocker
reConn	orgainCode/baseTcpClientTask.h	/^		const bool reConn;$/;"	m	class:TcpClientTaskBase
reConnect	base/baseTcpClient.cpp	/^bool TcpClientBase::reConnect(const char *ip,const WORD port)$/;"	f	class:TcpClientBase
reSet	base/bitSet.cpp	/^void BitSet::reSet( size_t index )$/;"	f	class:BitSet
recordFinal	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::recordFinal()$/;"	f	class:RecordTimeTick
recordVec	base/baseSqlRecord.h	/^		RecordVec recordVec;$/;"	m	struct:RecordSet
recursive	base/baseLock.h	/^			recursive = PTHREAD_MUTEX_RECURSIVE_NP,$/;"	e	enum:Mutex::MutexType
recvToBuf	base/baseSocket.cpp	/^SWORD Socket::recvToBuf()$/;"	f	class:Socket
recvToBuf	orgainCode/baseSocket.cpp	/^SWORD Socket::recvToBuf()$/;"	f	class:Socket
recvToBufNoPoll	base/baseSocket.cpp	/^SWORD Socket::recvToBufNoPoll()$/;"	f	class:Socket
recvToBuf_NoPoll	orgainCode/baseSocket.cpp	/^SWORD Socket::recvToBuf_NoPoll()$/;"	f	class:Socket
recvToCmd	base/baseSocket.cpp	/^SWORD Socket::recvToCmd(void *cmd,const SWORD cmdLen,const bool wait)$/;"	f	class:Socket
recvToCmd	orgainCode/baseSocket.cpp	/^SWORD Socket::recvToCmd(void *pstrCmd,const SWORD cmdLen,const bool wait)$/;"	f	class:Socket
recvToCmdNoPoll	base/baseSocket.cpp	/^SWORD Socket::recvToCmdNoPoll(void *pstrCmd,const DWORD cmdLen)$/;"	f	class:Socket
recvToCmd_NoPoll	orgainCode/baseSocket.cpp	/^SWORD Socket::recvToCmd_NoPoll(void *pstrCmd,const DWORD cmdLen)$/;"	f	class:Socket
recycle	orgainCode/baseTcpClientTask.h	/^			recycle = 3,$/;"	e	enum:TcpClientTaskBase::ConnState
recycleConn	base/baseTcpTask.h	/^		virtual SWORD recycleConn()$/;"	f	class:TcpTask
recycleConn	orgainCode/baseTcpClientTask.h	/^		virtual void recycleConn()$/;"	f	class:TcpClientTaskBase
recycleConnect	SuperServer/superTask.cpp	/^SDWORD SuperTask::recycleConnect()$/;"	f	class:SuperTask
recycleConnect	base/baseTcpClientTask.h	/^		virtual void recycleConnect()$/;"	f	class:TcpClientTaskBase
recycleConnect	orgainCode/superTask.cpp	/^SDWORD SuperTask::recycleConnect()$/;"	f	class:SuperTask
recycle_time	orgainCode/superTask.h	/^		int recycle_time;$/;"	m	class:SuperTask
reloadAllFileds	base/baseSqlTable.cpp	/^bool Table::reloadAllFileds(MYSQL *mysql,const char     *tableName)$/;"	f	class:Table
reloadAllTables	base/baseSqlTable.cpp	/^bool TableManager::reloadAllTables(MYSQL *mysql_conn)$/;"	f	class:TableManager
reloadConfig	RecordServer/RecordServer.cpp	/^void RecordServer::reloadConfig()$/;"	f	class:RecordServer
reloadConfig	ScenesServer/scenesServer.cpp	/^void ScenesServer::reloadConfig()$/;"	f	class:ScenesServer
reloadConfig	SessionServer/SessionServer.cpp	/^void SessionServer::reloadConfig()$/;"	f	class:SessionServer
reloadConfig	SuperServer/SuperServer.cpp	/^void SuperServer::reloadConfig()$/;"	f	class:SuperServer
reloadConfig	base/baseService.h	/^		virtual void reloadConfig()$/;"	f	class:Service
reloadConfig	orgainCode/ScenesServer.cpp	/^void ScenesServer::reloadConfig()$/;"	f	class:ScenesServer
reloadConfig	orgainCode/SuperServer.cpp	/^void SuperServer::reloadConfig()$/;"	f	class:SuperServer
reloadConfig	orgainCode/scenesServer.cpp	/^void ScenesServer::reloadConfig()$/;"	f	class:ScenesServer
remove	base/baseCheckWaitThread.cpp	/^void CheckWaitThread::remove( TcpClientTaskBase *task)$/;"	f	class:CheckWaitThread
remove	base/baseCheckWaitThread.cpp	/^void CheckWaitThread::remove( TcpClientTaskBase_IT &it )$/;"	f	class:CheckWaitThread
remove	base/baseEntry.h	/^		inline void remove(Entry * e)$/;"	f	class:EntryID
remove	base/baseEntry.h	/^		inline void remove(Entry * e)$/;"	f	class:EntryName
remove	base/baseEntry.h	/^		inline void remove(Entry * e)$/;"	f	class:EntryTempID
remove	base/baseEntry.h	/^		inline void remove(const keyT &key)$/;"	f	class:LimitHash
remove	base/baseEntry.h	/^		void remove(Entry *entry) { }$/;"	f	class:EntryNone
remove	base/baseOkayThread.cpp	/^void OkayThread::remove(TcpTask_IT &it)$/;"	f	class:OkayThread
remove	base/baseTcpClientThread.cpp	/^void TcpClientTaskThread::remove( TcpClientTaskBase_IT &it )$/;"	f	class:TcpClientTaskThread
remove	base/baseVerifyThread.cpp	/^void VerifyThread::remove(TcpTask *task)$/;"	f	class:VerifyThread
remove	base/baseVerifyThread.cpp	/^void VerifyThread::remove(TcpTask_IT &it)$/;"	f	class:VerifyThread
remove	orgainCode/baseCheckWaitThread.cpp	/^void CheckWaitThread::remove( TcpClientTaskBase *task)$/;"	f	class:CheckWaitThread
remove	orgainCode/baseCheckWaitThread.cpp	/^void CheckWaitThread::remove( TcpClientTaskBase_IT &it )$/;"	f	class:CheckWaitThread
remove	orgainCode/baseOkayThread.cpp	/^void OkayThread::remove(TcpTask_IT &it)$/;"	f	class:OkayThread
removeConsole	base/baseLog.cpp	/^void Logger::removeConsole()$/;"	f	class:Logger
removeEntry	base/baseEntry.h	/^		void removeEntry(Entry *entry)$/;"	f	class:EntryManager
removeEntry_if	base/baseEntry.h	/^		void removeEntry_if(RemoveEntry_Pred<YourEntry> &pred)$/;"	f	class:EntryManager
removeFiled	base/baseSqlRecord.cpp	/^void Record::removeFiled(Filed *entry)$/;"	f	class:Record
removeFromContainer	base/baseTcpClientTask.h	/^		virtual void removeFromContainer()$/;"	f	class:TcpClientTaskBase
removeFromContainer	base/baseTcpTask.h	/^		virtual void removeFromContainer()$/;"	f	class:TcpTask
removeFromContainer	orgainCode/baseTcpClientTask.h	/^		virtual void removeFromContainer()$/;"	f	class:TcpClientTaskBase
removeMysqlHandle	base/baseSqlHandle.h	/^		void removeMysqlHandle(MysqlHandle *entry)$/;"	f	class:MysqlHandleManager
removeMysqlUrl	base/baseSqlUrl.h	/^		void removeMysqlUrl(MysqlUrl *entry)$/;"	f	class:MysqlUrlManager
removeTable	base/baseSqlTable.h	/^		void removeTable(Table *entry)$/;"	f	class:TableManager
removeTask	base/baseTaskManager.h	/^		void removeTask(T *task)$/;"	f	class:TaskManager
removeTask	orgainCode/baseTaskManager.h	/^		void removeTask(T *task)$/;"	f	class:TaskManager
removeThread	base/baseThread.cpp	/^void ThreadManager::removeThread(Thread *entry)$/;"	f	class:ThreadManager
removeThread	base/baseThreadManager.h	/^		void removeThread(Thread *entry)$/;"	f	class:TaskThreadManager
removeThread	orgainCode/baseThreadManager.h	/^		void removeThread(Thread *entry)$/;"	f	class:TaskThreadManager
removeVec	base/baseEntry.h	/^	std::vector<YourEntry*> removeVec;$/;"	m	struct:RemoveEntry_Pred
reset	base/baseMsgContainer.h	/^		inline void reset()$/;"	f	class:ByteBuffer
reset	base/baseTime.h	/^		void reset(const QWORD milSec,const Time &cur)$/;"	f	class:Timer
reset	orgainCode/baseTime.h	/^		void reset(const QWORD milSec,const Time &cur)$/;"	f	class:Timer
reset	sql/database.py	/^def reset():$/;"	f
resetState	base/baseTcpClientTask.cpp	/^void TcpClientTaskBase::resetState()$/;"	f	class:TcpClientTaskBase
resetState	base/baseTcpTask.cpp	/^void TcpTask::resetState()$/;"	f	class:TcpTask
resetState	orgainCode/baseTcpClientTask.cpp	/^void TcpClientTaskBase::resetState()$/;"	f	class:TcpClientTaskBase
resetTickTimer	base/baseTcpClientTask.cpp	/^void TcpClientTaskBase::resetTickTimer(const QWORD howLong)$/;"	f	class:TcpClientTaskBase
resetTickTimer	orgainCode/baseTcpClientTask.cpp	/^void TcpClientTaskBase::resetTickTimer(DWORD howLong)$/;"	f	class:TcpClientTaskBase
restore_timezone	base/baseTime.cpp	/^void Time::restore_timezone(const std::string &tzstr)$/;"	f	class:Time
run	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::run()$/;"	f	class:RecordTimeTick
run	ScenesServer/timeTick.cpp	/^void SceneTimeTick::run()$/;"	f	class:SceneTimeTick
run	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::run()$/;"	f	class:SessionTimeTick
run	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::run()$/;"	f	class:SuperTimeTick
run	base/baseCheckConnectThread.cpp	/^void CheckConnectThread::run()$/;"	f	class:CheckConnectThread
run	base/baseCheckWaitThread.cpp	/^void CheckWaitThread::run()$/;"	f	class:CheckWaitThread
run	base/baseOkayThread.cpp	/^void OkayThread::run()$/;"	f	class:OkayThread
run	base/baseRecycleThread.cpp	/^void RecycleThread::run()$/;"	f	class:RecycleThread
run	base/baseSuperClient.cpp	/^void SuperClient::run()$/;"	f	class:SuperClient
run	base/baseSyncThread.cpp	/^void SyncThread::run()$/;"	f	class:SyncThread
run	base/baseTcpClient.cpp	/^void TcpClientBase::run()$/;"	f	class:TcpClientBase
run	base/baseTcpClientBuffer.cpp	/^void TcpClientBuffer::run()$/;"	f	class:TcpClientBuffer
run	base/baseTcpClientThread.cpp	/^void TcpClientTaskThread::run()$/;"	f	class:TcpClientTaskThread
run	base/baseVerifyThread.cpp	/^void VerifyThread::run()$/;"	f	class:VerifyThread
run	orgainCode/baseCheckConnectThread.cpp	/^void CheckConnectThread::run()$/;"	f	class:CheckConnectThread
run	orgainCode/baseCheckWaitThread.cpp	/^void CheckWaitThread::run()$/;"	f	class:CheckWaitThread
run	orgainCode/baseOkayThread.cpp	/^void OkayThread::run()$/;"	f	class:OkayThread
run	orgainCode/baseSuperClient.cpp	/^void SuperClient::run()$/;"	f	class:SuperClient
run	orgainCode/baseTcpClientBuffer.cpp	/^void TcpClientBuffer::run()$/;"	f	class:TcpClientBuffer
run	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::run()$/;"	f	class:SuperTimeTick
rwlock	base/baseLock.h	/^		RWLock rwlock;$/;"	m	class:RWLocker
rwlock	base/baseLock.h	/^		pthread_rwlock_t rwlock;$/;"	m	class:RWLock
rwlock	base/baseSqlRecord.h	/^		RWLock rwlock;$/;"	m	class:Record
rwlock	base/baseSqlTable.h	/^		RWLock rwlock;$/;"	m	class:TableManager
rwlock	base/baseSqlUrl.h	/^		RWLock rwlock;$/;"	m	class:MysqlUrlManager
rwlock	base/baseThread.h	/^		RWLock rwlock;$/;"	m	class:ThreadManager
rwlock	base/baseThreadManager.h	/^		RWLock rwlock;$/;"	m	class:TaskThreadManager
rwlock	orgainCode/baseTaskManager.h	/^		RWLock rwlock;$/;"	m	class:TaskManager
rwlock	orgainCode/baseThreadManager.h	/^		RWLock rwlock;$/;"	m	class:TaskThreadManager
s_buildTime	base/baseService.cpp	/^DWORD Service::s_buildTime = 0;$/;"	m	class:Service	file:
s_buildTime	base/baseService.h	/^		static DWORD s_buildTime;$/;"	m	class:Service
s_checkMove	RecordServer/RecordServer.cpp	/^bool RecordServer::s_checkMove = true;$/;"	m	class:RecordServer	file:
s_checkMove	RecordServer/RecordServer.h	/^		static bool s_checkMove;$/;"	m	class:RecordServer
s_checkMove	ScenesServer/scenesServer.cpp	/^bool ScenesServer::s_checkMove = true;$/;"	m	class:ScenesServer	file:
s_checkMove	ScenesServer/scenesServer.h	/^		static bool s_checkMove;$/;"	m	class:ScenesServer
s_checkMove	SessionServer/SessionServer.cpp	/^bool SessionServer::s_checkMove = true;$/;"	m	class:SessionServer	file:
s_checkMove	SessionServer/SessionServer.h	/^		static bool s_checkMove;$/;"	m	class:SessionServer
s_checkMove	orgainCode/ScenesServer.cpp	/^bool ScenesServer::s_checkMove = true;$/;"	m	class:ScenesServer	file:
s_checkMove	orgainCode/ScenesServer.h	/^		static bool s_checkMove;$/;"	m	class:ScenesServer
s_checkMove	orgainCode/scenesServer.cpp	/^bool ScenesServer::s_checkMove = true;$/;"	m	class:ScenesServer	file:
s_compressSize	base/baseSocket.cpp	/^DWORD Socket::s_compressSize = 0;$/;"	m	class:Socket	file:
s_compressSize	base/baseSocket.h	/^		static DWORD s_compressSize;$/;"	m	class:Socket
s_compressSize	orgainCode/baseSocket.cpp	/^DWORD Socket::s_compressSize = 0;$/;"	m	class:Socket	file:
s_currentTime	RecordServer/recordTimeTick.cpp	/^Time RecordTimeTick::s_currentTime;$/;"	m	class:RecordTimeTick	file:
s_currentTime	RecordServer/recordTimeTick.h	/^		static Time s_currentTime;$/;"	m	class:RecordTimeTick
s_currentTime	ScenesServer/timeTick.cpp	/^Time SceneTimeTick::s_currentTime;$/;"	m	class:SceneTimeTick	file:
s_currentTime	ScenesServer/timeTick.h	/^		static Time s_currentTime;$/;"	m	class:SceneTimeTick
s_currentTime	SessionServer/sessionTimeTick.cpp	/^Time SessionTimeTick::s_currentTime;$/;"	m	class:SessionTimeTick	file:
s_currentTime	SessionServer/sessionTimeTick.h	/^		static Time s_currentTime;$/;"	m	class:SessionTimeTick
s_currentTime	SuperServer/superTimeTick.cpp	/^Time SuperTimeTick::s_currentTime;$/;"	m	class:SuperTimeTick	file:
s_currentTime	SuperServer/superTimeTick.h	/^		static Time s_currentTime;$/;"	m	class:SuperTimeTick
s_currentTime	orgainCode/superTimeTick.cpp	/^Time SuperTimeTick::s_currentTime;$/;"	m	class:SuperTimeTick	file:
s_incompleteRead	base/baseSocket.h	/^		static const DWORD s_incompleteRead = 0X00000001;$/;"	m	class:Socket
s_incompleteWrite	base/baseSocket.h	/^		static const DWORD s_incompleteWrite = 0X00000002;$/;"	m	class:Socket
s_initOK	RecordServer/RecordServer.cpp	/^bool RecordServer::s_initOK = false;$/;"	m	class:RecordServer	file:
s_initOK	RecordServer/RecordServer.h	/^		static bool s_initOK;$/;"	m	class:RecordServer
s_initOK	ScenesServer/scenesServer.cpp	/^bool ScenesServer::s_initOK = false;$/;"	m	class:ScenesServer	file:
s_initOK	ScenesServer/scenesServer.h	/^		static bool s_initOK;$/;"	m	class:ScenesServer
s_initOK	SessionServer/SessionServer.cpp	/^bool SessionServer::s_initOK = false;$/;"	m	class:SessionServer	file:
s_initOK	SessionServer/SessionServer.h	/^		static bool s_initOK;$/;"	m	class:SessionServer
s_initOK	orgainCode/ScenesServer.cpp	/^bool ScenesServer::s_initOK = false;$/;"	m	class:ScenesServer	file:
s_initOK	orgainCode/ScenesServer.h	/^		static bool s_initOK;$/;"	m	class:ScenesServer
s_initOK	orgainCode/scenesServer.cpp	/^bool ScenesServer::s_initOK = false;$/;"	m	class:ScenesServer	file:
s_lock	SuperServer/superTask.cpp	/^RWLock SuperTask::s_lock;$/;"	m	class:SuperTask	file:
s_lock	SuperServer/superTask.h	/^		static RWLock s_lock;$/;"	m	class:SuperTask
s_lock	orgainCode/superTask.cpp	/^RWLock SuperTask::s_lock;$/;"	m	class:SuperTask	file:
s_maxConCnt	base/baseCheckConnectThread.h	/^		static const int s_maxConCnt = 4096;$/;"	m	class:CheckConnectThread
s_maxConCnt	base/baseCheckWaitThread.h	/^		static const int s_maxConCnt = 4096;$/;"	m	class:CheckWaitThread
s_maxConCnt	base/baseTcpClientThread.cpp	/^int TcpClientTaskThread::s_maxConCnt = 20;$/;"	m	class:TcpClientTaskThread	file:
s_maxConCnt	base/baseTcpClientThread.h	/^		static int s_maxConCnt;$/;"	m	class:TcpClientTaskThread
s_maxConCnt	orgainCode/baseTcpClientThread.h	/^		static int s_maxConCnt;$/;"	m	class:TcpClientTaskThread
s_maxDataBufferSize	base/baseSocket.h	/^		static const DWORD s_maxDataBufferSize = s_packetMask;$/;"	m	class:Socket
s_maxDataSize	base/baseSocket.h	/^		 static const DWORD s_maxDataSize = s_maxDataBufferSize - s_packHeadLen;$/;"	m	class:Socket
s_maxTaskSize	base/baseOkayThread.h	/^		static const DWORD s_maxTaskSize = 512;$/;"	m	class:OkayThread
s_maxTaskSize	base/baseSyncThread.h	/^		static const DWORD s_maxTaskSize = 65534;$/;"	m	class:SyncThread
s_maxTaskSize	base/baseVerifyThread.h	/^		static const SDWORD s_maxTaskSize = 1024;$/;"	m	class:VerifyThread
s_maxUserDataSize	base/baseSocket.h	/^		static const DWORD s_maxUserDataSize = s_maxDataSize;$/;"	m	class:Socket
s_maxWaitQueue	base/baseTcpService.h	/^		static const SDWORD s_maxWaitQueue = 2000;$/;"	m	class:TcpService
s_msec	base/baseTcpService.h	/^		static const SDWORD s_msec = 2100;$/;"	m	class:TcpService
s_mySqlPool	SuperServer/SuperServer.cpp	/^MysqlPool*  SuperServer::s_mySqlPool = NULL;$/;"	m	class:SuperServer	file:
s_mySqlPool	SuperServer/SuperServer.h	/^		static MysqlPool *s_mySqlPool;$/;"	m	class:SuperServer
s_mySqlPool	orgainCode/SuperServer.cpp	/^MysqlPool*  SuperServer::s_mySqlPool = NULL;$/;"	m	class:SuperServer	file:
s_mySqlPool	orgainCode/SuperServer.h	/^		static MysqlPool *s_mySqlPool;$/;"	m	class:SuperServer
s_myTimeSync	base/baseTime.cpp	/^long Time::s_myTimeSync = 0L;$/;"	m	class:Time	file:
s_myTimeSync	base/baseTime.h	/^		static SQWORD s_myTimeSync;$/;"	m	class:Time
s_myTimeSync	orgainCode/baseTime.h	/^		static SQWORD s_myTimeSync;$/;"	m	class:Time
s_myTimeZone	base/baseTime.cpp	/^long Time::s_myTimeZone = 0L;$/;"	m	class:Time	file:
s_myTimeZone	base/baseTime.h	/^		static SQWORD s_myTimeZone;$/;"	m	class:Time
s_myTimeZone	orgainCode/baseTime.h	/^		static SQWORD s_myTimeZone;$/;"	m	class:Time
s_noCompressSize	base/baseSocket.cpp	/^DWORD Socket::s_noCompressSize = 0;$/;"	m	class:Socket	file:
s_noCompressSize	base/baseSocket.h	/^		static DWORD s_noCompressSize;$/;"	m	class:Socket
s_noCompressSize	orgainCode/baseSocket.cpp	/^DWORD Socket::s_noCompressSize = 0;$/;"	m	class:Socket	file:
s_online	RecordServer/RecordServer.h	/^		static DWORD s_online;$/;"	m	class:RecordServer
s_online	ScenesServer/scenesServer.h	/^		static DWORD s_online;$/;"	m	class:ScenesServer
s_online	SessionServer/SessionServer.h	/^		static DWORD s_online;$/;"	m	class:SessionServer
s_online	orgainCode/ScenesServer.h	/^		static DWORD s_online;$/;"	m	class:ScenesServer
s_openElemEffect	RecordServer/RecordServer.cpp	/^bool RecordServer::s_openElemEffect = true;$/;"	m	class:RecordServer	file:
s_openElemEffect	RecordServer/RecordServer.h	/^		static bool s_openElemEffect;$/;"	m	class:RecordServer
s_openElemEffect	ScenesServer/scenesServer.cpp	/^bool ScenesServer::s_openElemEffect = true;$/;"	m	class:ScenesServer	file:
s_openElemEffect	ScenesServer/scenesServer.h	/^		static bool s_openElemEffect;$/;"	m	class:ScenesServer
s_openElemEffect	SessionServer/SessionServer.cpp	/^bool SessionServer::s_openElemEffect = true;$/;"	m	class:SessionServer	file:
s_openElemEffect	SessionServer/SessionServer.h	/^		static bool s_openElemEffect;$/;"	m	class:SessionServer
s_openElemEffect	orgainCode/ScenesServer.cpp	/^bool ScenesServer::s_openElemEffect = true;$/;"	m	class:ScenesServer	file:
s_openElemEffect	orgainCode/ScenesServer.h	/^		static bool s_openElemEffect;$/;"	m	class:ScenesServer
s_openElemEffect	orgainCode/scenesServer.cpp	/^bool ScenesServer::s_openElemEffect = true;$/;"	m	class:ScenesServer	file:
s_packHeadLen	base/baseSocket.h	/^		static const DWORD s_packHeadLen = sizeof(DWORD);$/;"	m	class:Socket
s_packetMask	base/baseSocket.h	/^		static const DWORD s_packetMask = trunkSize - 1;$/;"	m	class:Socket
s_packetZip	base/baseSocket.h	/^		static const DWORD s_packetZip = 0x40000000;$/;"	m	class:Socket
s_rdMsec	base/baseSocket.h	/^		static const DWORD s_rdMsec = 2100;$/;"	m	class:Socket
s_reloadConfig	RecordServer/RecordServer.cpp	/^bool RecordServer::s_reloadConfig = false;$/;"	m	class:RecordServer	file:
s_reloadConfig	RecordServer/RecordServer.h	/^		static bool s_reloadConfig;$/;"	m	class:RecordServer
s_reloadConfig	ScenesServer/scenesServer.cpp	/^bool ScenesServer::s_reloadConfig = false;$/;"	m	class:ScenesServer	file:
s_reloadConfig	ScenesServer/scenesServer.h	/^		static bool s_reloadConfig;$/;"	m	class:ScenesServer
s_reloadConfig	SessionServer/SessionServer.cpp	/^bool SessionServer::s_reloadConfig = false;$/;"	m	class:SessionServer	file:
s_reloadConfig	SessionServer/SessionServer.h	/^		static bool s_reloadConfig;$/;"	m	class:SessionServer
s_reloadConfig	orgainCode/ScenesServer.cpp	/^bool ScenesServer::s_reloadConfig = false;$/;"	m	class:ScenesServer	file:
s_reloadConfig	orgainCode/ScenesServer.h	/^		static bool s_reloadConfig;$/;"	m	class:ScenesServer
s_reloadConfig	orgainCode/scenesServer.cpp	/^bool ScenesServer::s_reloadConfig = false;$/;"	m	class:ScenesServer	file:
s_serverCount	RecordServer/RecordServer.cpp	/^WORD RecordServer::s_serverCount = 0;$/;"	m	class:RecordServer	file:
s_serverCount	RecordServer/RecordServer.h	/^		static WORD s_serverCount;$/;"	m	class:RecordServer
s_serverCount	ScenesServer/scenesServer.cpp	/^WORD ScenesServer::s_serverCount = 0;$/;"	m	class:ScenesServer	file:
s_serverCount	ScenesServer/scenesServer.h	/^		static WORD s_serverCount;$/;"	m	class:ScenesServer
s_serverCount	SessionServer/SessionServer.cpp	/^WORD SessionServer::s_serverCount = 0;$/;"	m	class:SessionServer	file:
s_serverCount	SessionServer/SessionServer.h	/^		static WORD s_serverCount;$/;"	m	class:SessionServer
s_serverCount	orgainCode/ScenesServer.cpp	/^WORD ScenesServer::s_serverCount = 0;$/;"	m	class:ScenesServer	file:
s_serverCount	orgainCode/ScenesServer.h	/^		static WORD s_serverCount;$/;"	m	class:ScenesServer
s_serverCount	orgainCode/scenesServer.cpp	/^WORD ScenesServer::s_serverCount = 0;$/;"	m	class:ScenesServer	file:
s_serverSequence	RecordServer/RecordServer.cpp	/^WORD RecordServer::s_serverSequence = 0;$/;"	m	class:RecordServer	file:
s_serverSequence	RecordServer/RecordServer.h	/^		static WORD s_serverSequence;$/;"	m	class:RecordServer
s_serverSequence	ScenesServer/scenesServer.cpp	/^WORD ScenesServer::s_serverSequence = 0;$/;"	m	class:ScenesServer	file:
s_serverSequence	ScenesServer/scenesServer.h	/^		static WORD s_serverSequence;$/;"	m	class:ScenesServer
s_serverSequence	SessionServer/SessionServer.cpp	/^WORD SessionServer::s_serverSequence = 0;$/;"	m	class:SessionServer	file:
s_serverSequence	SessionServer/SessionServer.h	/^		static WORD s_serverSequence;$/;"	m	class:SessionServer
s_serverSequence	orgainCode/ScenesServer.cpp	/^WORD ScenesServer::s_serverSequence = 0;$/;"	m	class:ScenesServer	file:
s_serverSequence	orgainCode/ScenesServer.h	/^		static WORD s_serverSequence;$/;"	m	class:ScenesServer
s_serverSequence	orgainCode/scenesServer.cpp	/^WORD ScenesServer::s_serverSequence = 0;$/;"	m	class:ScenesServer	file:
s_svnVersion	base/baseService.cpp	/^DWORD Service::s_svnVersion = 0;$/;"	m	class:Service	file:
s_svnVersion	base/baseService.h	/^		static DWORD s_svnVersion;$/;"	m	class:Service
s_tempId	base/baseThread.cpp	/^QWORD Thread::s_tempId = 0;$/;"	m	class:Thread	file:
s_tempId	base/baseThread.h	/^		static QWORD s_tempId;$/;"	m	class:Thread
s_tm	base/baseTime.h	/^		struct tm s_tm;$/;"	m	class:Time	typeref:struct:Time::tm
s_tm	orgainCode/baseTime.h	/^		struct tm s_tm;$/;"	m	class:Time	typeref:struct:Time::tm
s_unCompressSize	base/baseSocket.cpp	/^DWORD Socket::s_unCompressSize = 0;$/;"	m	class:Socket	file:
s_unCompressSize	base/baseSocket.h	/^		static DWORD s_unCompressSize;$/;"	m	class:Socket
s_unCompressSize	orgainCode/baseSocket.cpp	/^DWORD Socket::s_unCompressSize = 0;$/;"	m	class:Socket	file:
s_usleepTime	base/baseTaskPool.cpp	/^QWORD TcpTaskPool::s_usleepTime = 50000L;$/;"	m	class:TcpTaskPool	file:
s_usleepTime	base/baseTaskPool.h	/^		static QWORD s_usleepTime;$/;"	m	class:TcpTaskPool
s_waitFinal	RecordServer/RecordServer.cpp	/^bool RecordServer::s_waitFinal = false;$/;"	m	class:RecordServer	file:
s_waitFinal	RecordServer/RecordServer.h	/^		static bool s_waitFinal;$/;"	m	class:RecordServer
s_waitFinal	ScenesServer/scenesServer.cpp	/^bool ScenesServer::s_waitFinal = false;$/;"	m	class:ScenesServer	file:
s_waitFinal	ScenesServer/scenesServer.h	/^		static bool s_waitFinal;$/;"	m	class:ScenesServer
s_waitFinal	SessionServer/SessionServer.cpp	/^bool SessionServer::s_waitFinal = false;$/;"	m	class:SessionServer	file:
s_waitFinal	SessionServer/SessionServer.h	/^		static bool s_waitFinal;$/;"	m	class:SessionServer
s_waitFinal	orgainCode/ScenesServer.cpp	/^bool ScenesServer::s_waitFinal = false;$/;"	m	class:ScenesServer	file:
s_waitFinal	orgainCode/ScenesServer.h	/^		static bool s_waitFinal;$/;"	m	class:ScenesServer
s_waitFinal	orgainCode/scenesServer.cpp	/^bool ScenesServer::s_waitFinal = false;$/;"	m	class:ScenesServer	file:
s_wrMsec	base/baseSocket.h	/^		static const DWORD s_wrMsec = 5100;$/;"	m	class:Socket
save_timezone	base/baseTime.cpp	/^void Time::save_timezone(std::string &tzstr)$/;"	f	class:Time
sceneFinal	ScenesServer/timeTick.cpp	/^void SceneTimeTick::sceneFinal()$/;"	f	class:SceneTimeTick
scenes_doc	orgainCode/ScenesServer.cpp	/^static char scenes_doc[] = "\\nScenesServer\\n" "\\t场景服务器.";$/;"	v	file:
scenes_options	orgainCode/ScenesServer.cpp	/^static struct argp_option scenes_options[] =$/;"	v	typeref:struct:argp_option	file:
scenes_parse_opt	ScenesServer/scenesServer.cpp	/^static error_t scenes_parse_opt( int key,char *arg,struct argp_state *state )$/;"	f	file:
scenes_parse_opt	orgainCode/ScenesServer.cpp	/^static error_t scenes_parse_opt( int key,char *arg,struct argp_state *state )$/;"	f	file:
scenes_parse_opt	orgainCode/scenesServer.cpp	/^static error_t scenes_parse_opt( int key,char *arg,struct argp_state *state )$/;"	f	file:
sec	base/baseTime.h	/^		DWORD sec() const$/;"	f	class:RTime
sec	base/baseTime.h	/^		inline QWORD sec() const$/;"	f	class:Time
sec	orgainCode/baseTime.h	/^		DWORD sec() const$/;"	f	class:RTime
sec	orgainCode/baseTime.h	/^		inline QWORD sec() const$/;"	f	class:Time
sendCmd	base/baseSocket.cpp	/^bool Socket::sendCmd(const void *pstrCmd,const DWORD cmdLen,const bool buffer)$/;"	f	class:Socket
sendCmd	base/baseTcpClient.cpp	/^bool TcpClientBase::sendCmd(const void *strCmd,const DWORD cmdLen)$/;"	f	class:TcpClientBase
sendCmd	base/baseTcpClientBuffer.cpp	/^bool TcpClientBuffer::sendCmd(const void *cmd,const DWORD cmdLen)$/;"	f	class:TcpClientBuffer
sendCmd	base/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::sendCmd(const void *cmd,const DWORD cmdLen)$/;"	f	class:TcpClientTaskBase
sendCmd	base/baseTcpTask.cpp	/^bool TcpTask::sendCmd(const void *cmd,const DWORD cmdLen)$/;"	f	class:TcpTask
sendCmd	orgainCode/baseSocket.cpp	/^bool Socket::sendCmd(const void *pstrCmd,const DWORD cmdLen,const bool buffer)$/;"	f	class:Socket
sendCmd	orgainCode/baseTcpClientBuffer.cpp	/^bool TcpClientBuffer::sendCmd(const void *strCmd,const int cmdLen)$/;"	f	class:TcpClientBuffer
sendCmd	orgainCode/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::sendCmd(const void *cmd,const int cmdLen)$/;"	f	class:TcpClientTaskBase
sendCmd1	base/baseSocket.cpp	/^bool Socket::sendCmd1(const void *pstrCmd,const SWORD cmdLen,const bool buffer)$/;"	f	class:Socket
sendCmd1	orgainCode/baseSocket.cpp	/^bool Socket::sendCmd1(const void *pstrCmd,const SWORD cmdLen,const bool buffer)$/;"	f	class:Socket
sendCmdNoPack	base/baseSocket.cpp	/^bool Socket::sendCmdNoPack(const void *pstrCmd,const DWORD cmdLen,const bool buffer)$/;"	f	class:Socket
sendCmdNoPack	base/baseTcpTask.cpp	/^bool TcpTask::sendCmdNoPack(const void *cmd,const DWORD cmdLen)$/;"	f	class:TcpTask
sendCmdNoPack	orgainCode/baseSocket.cpp	/^bool Socket::sendCmdNoPack(const void *pstrCmd,const DWORD cmdLen,const bool buffer)$/;"	f	class:Socket
sendCmdToFLServer	base/baseSubService.cpp	/^bool SubNetService::sendCmdToFLServer( const WORD serverID,const void *strCmd,const DWORD cmdLen )$/;"	f	class:SubNetService
sendCmdToSuperServer	base/baseSubService.cpp	/^bool SubNetService::sendCmdToSuperServer( const void *strCmd,const DWORD cmdLen )$/;"	f	class:SubNetService
sendLoginCmd	base/baseTcpClient.cpp	/^bool TcpClientBase::sendLoginCmd()$/;"	f	class:TcpClientBase
sendLoginCmd	base/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::sendLoginCmd()$/;"	f	class:TcpClientTaskBase
sendLoginCmd	orgainCode/baseTcpClientTask.cpp	/^bool TcpClientTaskBase::sendLoginCmd()$/;"	f	class:TcpClientTaskBase
sendRawData	base/baseSocket.cpp	/^SWORD Socket::sendRawData(const void *pBuffer,const DWORD size)$/;"	f	class:Socket
sendRawData	orgainCode/baseSocket.cpp	/^SWORD Socket::sendRawData(const void *pBuffer,const DWORD size)$/;"	f	class:Socket
sendRawDataIM	base/baseSocket.cpp	/^bool Socket::sendRawDataIM(const void *pBuffer,const DWORD size)$/;"	f	class:Socket
sendRawDataIM	orgainCode/baseSocket.cpp	/^bool Socket::sendRawDataIM(const void *pBuffer,const DWORD size)$/;"	f	class:Socket
sendRawData_NoPoll	base/baseSocket.cpp	/^SWORD Socket::sendRawData_NoPoll(const void *pBuffer,const DWORD size)$/;"	f	class:Socket
sendRawData_NoPoll	orgainCode/baseSocket.cpp	/^SWORD Socket::sendRawData_NoPoll(const void *pBuffer,const DWORD size)$/;"	f	class:Socket
sendUserCmdToMonitor	SuperServer/SuperServer.cpp	/^bool SuperServer::sendUserCmdToMonitor( const void *pstrCmd,const DWORD cmdLen )$/;"	f	class:SuperServer
sendUserCmdToMonitor	orgainCode/SuperServer.cpp	/^bool SuperServer::sendUserCmdToMonitor( const void *pstrCmd,const DWORD cmdLen )$/;"	f	class:SuperServer
serverID	protol/protolCmd.h	/^	WORD serverID;$/;"	m	struct:LoginStartServerCmd
serverID	protol/protolCmd.h	/^	WORD serverID;$/;"	m	struct:NotifyOtherServer
serverID	protol/protolCmd.h	/^	WORD serverID;$/;"	m	struct:OkStartServerCmd
serverID	protol/protolCmd.h	/^	WORD serverID;$/;"	m	struct:ResponseStartServerCmd
serverID	protol/protolCmd.h	/^	WORD serverID;$/;"	m	struct:ServerEntry
serverListSQL	sql/database.py	/^def serverListSQL():$/;"	f
serverReturnSize	orgainCode/superTask.h	/^		DWORD serverReturnSize;$/;"	m	class:SuperTask
serverType	protol/protolCmd.h	/^	DWORD serverType;$/;"	m	struct:LoginStartServerCmd
serverType	protol/protolCmd.h	/^	DWORD serverType;$/;"	m	struct:RequestStartServerCmd
serverType	protol/protolCmd.h	/^	WORD serverType;$/;"	m	struct:ServerEntry
serverVersion	base/global.cpp	/^	volatile WORD serverVersion = 0;$/;"	v
serversize	orgainCode/superTask.h	/^		DWORD serversize;$/;"	m	class:SuperTask
serviceCallBack	base/baseNetService.cpp	/^bool NetService::serviceCallBack()$/;"	f	class:NetService
sessionFinal	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::sessionFinal()$/;"	f	class:SessionTimeTick
set	base/baseProperty.h	/^		void set( const std::string &key,const ValType &value )$/;"	f	class:Property
set	base/bitSet.cpp	/^void BitSet::set( size_t index )$/;"	f	class:BitSet
set	orgainCode/baseProperty.h	/^		void set( const std::string &key,const VarType &value )$/;"	f	class:Property
setChangeSocket	base/baseSocket.cpp	/^bool Socket::setChangeSocket(const SWORD socket)$/;"	f	class:Socket
setChangeSocket	orgainCode/baseSocket.cpp	/^bool Socket::setChangeSocket(const SWORD socket)$/;"	f	class:Socket
setCheckTimeout	base/baseTcpTask.h	/^		void setCheckTimeout(bool check)$/;"	f	class:TcpTask
setFile	base/baseLog.cpp	/^void Logger::setFile( const char *fileName )$/;"	f	class:Logger
setFlag	base/baseSocket.h	/^		inline void setFlag(const DWORD flg)$/;"	f	class:Socket
setHandle	base/baseSqlHandle.cpp	/^bool MysqlHandle::setHandle()$/;"	f	class:MysqlHandle
setIP	base/baseTcpClient.h	/^		void setIP(const char *ip) $/;"	f	class:TcpClientBase
setLevel	base/baseLog.cpp	/^void Logger::setLevel(const LogLevel level)$/;"	f	class:Logger
setLevel	base/baseLog.cpp	/^void Logger::setLevel(const std::string &level)$/;"	f	class:Logger
setMaxCount	base/baseThreadManager.h	/^		void setMaxCount(const DWORD count)$/;"	f	class:TaskThreadManager
setMaxCount	orgainCode/baseThreadManager.h	/^		void setMaxCount(int count)$/;"	f	class:TaskThreadManager
setMaxSize	base/baseTcpClientThread.cpp	/^void TcpClientTaskThread::setMaxSize( DWORD perThreadSize )$/;"	f	class:TcpClientTaskThread
setMinCount	base/baseThreadManager.h	/^		void setMinCount(const DWORD count)$/;"	f	class:TaskThreadManager
setMinCount	orgainCode/baseThreadManager.h	/^		void setMinCount(int count)$/;"	f	class:TaskThreadManager
setName	base/baseLog.cpp	/^void Logger::setName(const char* name)$/;"	f	class:Logger
setNonblock	base/baseSocket.cpp	/^bool Socket::setNonblock()$/;"	f	class:Socket
setNonblock	orgainCode/baseSocket.cpp	/^bool Socket::setNonblock()$/;"	f	class:Socket
setPort	base/baseTcpClient.h	/^		void setPort(const WORD port)$/;"	f	class:TcpClientBase
setReConnect	base/baseTcpClient.h	/^		void setReConnect(bool connectFlg)$/;"	f	class:TcpClientBase
setReadTimeOut	base/baseSocket.h	/^		inline void setReadTimeOut(const DWORD msec)$/;"	f	class:Socket
setRuning	base/baseThread.h	/^		inline void setRuning()$/;"	f	class:Thread
setServerInfo	base/baseSubService.cpp	/^void SubNetService::setServerInfo(const Cmd::Server::ResponseStartServerCmd *cmd)$/;"	f	class:SubNetService
setState	base/baseTcpClientTask.h	/^		void setState(const ConnectState state)$/;"	f	class:TcpClientTaskBase
setState	base/baseTcpTask.h	/^		void setState(const TcpTask_State state)$/;"	f	class:TcpTask
setState	orgainCode/baseTcpClientTask.h	/^		void setState(const ConnState state)$/;"	f	class:TcpClientTaskBase
setTick	base/baseTcpClientTask.h	/^		void setTick()$/;"	f	class:TcpClientTaskBase
setTick	base/baseTcpTask.h	/^		void setTick()$/;"	f	class:TcpTask
setTick	orgainCode/baseTcpClientTask.h	/^		void setTick()$/;"	f	class:TcpClientTaskBase
setTimeSync	base/baseTime.cpp	/^void Time::setTimeSync(const QWORD sync)$/;"	f	class:Time
setUnique	base/baseTcpTask.h	/^		void setUnique()$/;"	f	class:TcpTask
setUsleep	base/baseTcpClientTaskPool.h	/^		void setUsleep( const QWORD usTime )$/;"	f	class:TcpClientTaskPool
setUsleepTime	base/baseTaskPool.h	/^		static void setUsleepTime(const QWORD time)$/;"	f	class:TcpTaskPool
setUsleepTime	base/baseTcpClientBuffer.h	/^		void setUsleepTime(const QWORD uSleepTime)$/;"	f	class:TcpClientBuffer
setWriteTimeOut	base/baseSocket.h	/^		inline void setWriteTimeOut(const DWORD msec)$/;"	f	class:Socket
setZoneID	SuperServer/SuperServer.cpp	/^void SuperServer::setZoneID( const GameZone &gameZone )$/;"	f	class:SuperServer
setZoneID	orgainCode/SuperServer.cpp	/^void SuperServer::setZoneID( const GameZone &gameZone )$/;"	f	class:SuperServer
setZoneName	SuperServer/SuperServer.h	/^		void setZoneName( const char *zoneName )$/;"	f	class:SuperServer
setZoneName	orgainCode/SuperServer.h	/^		void setZoneName( const char *zoneName )$/;"	f	class:SuperServer
setmsecs	base/baseTime.h	/^		void setmsecs(QWORD _data)$/;"	f	class:RTime
setmsecs	orgainCode/baseTime.h	/^		void setmsecs(QWORD _data)$/;"	f	class:RTime
shared_ptr	base/autoLifeHook.h	/^		boost::shared_ptr<AutoLifeHook> shared_ptr;$/;"	m	class:AutoLifeHook
signal	base/baseLock.h	/^		void signal()$/;"	f	class:Condition
size	base/baseEntry.h	/^		inline DWORD size() const$/;"	f	class:LimitHash
size	base/baseEntry.h	/^		size_t size() const$/;"	f	class:EntryManager
size	base/baseSqlRecord.h	/^		inline unsigned int size() const$/;"	f	struct:RecordSet
size	base/baseSqlValType.h	/^		inline unsigned size() const$/;"	f	class:ValType
size	common/nullCmd.h	/^	DWORD size;$/;"	m	struct:ZipCmdPackNullCmd
size	orgainCode/nullCmd.h	/^	DWORD size;$/;"	m	struct:ZipCmdPackNullCmd
size	protol/protolCmd.h	/^	WORD size;$/;"	m	struct:NotifyMeServer
sleep	base/baseThread.cpp	/^void Thread::sleep(const SQWORD sec)$/;"	f	class:Thread
snd_queue_size	base/baseSocket.h	/^		inline DWORD snd_queue_size()$/;"	f	class:Socket
sort	base/baseEntry.h	/^		void sort(SortFunc sortFunc)$/;"	f	class:EntryManager
split	base/global.cpp	/^	void split( const std::string &str,std::vector<std::string> &strVec,const std::string splitStr )$/;"	f	namespace:Global
split	orgainCode/global.cpp	/^	void split( const std::string &str,std::vector<std::string> &strVec,const std::string splitStr )$/;"	f	namespace:Global
src	RecordServer/Makefile	/^src =  RecordServer.cpp\\$/;"	m
src	ScenesServer/Makefile	/^src = timeTick.cpp\\$/;"	m
src	SessionServer/Makefile	/^src =  SessionServer.cpp\\$/;"	m
src	SuperServer/Makefile	/^src = main.cpp\\$/;"	m
src	base/Makefile	/^src = main.cpp\\$/;"	m
src	common/Makefile	/^src = main.cpp$/;"	m
src	protol/Makefile	/^src = main.cpp$/;"	m
start	base/baseThread.cpp	/^bool Thread::start()$/;"	f	class:Thread
startDuduMark	orgainCode/SuperServer.h	/^		BYTE startDuduMark;$/;"	m	class:SuperServer
startSQL	sql/database.py	/^def startSQL():$/;"	f
startUpOK	base/baseSubService.h	/^		void startUpOK()$/;"	f	class:SubNetService
startUpOver	RecordServer/RecordServer.cpp	/^void RecordServer::startUpOver()$/;"	f	class:RecordServer
startUpOver	ScenesServer/scenesServer.cpp	/^void ScenesServer::startUpOver()$/;"	f	class:ScenesServer
startUpOver	SessionServer/SessionServer.cpp	/^void SessionServer::startUpOver()$/;"	f	class:SessionServer
startUpOver	base/baseSubService.cpp	/^void SubNetService::startUpOver()$/;"	f	class:SubNetService
startUpOver	orgainCode/ScenesServer.cpp	/^void ScenesServer::startUpOver()$/;"	f	class:ScenesServer
startUpOver	orgainCode/scenesServer.cpp	/^void ScenesServer::startUpOver()$/;"	f	class:ScenesServer
state	orgainCode/baseTcpClientTask.h	/^		volatile ConnState state;$/;"	m	class:TcpClientTaskBase
state	protol/protolCmd.h	/^	WORD state;$/;"	m	struct:ServerEntry
stopwork	RunServer.sh	/^stopwork()$/;"	f
stopwork	RunServer.sh~	/^stopwork()$/;"	f
stopwork	orgainCode/RunServer.sh	/^stopwork()$/;"	f
storeValue	base/baseSqlHandle.cpp	/^inline std::ostringstream& MysqlHandle::storeValue(Table *table,std::ostringstream &query_string,const SDWORD type, const ValType &value)$/;"	f	class:MysqlHandle
successRecv	base/baseSocket.cpp	/^void Socket::successRecv(const DWORD retcode)$/;"	f	class:Socket
successUnpack	base/baseSocket.cpp	/^DWORD Socket::successUnpack(void *cmd)$/;"	f	class:Socket
success_recv	orgainCode/baseSocket.cpp	/^void Socket::success_recv(const SWORD retcode)$/;"	f	class:Socket
success_unpack	orgainCode/baseSocket.cpp	/^SWORD Socket::success_unpack(void *pstrCmd)$/;"	f	class:Socket
superFinal	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::superFinal()$/;"	f	class:SuperTimeTick
superFinal	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::superFinal()$/;"	f	class:SuperTimeTick
supportTransactions	base/baseSqlUrl.h	/^	const bool supportTransactions;$/;"	m	struct:MysqlUrl
svnVersion	protol/protolCmd.h	/^	DWORD svnVersion;$/;"	m	struct:RequestStartServerCmd
switchAnalysis	RecordServer/RecordServer.cpp	/^void RecordServer::switchAnalysis( bool switchFlg )$/;"	f	class:RecordServer
switchAnalysis	ScenesServer/scenesServer.cpp	/^void ScenesServer::switchAnalysis( bool switchFlg )$/;"	f	class:ScenesServer
switchAnalysis	SessionServer/SessionServer.cpp	/^void SessionServer::switchAnalysis( bool switchFlg )$/;"	f	class:SessionServer
switchAnalysis	base/baseNetService.h	/^		virtual void switchAnalysis(bool switchON)$/;"	f	class:NetService
switchAnalysis	orgainCode/ScenesServer.cpp	/^void ScenesServer::switchAnalysis( bool switchFlg )$/;"	f	class:ScenesServer
switchAnalysis	orgainCode/scenesServer.cpp	/^void ScenesServer::switchAnalysis( bool switchFlg )$/;"	f	class:ScenesServer
sync	base/baseSocket.cpp	/^bool Socket::sync()$/;"	f	class:Socket
sync	base/baseTcpClientBuffer.cpp	/^void TcpClientBuffer::sync()$/;"	f	class:TcpClientBuffer
sync	orgainCode/baseSocket.cpp	/^bool Socket::sync()$/;"	f	class:Socket
sync	orgainCode/baseTcpClientBuffer.cpp	/^void TcpClientBuffer::sync()$/;"	f	class:TcpClientBuffer
sync	orgainCode/baseTcpClientTask.h	/^			sync = 1,$/;"	e	enum:TcpClientTaskBase::ConnState
table	base/baseSqlHandle.cpp	/^	Table *table;$/;"	m	struct:WhereExec	file:
taskCount	base/baseThreadManager.h	/^		DWORD taskCount()$/;"	f	class:TaskThreadManager
taskCount	orgainCode/baseThreadManager.h	/^		int taskCount()$/;"	f	class:TaskThreadManager
taskSize	base/baseCheckConnectThread.cpp	/^int CheckConnectThread::taskSize() const$/;"	f	class:CheckConnectThread
taskSize	base/baseCheckWaitThread.cpp	/^int CheckWaitThread::taskSize() const$/;"	f	class:CheckWaitThread
taskSize	base/baseOkayThread.cpp	/^DWORD OkayThread::taskSize() const$/;"	f	class:OkayThread
taskSize	base/baseRecycleThread.cpp	/^int RecycleThread::taskSize() const$/;"	f	class:RecycleThread
taskSize	base/baseSyncThread.cpp	/^DWORD SyncThread::taskSize() const$/;"	f	class:SyncThread
taskSize	base/baseTcpClientThread.cpp	/^int TcpClientTaskThread::taskSize() const$/;"	f	class:TcpClientTaskThread
taskSize	base/baseVerifyThread.cpp	/^int VerifyThread::taskSize() const$/;"	f	class:VerifyThread
taskSize	orgainCode/baseCheckConnectThread.cpp	/^int CheckConnectThread::taskSize() const$/;"	f	class:CheckConnectThread
taskSize	orgainCode/baseCheckWaitThread.cpp	/^int CheckWaitThread::taskSize() const$/;"	f	class:CheckWaitThread
taskSize	orgainCode/baseOkayThread.cpp	/^DWORD OkayThread::taskSize() const$/;"	f	class:OkayThread
taskType	orgainCode/baseTcpClientTask.h	/^		DWORD taskType;$/;"	m	class:TcpClientTaskBase
task_count	orgainCode/baseCheckWaitThread.h	/^		TcpClientTaskBaseContainer::size_type task_count;$/;"	m	class:CheckWaitThread
task_count	orgainCode/baseTcpClientThread.h	/^		TcpClientTaskBaseContainer::size_type task_count;$/;"	m	class:TcpClientTaskThread
tasks	base/baseRecycleThread.h	/^		TcpTaskContainer tasks;$/;"	m	class:RecycleThread
tasks	orgainCode/baseCheckConnectThread.h	/^		TcpClientTaskBaseContainer tasks;$/;"	m	class:CheckConnectThread
tempid	base/baseEntry.h	/^			DWORD tempid;$/;"	m	union:Entry::__anon6
tempid1	base/baseEntry.h	/^				WORD tempid1;$/;"	m	struct:Entry::__anon6::__anon7
tempid2	base/baseEntry.h	/^				WORD tempid2;$/;"	m	struct:Entry::__anon6::__anon7
tenSec	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::tenSec()$/;"	f	class:RecordTimeTick
tenSec	ScenesServer/timeTick.cpp	/^void SceneTimeTick::tenSec()$/;"	f	class:SceneTimeTick
tenSec	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::tenSec()$/;"	f	class:SessionTimeTick
tenSec	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::tenSec()$/;"	f	class:SuperTimeTick
tenSec	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::tenSec()$/;"	f	class:SuperTimeTick
terminate	base/baseTcpClientTask.h	/^		void terminate(const TerminateMethod method )$/;"	f	class:TcpClientTaskBase
terminate	orgainCode/baseTcpClientTask.h	/^		TerminateMethod terminate;$/;"	m	class:TcpClientTaskBase
terminaterWait	base/baseTcpTask.h	/^		void terminaterWait()$/;"	f	class:TcpTask
threadProc	base/baseThread.cpp	/^void* Thread::threadProc(void *arg)$/;"	f	class:Thread
tick	orgainCode/baseTcpClientTask.h	/^		bool tick;$/;"	m	class:TcpClientTaskBase
timeStamp	common/nullCmd.h	/^	DWORD timeStamp;$/;"	m	struct:NullUserCmd
timeStamp	orgainCode/nullCmd.h	/^	DWORD timeStamp;$/;"	m	struct:NullUserCmd
timed	base/baseLock.h	/^			timed = PTHREAD_MUTEX_TIMED_NP,$/;"	e	enum:Mutex::MutexType
timedwait	base/baseLock.h	/^		bool timedwait(Mutex &mutex,unsigned int timeout)$/;"	f	class:Condition
tm	base/baseSqlPool.h	/^		std::vector<TableManager*> tm;$/;"	m	class:MysqlPool
trunkCount	base/baseMsgContainer.h	19;"	d
trunkSize	base/baseMsgContainer.h	/^const DWORD trunkSize = 64 * 1024;$/;"	v
trylock	base/baseLock.h	/^		bool trylock()$/;"	f	class:Mutex
type	base/baseMsgContainer.h	/^		typedef Cmd_type type;$/;"	t	class:CmdBuffer_wrapper
type	base/baseSqlFiled.h	/^		DWORD type;$/;"	m	struct:Filed
type	protol/protolCmd.h	/^	ServerType type;$/;"	m	struct:ServerTypeStruct
tz_lock	base/baseTime.cpp	/^static Mutex tz_lock;$/;"	v	file:
uniqueAdd	SuperServer/superTask.cpp	/^bool SuperTask::uniqueAdd()$/;"	f	class:SuperTask
uniqueAdd	base/baseTaskManager.h	/^		bool uniqueAdd(T *task)$/;"	f	class:TaskManager
uniqueAdd	base/baseTcpTask.h	/^		virtual bool uniqueAdd()$/;"	f	class:TcpTask
uniqueAdd	orgainCode/baseTaskManager.h	/^		bool uniqueAdd(T *task)$/;"	f	class:TaskManager
uniqueAdd	orgainCode/superTask.cpp	/^bool SuperTask::uniqueAdd()$/;"	f	class:SuperTask
uniqueRemove	SuperServer/superTask.cpp	/^bool SuperTask::uniqueRemove()$/;"	f	class:SuperTask
uniqueRemove	base/baseTaskManager.h	/^		bool uniqueRemove(T *task)$/;"	f	class:TaskManager
uniqueRemove	base/baseTcpTask.h	/^		virtual bool uniqueRemove()$/;"	f	class:TcpTask
uniqueRemove	orgainCode/baseTaskManager.h	/^		bool uniqueRemove(T *task)$/;"	f	class:TaskManager
uniqueRemove	orgainCode/superTask.cpp	/^bool SuperTask::uniqueRemove()$/;"	f	class:SuperTask
uniqueVerify	base/baseTaskManager.h	/^		bool uniqueVerify(const DWORD id)$/;"	f	class:TaskManager
uniqueVerify	orgainCode/baseTaskManager.h	/^		bool uniqueVerify(const DWORD id)$/;"	f	class:TaskManager
unlock	base/baseLock.h	/^		inline void unlock()$/;"	f	class:RWLock
unlock	base/baseLock.h	/^		void unlock() { rwlock.unlock();}$/;"	f	class:RWLocker
unlock	base/baseLock.h	/^		void unlock() {}$/;"	f	class:RWLocker
unlock	base/baseLock.h	/^		void unlock()$/;"	f	class:Mutex
unzip_size	base/baseMsgContainer.h	21;"	d
updateAllDatabase	sql/database.py	/^def updateAllDatabase():$/;"	f
updateDatabase	sql/database.py	/^def updateDatabase():$/;"	f
upper	base/global.cpp	/^	char upper( char value )$/;"	f	namespace:Global
upper	orgainCode/global.cpp	/^	char upper( char value )$/;"	f	namespace:Global
url	base/baseSqlUrl.h	/^	const std::string url;$/;"	m	struct:MysqlUrl
usec	base/baseTime.h	/^		inline QWORD usec() const$/;"	f	class:Time
usec	orgainCode/baseTime.h	/^		inline QWORD usec() const$/;"	f	class:Time
user	base/baseSqlUrl.h	/^	char user[MAX_USERSIZE];$/;"	m	struct:MysqlUrl
usleep	base/baseThread.cpp	/^void Thread::usleep(const SQWORD usec)$/;"	f	class:Thread
valid	base/baseSqlValType.h	/^		inline bool valid() const$/;"	f	class:ValType
validate	base/baseService.h	/^		virtual bool validate()$/;"	f	class:Service
validate	base/baseSubService.cpp	/^bool SubNetService::validate()$/;"	f	class:SubNetService
verify	SuperServer/superTask.cpp	/^bool SuperTask::verify(const DWORD serverType,const char *ip)$/;"	f	class:SuperTask
verify	orgainCode/baseSuperClient.h	/^		bool verify;$/;"	m	class:SuperClient
verify	orgainCode/superTask.cpp	/^bool SuperTask::verify(const DWORD serverType,const char *ip)$/;"	f	class:SuperTask
verifyConnect	SuperServer/superTask.cpp	/^SDWORD SuperTask::verifyConnect()$/;"	f	class:SuperTask
verifyConnect	base/baseTcpTask.cpp	/^SDWORD TcpTask::verifyConnect()$/;"	f	class:TcpTask
verifyConnect	orgainCode/superTask.cpp	/^SDWORD SuperTask::verifyConnect()$/;"	f	class:SuperTask
voidaddEpoll	orgainCode/baseTcpClientTask.h	/^		voidaddEpoll(int kdpfd,__uint32_t events,void *ptr)$/;"	f	class:TcpClientTaskBase
wDay	base/baseTime.h	/^WORD wDay;$/;"	m	struct:__anon2
wDay	orgainCode/baseTime.h	/^WORD wDay;$/;"	m	struct:__anon1
wHour	base/baseTime.h	/^WORD wHour;$/;"	m	struct:__anon2
wHour	orgainCode/baseTime.h	/^WORD wHour;$/;"	m	struct:__anon1
wMinute	base/baseTime.h	/^WORD wMinute;$/;"	m	struct:__anon2
wMinute	orgainCode/baseTime.h	/^WORD wMinute;$/;"	m	struct:__anon1
wMonth	base/baseTime.h	/^WORD wMonth;$/;"	m	struct:__anon2
wMonth	orgainCode/baseTime.h	/^WORD wMonth;$/;"	m	struct:__anon1
wSecond	base/baseTime.h	/^WORD wSecond;$/;"	m	struct:__anon2
wSecond	orgainCode/baseTime.h	/^WORD wSecond;$/;"	m	struct:__anon1
wYear	base/baseTime.h	/^WORD wYear;$/;"	m	struct:__anon2
wYear	orgainCode/baseTime.h	/^WORD wYear;$/;"	m	struct:__anon1
wait	base/baseLock.h	/^		void wait(Mutex &mutex)$/;"	f	class:Condition
waitForRead	base/baseSocket.cpp	/^SWORD Socket::waitForRead()$/;"	f	class:Socket
waitForRead	orgainCode/baseSocket.cpp	/^SWORD Socket::waitForRead()$/;"	f	class:Socket
waitForWrite	base/baseSocket.cpp	/^SWORD Socket::waitForWrite()$/;"	f	class:Socket
waitForWrite	orgainCode/baseSocket.cpp	/^SWORD Socket::waitForWrite()$/;"	f	class:Socket
waitSync	SuperServer/superTask.cpp	/^SDWORD SuperTask::waitSync()$/;"	f	class:SuperTask
waitSync	base/baseTcpTask.h	/^		virtual SDWORD waitSync()$/;"	f	class:TcpTask
waitSync	orgainCode/superTask.cpp	/^SDWORD SuperTask::waitSync()$/;"	f	class:SuperTask
warn	base/baseLog.cpp	/^void Logger::warn(const char *pattern,...)$/;"	f	class:Logger
wdExtPort	orgainCode/superTask.h	/^		WORD wdExtPort;$/;"	m	class:SuperTask
wdPort	orgainCode/superTask.h	/^		WORD wdPort;$/;"	m	class:SuperTask
wid1	base/baseEntry.h	/^				WORD wid1;$/;"	m	struct:Entry::__anon3::__anon4
wid2	base/baseEntry.h	/^				WORD wid2;$/;"	m	struct:Entry::__anon3::__anon4
wrBuffer	base/baseMsgContainer.h	/^		inline BYTE *wrBuffer()$/;"	f	class:ByteBuffer
wrFlip	base/baseMsgContainer.h	/^		inline void wrFlip(const DWORD size)$/;"	f	class:ByteBuffer
wrReserve	base/baseMsgContainer.cpp	/^void BufferCmdQueue::wrReserve(const DWORD size)$/;"	f	class:BufferCmdQueue
wrReserve	base/baseMsgContainer.cpp	/^void StackCmdQueue::wrReserve(const DWORD size)$/;"	f	class:StackCmdQueue
wrSize	base/baseMsgContainer.h	/^		inline DWORD wrSize()$/;"	f	class:ByteBuffer
wrlock	base/baseLock.h	/^		RWLock &wrlock;$/;"	m	class:RWLock_scope_wrlock
wrlock	base/baseLock.h	/^		inline void wrlock()$/;"	f	class:RWLock
wrlock	base/baseLock.h	/^		void wrlock() { rwlock.wrlock();}$/;"	f	class:RWLocker
wrlock	base/baseLock.h	/^		void wrlock() {}$/;"	f	class:RWLocker
zeroHour	RecordServer/recordTimeTick.cpp	/^void RecordTimeTick::zeroHour()$/;"	f	class:RecordTimeTick
zeroHour	ScenesServer/timeTick.cpp	/^void SceneTimeTick::zeroHour()$/;"	f	class:SceneTimeTick
zeroHour	SessionServer/sessionTimeTick.cpp	/^void SessionTimeTick::zeroHour()$/;"	f	class:SessionTimeTick
zeroHour	SuperServer/superTimeTick.cpp	/^void SuperTimeTick::zeroHour()$/;"	f	class:SuperTimeTick
zeroHour	orgainCode/superTimeTick.cpp	/^void SuperTimeTick::zeroHour()$/;"	f	class:SuperTimeTick
zone	base/baseSubService.h	/^			WORD zone;$/;"	m	struct:GameZone::__anon9::__anon10
zone	base/baseSubService.h	/^			WORD zone;$/;"	m	struct:ZoneInfo::__anon11::__anon12
zoneID	base/baseSubService.h	/^		DWORD zoneID;$/;"	m	union:ZoneInfo::__anon11
zoneName	base/baseSubService.h	/^	BYTE zoneName[MAX_NAMESIZE];$/;"	m	struct:ZoneInfo
~BitSet	base/bitSet.cpp	/^BitSet::~BitSet()$/;"	f	class:BitSet
~CheckWaitThread	base/baseCheckWaitThread.h	/^		~CheckWaitThread()$/;"	f	class:CheckWaitThread
~CheckWaitThread	orgainCode/baseCheckWaitThread.h	/^		~CheckWaitThread()$/;"	f	class:CheckWaitThread
~Condition	base/baseLock.h	/^		~Condition()$/;"	f	class:Condition
~Entry	base/baseEntry.h	/^		virtual ~Entry() {};$/;"	f	class:Entry
~EntryCallBack	base/baseEntry.h	/^	virtual ~EntryCallBack(){};$/;"	f	struct:EntryCallBack
~EntryManager	base/baseEntry.h	/^		~EntryManager() {}$/;"	f	class:EntryManager
~EntryTempID	base/baseEntry.h	/^		virtual ~EntryTempID() {}$/;"	f	class:EntryTempID
~Filed	base/baseSqlFiled.h	/^		~Filed()$/;"	f	struct:Filed
~LimitHash	base/baseEntry.h	/^		~LimitHash()$/;"	f	class:LimitHash
~Logger	base/baseLog.cpp	/^Logger::~Logger()$/;"	f	class:Logger
~MessageQueue	base/baseMsgContainer.h	/^		virtual ~MessageQueue()$/;"	f	class:MessageQueue
~MsgQueue	base/baseMsgContainer.h	/^		~MsgQueue()$/;"	f	class:MsgQueue
~Mutex	base/baseLock.h	/^		~Mutex()$/;"	f	class:Mutex
~MysqlHandle	base/baseSqlHandle.cpp	/^MysqlHandle::~MysqlHandle()$/;"	f	class:MysqlHandle
~MysqlHandleManager	base/baseSqlHandle.h	/^		~MysqlHandleManager()$/;"	f	class:MysqlHandleManager
~MysqlPool	base/baseSqlPool.cpp	/^MysqlPool::~MysqlPool()$/;"	f	class:MysqlPool
~MysqlUrlManager	base/baseSqlUrl.h	/^		~MysqlUrlManager()$/;"	f	class:MysqlUrlManager
~NetService	base/baseNetService.cpp	/^NetService::~NetService()$/;"	f	class:NetService
~Noncopyable	base/baseClass.h	/^		virtual ~Noncopyable(){};$/;"	f	class:Noncopyable
~OkayThread	base/baseOkayThread.h	/^		~OkayThread()$/;"	f	class:OkayThread
~RWLock	base/baseLock.h	/^		~RWLock()$/;"	f	class:RWLock
~RWLock_scope_rdlock	base/baseLock.h	/^		~RWLock_scope_rdlock()$/;"	f	class:RWLock_scope_rdlock
~RWLock_scope_wrlock	base/baseLock.h	/^		~RWLock_scope_wrlock()$/;"	f	class:RWLock_scope_wrlock
~Record	base/baseSqlRecord.h	/^		~Record()$/;"	f	class:Record
~RecordServer	RecordServer/RecordServer.cpp	/^RecordServer::~RecordServer()$/;"	f	class:RecordServer
~RecordSet	base/baseSqlRecord.h	/^		~RecordSet()$/;"	f	struct:RecordSet
~RecordTimeTick	RecordServer/recordTimeTick.cpp	/^RecordTimeTick::~RecordTimeTick()$/;"	f	class:RecordTimeTick
~RecycleThread	base/baseRecycleThread.h	/^		~RecycleThread() {};$/;"	f	class:RecycleThread
~RemoveEntry_Pred	base/baseEntry.h	/^	virtual ~RemoveEntry_Pred()$/;"	f	struct:RemoveEntry_Pred
~SceneTimeTick	ScenesServer/timeTick.cpp	/^SceneTimeTick::~SceneTimeTick()$/;"	f	class:SceneTimeTick
~ScenesServer	ScenesServer/scenesServer.cpp	/^ScenesServer::~ScenesServer()$/;"	f	class:ScenesServer
~ScenesServer	orgainCode/ScenesServer.cpp	/^ScenesServer::~ScenesServer()$/;"	f	class:ScenesServer
~ScenesServer	orgainCode/scenesServer.cpp	/^ScenesServer::~ScenesServer()$/;"	f	class:ScenesServer
~Service	base/baseService.h	/^		virtual ~Service()$/;"	f	class:Service
~SessionServer	SessionServer/SessionServer.cpp	/^SessionServer::~SessionServer()$/;"	f	class:SessionServer
~SessionTimeTick	SessionServer/sessionTimeTick.cpp	/^SessionTimeTick::~SessionTimeTick()$/;"	f	class:SessionTimeTick
~SingletonBase	base/baseClass.h	/^		~SingletonBase()$/;"	f	class:SingletonBase
~Socket	base/baseSocket.cpp	/^Socket::~Socket()$/;"	f	class:Socket
~Socket	orgainCode/baseSocket.cpp	/^Socket::~Socket()$/;"	f	class:Socket
~SubNetService	base/baseSubService.cpp	/^SubNetService::~SubNetService()$/;"	f	class:SubNetService
~SuperClient	base/baseSuperClient.cpp	/^SuperClient::~SuperClient()$/;"	f	class:SuperClient
~SuperClient	orgainCode/baseSuperClient.cpp	/^SuperClient::~SuperClient()$/;"	f	class:SuperClient
~SuperServer	SuperServer/SuperServer.cpp	/^SuperServer::~SuperServer()$/;"	f	class:SuperServer
~SuperServer	orgainCode/SuperServer.cpp	/^SuperServer::~SuperServer()$/;"	f	class:SuperServer
~SuperTask	SuperServer/superTask.h	/^		~SuperTask() {};$/;"	f	class:SuperTask
~SuperTask	orgainCode/superTask.h	/^		~SuperTask() {};$/;"	f	class:SuperTask
~SuperTaskManager	SuperServer/superTaskManager.h	/^		~SuperTaskManager() {}$/;"	f	class:SuperTaskManager
~SuperTaskManager	orgainCode/superTaskManager.h	/^		~SuperTaskManager() {};$/;"	f	class:SuperTaskManager
~SuperTimeTick	SuperServer/superTimeTick.cpp	/^SuperTimeTick::~SuperTimeTick()$/;"	f	class:SuperTimeTick
~SuperTimeTick	orgainCode/superTimeTick.cpp	/^SuperTimeTick::~SuperTimeTick()$/;"	f	class:SuperTimeTick
~SyncThread	base/baseSyncThread.h	/^		~SyncThread()$/;"	f	class:SyncThread
~Table	base/baseSqlTable.h	/^		~Table()$/;"	f	struct:Table
~TableManager	base/baseSqlTable.h	/^		~TableManager()$/;"	f	class:TableManager
~TaskManager	base/baseTaskManager.h	/^		~TaskManager() {}$/;"	f	class:TaskManager
~TaskManager	orgainCode/baseTaskManager.h	/^		~TaskManager() {};$/;"	f	class:TaskManager
~TaskQueue	base/baseTaskContainer.h	/^		virtual ~TaskQueue()$/;"	f	class:TaskQueue
~TaskQueueManager	base/baseTaskQueueManager.h	/^		virtual ~TaskQueueManager() {}$/;"	f	class:TaskQueueManager
~TaskQueueManager	orgainCode/baseTaskQueueManager.h	/^		virtual ~TaskQueueManager() {};$/;"	f	class:TaskQueueManager
~TaskThread	base/baseTaskThread.cpp	/^TaskThread::~TaskThread()$/;"	f	class:TaskThread
~TaskThreadManager	base/baseThreadManager.h	/^		~TaskThreadManager()$/;"	f	class:TaskThreadManager
~TaskThreadManager	orgainCode/baseThreadManager.h	/^		~TaskThreadManager()$/;"	f	class:TaskThreadManager
~TcpClientBase	base/baseTcpClient.cpp	/^TcpClientBase::~TcpClientBase()$/;"	f	class:TcpClientBase
~TcpClientBuffer	base/baseTcpClientBuffer.h	/^		virtual ~TcpClientBuffer()$/;"	f	class:TcpClientBuffer
~TcpClientBufferQueue	base/baseTcpClientBuffer.h	/^		~TcpClientBufferQueue()$/;"	f	class:TcpClientBufferQueue
~TcpClientTaskBase	base/baseTcpClientTask.h	/^		virtual ~TcpClientTaskBase()$/;"	f	class:TcpClientTaskBase
~TcpClientTaskBase	orgainCode/baseTcpClientTask.h	/^		virtual ~TcpClientTaskBase()$/;"	f	class:TcpClientTaskBase
~TcpClientTaskPool	base/baseTcpClientTaskPool.h	/^		~TcpClientTaskPool()$/;"	f	class:TcpClientTaskPool
~TcpClientTaskThread	base/baseTcpClientThread.h	/^		~TcpClientTaskThread()$/;"	f	class:TcpClientTaskThread
~TcpClientTaskThread	orgainCode/baseTcpClientThread.h	/^		~TcpClientTaskThread()$/;"	f	class:TcpClientTaskThread
~TcpService	base/baseTcpService.cpp	/^TcpService::~TcpService()$/;"	f	class:TcpService
~TcpTask	base/baseTcpTask.h	/^		virtual ~TcpTask()$/;"	f	class:TcpTask
~TcpTaskPool	base/baseTaskPool.h	/^		~TcpTaskPool()$/;"	f	class:TcpTaskPool
~TcpTaskQueue	base/baseTcpTaskQueue.h	/^		virtual ~TcpTaskQueue() {};$/;"	f	class:TcpTaskQueue
~TcpTaskQueue	orgainCode/baseTcpTaskQueue.h	/^		virtual ~TcpTaskQueue() {};$/;"	f	class:TcpTaskQueue
~Thread	base/baseThread.cpp	/^Thread::~Thread()$/;"	f	class:Thread
~ThreadManager	base/baseThread.h	/^		~ThreadManager()$/;"	f	class:ThreadManager
~VerifyThread	base/baseVerifyThread.h	/^		~VerifyThread()$/;"	f	class:VerifyThread
